
SPI_QUICK_START_SLAVE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025a8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000025a8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ccc  20000068  00002610  00010068  2**2
                  ALLOC
  3 .stack        00002004  20000d34  000032dc  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021db6  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f98  00000000  00000000  00031ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000042ac  00000000  00000000  00034e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004d8  00000000  00000000  000390e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004a0  00000000  00000000  000395bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000190b2  00000000  00000000  00039a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bf7e  00000000  00000000  00052b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00083164  00000000  00000000  0005ea8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011bc  00000000  00000000  000e1bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002d38 	.word	0x20002d38
       4:	000016a9 	.word	0x000016a9
       8:	000016a5 	.word	0x000016a5
       c:	000016a5 	.word	0x000016a5
	...
      2c:	000016a5 	.word	0x000016a5
	...
      38:	000016a5 	.word	0x000016a5
      3c:	000016a5 	.word	0x000016a5
      40:	000016a5 	.word	0x000016a5
      44:	000016a5 	.word	0x000016a5
      48:	000016a5 	.word	0x000016a5
      4c:	000002d5 	.word	0x000002d5
      50:	000016a5 	.word	0x000016a5
      54:	000016a5 	.word	0x000016a5
      58:	000016a5 	.word	0x000016a5
      5c:	000016a5 	.word	0x000016a5
      60:	000016a5 	.word	0x000016a5
      64:	00000181 	.word	0x00000181
      68:	00000191 	.word	0x00000191
      6c:	000001a1 	.word	0x000001a1
      70:	000001b1 	.word	0x000001b1
      74:	000001c1 	.word	0x000001c1
      78:	000001d1 	.word	0x000001d1
      7c:	000016a5 	.word	0x000016a5
      80:	000016a5 	.word	0x000016a5
      84:	000016a5 	.word	0x000016a5
      88:	000016a5 	.word	0x000016a5
      8c:	000016a5 	.word	0x000016a5
      90:	000016a5 	.word	0x000016a5
	...
      9c:	000016a5 	.word	0x000016a5
      a0:	000016a5 	.word	0x000016a5
      a4:	00000000 	.word	0x00000000
      a8:	000016a5 	.word	0x000016a5
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	000025a8 	.word	0x000025a8

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	000025a8 	.word	0x000025a8
     108:	2000006c 	.word	0x2000006c
     10c:	000025a8 	.word	0x000025a8
     110:	00000000 	.word	0x00000000

00000114 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     114:	4770      	bx	lr
     116:	46c0      	nop			; (mov r8, r8)

00000118 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     11a:	4b0a      	ldr	r3, [pc, #40]	; (144 <_sercom_set_handler+0x2c>)
     11c:	781b      	ldrb	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d10c      	bne.n	13c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     122:	4f09      	ldr	r7, [pc, #36]	; (148 <_sercom_set_handler+0x30>)
     124:	4e09      	ldr	r6, [pc, #36]	; (14c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     126:	4d0a      	ldr	r5, [pc, #40]	; (150 <_sercom_set_handler+0x38>)
     128:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     12a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     12c:	195a      	adds	r2, r3, r5
     12e:	6014      	str	r4, [r2, #0]
     130:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     132:	2b18      	cmp	r3, #24
     134:	d1f9      	bne.n	12a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     136:	2201      	movs	r2, #1
     138:	4b02      	ldr	r3, [pc, #8]	; (144 <_sercom_set_handler+0x2c>)
     13a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     13c:	0080      	lsls	r0, r0, #2
     13e:	4b02      	ldr	r3, [pc, #8]	; (148 <_sercom_set_handler+0x30>)
     140:	50c1      	str	r1, [r0, r3]
}
     142:	bdf0      	pop	{r4, r5, r6, r7, pc}
     144:	20000084 	.word	0x20000084
     148:	20000088 	.word	0x20000088
     14c:	00000115 	.word	0x00000115
     150:	20000108 	.word	0x20000108

00000154 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     154:	b510      	push	{r4, lr}
     156:	b082      	sub	sp, #8
     158:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     15a:	4668      	mov	r0, sp
     15c:	4905      	ldr	r1, [pc, #20]	; (174 <_sercom_get_interrupt_vector+0x20>)
     15e:	2206      	movs	r2, #6
     160:	4b05      	ldr	r3, [pc, #20]	; (178 <_sercom_get_interrupt_vector+0x24>)
     162:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     164:	1c20      	adds	r0, r4, #0
     166:	4b05      	ldr	r3, [pc, #20]	; (17c <_sercom_get_interrupt_vector+0x28>)
     168:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     16a:	466b      	mov	r3, sp
     16c:	5618      	ldrsb	r0, [r3, r0]
}
     16e:	b002      	add	sp, #8
     170:	bd10      	pop	{r4, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	000024b8 	.word	0x000024b8
     178:	00001a89 	.word	0x00001a89
     17c:	000010cd 	.word	0x000010cd

00000180 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     180:	b508      	push	{r3, lr}
     182:	4b02      	ldr	r3, [pc, #8]	; (18c <SERCOM0_Handler+0xc>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2000      	movs	r0, #0
     188:	4798      	blx	r3
     18a:	bd08      	pop	{r3, pc}
     18c:	20000088 	.word	0x20000088

00000190 <SERCOM1_Handler>:
     190:	b508      	push	{r3, lr}
     192:	4b02      	ldr	r3, [pc, #8]	; (19c <SERCOM1_Handler+0xc>)
     194:	685b      	ldr	r3, [r3, #4]
     196:	2001      	movs	r0, #1
     198:	4798      	blx	r3
     19a:	bd08      	pop	{r3, pc}
     19c:	20000088 	.word	0x20000088

000001a0 <SERCOM2_Handler>:
     1a0:	b508      	push	{r3, lr}
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <SERCOM2_Handler+0xc>)
     1a4:	689b      	ldr	r3, [r3, #8]
     1a6:	2002      	movs	r0, #2
     1a8:	4798      	blx	r3
     1aa:	bd08      	pop	{r3, pc}
     1ac:	20000088 	.word	0x20000088

000001b0 <SERCOM3_Handler>:
     1b0:	b508      	push	{r3, lr}
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <SERCOM3_Handler+0xc>)
     1b4:	68db      	ldr	r3, [r3, #12]
     1b6:	2003      	movs	r0, #3
     1b8:	4798      	blx	r3
     1ba:	bd08      	pop	{r3, pc}
     1bc:	20000088 	.word	0x20000088

000001c0 <SERCOM4_Handler>:
     1c0:	b508      	push	{r3, lr}
     1c2:	4b02      	ldr	r3, [pc, #8]	; (1cc <SERCOM4_Handler+0xc>)
     1c4:	691b      	ldr	r3, [r3, #16]
     1c6:	2004      	movs	r0, #4
     1c8:	4798      	blx	r3
     1ca:	bd08      	pop	{r3, pc}
     1cc:	20000088 	.word	0x20000088

000001d0 <SERCOM5_Handler>:
     1d0:	b508      	push	{r3, lr}
     1d2:	4b02      	ldr	r3, [pc, #8]	; (1dc <SERCOM5_Handler+0xc>)
     1d4:	695b      	ldr	r3, [r3, #20]
     1d6:	2005      	movs	r0, #5
     1d8:	4798      	blx	r3
     1da:	bd08      	pop	{r3, pc}
     1dc:	20000088 	.word	0x20000088

000001e0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e2:	4647      	mov	r7, r8
     1e4:	b480      	push	{r7}
     1e6:	1c0c      	adds	r4, r1, #0
     1e8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     1ea:	2800      	cmp	r0, #0
     1ec:	d110      	bne.n	210 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
     1ee:	2a00      	cmp	r2, #0
     1f0:	dd0a      	ble.n	208 <_read+0x28>
     1f2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     1f4:	4e09      	ldr	r6, [pc, #36]	; (21c <_read+0x3c>)
     1f6:	4d0a      	ldr	r5, [pc, #40]	; (220 <_read+0x40>)
     1f8:	6830      	ldr	r0, [r6, #0]
     1fa:	1c21      	adds	r1, r4, #0
     1fc:	682b      	ldr	r3, [r5, #0]
     1fe:	4798      	blx	r3
		ptr++;
     200:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     202:	42bc      	cmp	r4, r7
     204:	d1f8      	bne.n	1f8 <_read+0x18>
     206:	e001      	b.n	20c <_read+0x2c>
     208:	2300      	movs	r3, #0
     20a:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     20c:	4640      	mov	r0, r8
     20e:	e001      	b.n	214 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     210:	2001      	movs	r0, #1
     212:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     214:	bc04      	pop	{r2}
     216:	4690      	mov	r8, r2
     218:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	20000128 	.word	0x20000128
     220:	20000120 	.word	0x20000120

00000224 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	4647      	mov	r7, r8
     228:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     22a:	3801      	subs	r0, #1
     22c:	2802      	cmp	r0, #2
     22e:	d815      	bhi.n	25c <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
     230:	2a00      	cmp	r2, #0
     232:	d010      	beq.n	256 <_write+0x32>
     234:	1c15      	adds	r5, r2, #0
     236:	1c0e      	adds	r6, r1, #0
     238:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     23a:	4b0c      	ldr	r3, [pc, #48]	; (26c <_write+0x48>)
     23c:	4698      	mov	r8, r3
     23e:	4f0c      	ldr	r7, [pc, #48]	; (270 <_write+0x4c>)
     240:	4643      	mov	r3, r8
     242:	6818      	ldr	r0, [r3, #0]
     244:	5d31      	ldrb	r1, [r6, r4]
     246:	683b      	ldr	r3, [r7, #0]
     248:	4798      	blx	r3
     24a:	2800      	cmp	r0, #0
     24c:	db09      	blt.n	262 <_write+0x3e>
			return -1;
		}
		++nChars;
     24e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     250:	42a5      	cmp	r5, r4
     252:	d1f5      	bne.n	240 <_write+0x1c>
     254:	e000      	b.n	258 <_write+0x34>
     256:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     258:	1c20      	adds	r0, r4, #0
     25a:	e004      	b.n	266 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     25c:	2001      	movs	r0, #1
     25e:	4240      	negs	r0, r0
     260:	e001      	b.n	266 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     262:	2001      	movs	r0, #1
     264:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     266:	bc04      	pop	{r2}
     268:	4690      	mov	r8, r2
     26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     26c:	20000128 	.word	0x20000128
     270:	20000124 	.word	0x20000124

00000274 <isrInternalClok>:
//struct rtc_module rtc_instance;
volatile uint16_t ledCount=0;
volatile uint16_t timeOut;
volatile bool stateLed;
void isrInternalClok(void){
		timeOut++;
     274:	4a13      	ldr	r2, [pc, #76]	; (2c4 <isrInternalClok+0x50>)
     276:	8813      	ldrh	r3, [r2, #0]
     278:	3301      	adds	r3, #1
     27a:	b29b      	uxth	r3, r3
     27c:	8013      	strh	r3, [r2, #0]
		if(ledCount>=500){
     27e:	4b12      	ldr	r3, [pc, #72]	; (2c8 <isrInternalClok+0x54>)
     280:	881b      	ldrh	r3, [r3, #0]
     282:	b29b      	uxth	r3, r3
     284:	22f4      	movs	r2, #244	; 0xf4
     286:	32ff      	adds	r2, #255	; 0xff
     288:	4293      	cmp	r3, r2
     28a:	d915      	bls.n	2b8 <isrInternalClok+0x44>
			port_pin_set_output_level(LED_0_PIN, stateLed);
     28c:	4b0f      	ldr	r3, [pc, #60]	; (2cc <isrInternalClok+0x58>)
     28e:	781b      	ldrb	r3, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     290:	2b00      	cmp	r3, #0
     292:	d004      	beq.n	29e <isrInternalClok+0x2a>
		port_base->OUTSET.reg = pin_mask;
     294:	2280      	movs	r2, #128	; 0x80
     296:	0312      	lsls	r2, r2, #12
     298:	4b0d      	ldr	r3, [pc, #52]	; (2d0 <isrInternalClok+0x5c>)
     29a:	619a      	str	r2, [r3, #24]
     29c:	e003      	b.n	2a6 <isrInternalClok+0x32>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     29e:	2280      	movs	r2, #128	; 0x80
     2a0:	0312      	lsls	r2, r2, #12
     2a2:	4b0b      	ldr	r3, [pc, #44]	; (2d0 <isrInternalClok+0x5c>)
     2a4:	615a      	str	r2, [r3, #20]
			stateLed=!stateLed;
     2a6:	4a09      	ldr	r2, [pc, #36]	; (2cc <isrInternalClok+0x58>)
     2a8:	7811      	ldrb	r1, [r2, #0]
     2aa:	2301      	movs	r3, #1
     2ac:	404b      	eors	r3, r1
     2ae:	7013      	strb	r3, [r2, #0]
			ledCount=0;
     2b0:	2200      	movs	r2, #0
     2b2:	4b05      	ldr	r3, [pc, #20]	; (2c8 <isrInternalClok+0x54>)
     2b4:	801a      	strh	r2, [r3, #0]
     2b6:	e004      	b.n	2c2 <isrInternalClok+0x4e>
		}
		else{
			ledCount++;
     2b8:	4a03      	ldr	r2, [pc, #12]	; (2c8 <isrInternalClok+0x54>)
     2ba:	8813      	ldrh	r3, [r2, #0]
     2bc:	3301      	adds	r3, #1
     2be:	b29b      	uxth	r3, r3
     2c0:	8013      	strh	r3, [r2, #0]
		}
}
     2c2:	4770      	bx	lr
     2c4:	2000012c 	.word	0x2000012c
     2c8:	200000a0 	.word	0x200000a0
     2cc:	2000012e 	.word	0x2000012e
     2d0:	41004400 	.word	0x41004400

000002d4 <RTC_Handler>:
void RTC_Handler( void ){
     2d4:	b508      	push	{r3, lr}
	//pc.printf("ISR");
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
     2d6:	4b06      	ldr	r3, [pc, #24]	; (2f0 <RTC_Handler+0x1c>)
     2d8:	7a19      	ldrb	r1, [r3, #8]
     2da:	2201      	movs	r2, #1
     2dc:	430a      	orrs	r2, r1
     2de:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
     2e0:	7a1a      	ldrb	r2, [r3, #8]
     2e2:	2180      	movs	r1, #128	; 0x80
     2e4:	4249      	negs	r1, r1
     2e6:	430a      	orrs	r2, r1
     2e8:	721a      	strb	r2, [r3, #8]
	
	isrInternalClok();
     2ea:	4b02      	ldr	r3, [pc, #8]	; (2f4 <RTC_Handler+0x20>)
     2ec:	4798      	blx	r3
}
     2ee:	bd08      	pop	{r3, pc}
     2f0:	40001400 	.word	0x40001400
     2f4:	00000275 	.word	0x00000275

000002f8 <configureInternalClock>:

void configureInternalClock(void){
	GCLK->GENCTRL.reg=0b00000000000000010000010000000010;
     2f8:	4b1e      	ldr	r3, [pc, #120]	; (374 <configureInternalClock+0x7c>)
     2fa:	4a1f      	ldr	r2, [pc, #124]	; (378 <configureInternalClock+0x80>)
     2fc:	605a      	str	r2, [r3, #4]
	//Generic Clock Generator Division
	GCLK->GENDIV.reg= 0b00000000000000000000000100000010;
     2fe:	2281      	movs	r2, #129	; 0x81
     300:	0052      	lsls	r2, r2, #1
     302:	609a      	str	r2, [r3, #8]
	GCLK->CLKCTRL.reg=0x4204;
     304:	4a1d      	ldr	r2, [pc, #116]	; (37c <configureInternalClock+0x84>)
     306:	805a      	strh	r2, [r3, #2]
	//peripheral configuration
	
	RTC->MODE0.CTRL.bit.PRESCALER=0x0;	//prescaller at 0
     308:	4b1d      	ldr	r3, [pc, #116]	; (380 <configureInternalClock+0x88>)
     30a:	8819      	ldrh	r1, [r3, #0]
     30c:	4a1d      	ldr	r2, [pc, #116]	; (384 <configureInternalClock+0x8c>)
     30e:	400a      	ands	r2, r1
     310:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MODE=0x0;			//mode 0 : 32 bit counter
     312:	881a      	ldrh	r2, [r3, #0]
     314:	210c      	movs	r1, #12
     316:	438a      	bics	r2, r1
     318:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.SWRST=0;			//no software reset
     31a:	881a      	ldrh	r2, [r3, #0]
     31c:	390b      	subs	r1, #11
     31e:	438a      	bics	r2, r1
     320:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MATCHCLR=1;			//automatic reset counter
     322:	8819      	ldrh	r1, [r3, #0]
     324:	2280      	movs	r2, #128	; 0x80
     326:	430a      	orrs	r2, r1
     328:	801a      	strh	r2, [r3, #0]
	
	//event configuration
	RTC->MODE0.INTENSET.bit.OVF=1;		//enable the event overflow
     32a:	79d9      	ldrb	r1, [r3, #7]
     32c:	2080      	movs	r0, #128	; 0x80
     32e:	4240      	negs	r0, r0
     330:	4301      	orrs	r1, r0
     332:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTENSET.bit.CMP0=1;		//enable the event compare
     334:	79d9      	ldrb	r1, [r3, #7]
     336:	2201      	movs	r2, #1
     338:	4311      	orrs	r1, r2
     33a:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
     33c:	7a19      	ldrb	r1, [r3, #8]
     33e:	430a      	orrs	r2, r1
     340:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
     342:	7a1a      	ldrb	r2, [r3, #8]
     344:	4302      	orrs	r2, r0
     346:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.COUNT.bit.COUNT=0;			//set the RTC value
     348:	2200      	movs	r2, #0
     34a:	611a      	str	r2, [r3, #16]
	RTC->MODE0.COMP[0].reg =32;
     34c:	3220      	adds	r2, #32
     34e:	619a      	str	r2, [r3, #24]

	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     350:	8819      	ldrh	r1, [r3, #0]
     352:	3a1e      	subs	r2, #30
     354:	430a      	orrs	r2, r1
     356:	801a      	strh	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     358:	4a0b      	ldr	r2, [pc, #44]	; (388 <configureInternalClock+0x90>)
     35a:	21c0      	movs	r1, #192	; 0xc0
     35c:	0089      	lsls	r1, r1, #2
     35e:	5853      	ldr	r3, [r2, r1]
     360:	021b      	lsls	r3, r3, #8
     362:	0a1b      	lsrs	r3, r3, #8
     364:	20c0      	movs	r0, #192	; 0xc0
     366:	0600      	lsls	r0, r0, #24
     368:	4303      	orrs	r3, r0
     36a:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     36c:	2308      	movs	r3, #8
     36e:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority (RTC_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
	NVIC_EnableIRQ(RTC_IRQn);
	
     370:	4770      	bx	lr
     372:	46c0      	nop			; (mov r8, r8)
     374:	40000c00 	.word	0x40000c00
     378:	00010402 	.word	0x00010402
     37c:	00004204 	.word	0x00004204
     380:	40001400 	.word	0x40001400
     384:	fffff0ff 	.word	0xfffff0ff
     388:	e000e100 	.word	0xe000e100

0000038c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     38c:	b5f0      	push	{r4, r5, r6, r7, lr}
     38e:	465f      	mov	r7, fp
     390:	4656      	mov	r6, sl
     392:	464d      	mov	r5, r9
     394:	4644      	mov	r4, r8
     396:	b4f0      	push	{r4, r5, r6, r7}
     398:	b091      	sub	sp, #68	; 0x44
     39a:	1c05      	adds	r5, r0, #0
     39c:	1c0c      	adds	r4, r1, #0
     39e:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     3a0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     3a2:	1c08      	adds	r0, r1, #0
     3a4:	4bb9      	ldr	r3, [pc, #740]	; (68c <usart_init+0x300>)
     3a6:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     3a8:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     3aa:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     3ac:	07d2      	lsls	r2, r2, #31
     3ae:	d500      	bpl.n	3b2 <usart_init+0x26>
     3b0:	e163      	b.n	67a <usart_init+0x2ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     3b2:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     3b4:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     3b6:	0792      	lsls	r2, r2, #30
     3b8:	d500      	bpl.n	3bc <usart_init+0x30>
     3ba:	e15e      	b.n	67a <usart_init+0x2ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3bc:	49b4      	ldr	r1, [pc, #720]	; (690 <usart_init+0x304>)
     3be:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     3c0:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     3c2:	3b1b      	subs	r3, #27
     3c4:	40bb      	lsls	r3, r7
     3c6:	4313      	orrs	r3, r2
     3c8:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     3ca:	a90f      	add	r1, sp, #60	; 0x3c
     3cc:	272d      	movs	r7, #45	; 0x2d
     3ce:	5df3      	ldrb	r3, [r6, r7]
     3d0:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     3d2:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3d4:	b2c3      	uxtb	r3, r0
     3d6:	9302      	str	r3, [sp, #8]
     3d8:	1c18      	adds	r0, r3, #0
     3da:	4bae      	ldr	r3, [pc, #696]	; (694 <usart_init+0x308>)
     3dc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     3de:	9802      	ldr	r0, [sp, #8]
     3e0:	4bad      	ldr	r3, [pc, #692]	; (698 <usart_init+0x30c>)
     3e2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     3e4:	5df0      	ldrb	r0, [r6, r7]
     3e6:	2100      	movs	r1, #0
     3e8:	4bac      	ldr	r3, [pc, #688]	; (69c <usart_init+0x310>)
     3ea:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     3ec:	7af3      	ldrb	r3, [r6, #11]
     3ee:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     3f0:	2324      	movs	r3, #36	; 0x24
     3f2:	5cf3      	ldrb	r3, [r6, r3]
     3f4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     3f6:	2325      	movs	r3, #37	; 0x25
     3f8:	5cf3      	ldrb	r3, [r6, r3]
     3fa:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     3fc:	7ef3      	ldrb	r3, [r6, #27]
     3fe:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     400:	7f33      	ldrb	r3, [r6, #28]
     402:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     404:	682b      	ldr	r3, [r5, #0]
     406:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     408:	1c18      	adds	r0, r3, #0
     40a:	4ba0      	ldr	r3, [pc, #640]	; (68c <usart_init+0x300>)
     40c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     40e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     410:	2200      	movs	r2, #0
     412:	230e      	movs	r3, #14
     414:	a906      	add	r1, sp, #24
     416:	468c      	mov	ip, r1
     418:	4463      	add	r3, ip
     41a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     41c:	8a33      	ldrh	r3, [r6, #16]
     41e:	4699      	mov	r9, r3
     420:	2380      	movs	r3, #128	; 0x80
     422:	01db      	lsls	r3, r3, #7
     424:	4599      	cmp	r9, r3
     426:	d019      	beq.n	45c <usart_init+0xd0>
     428:	d804      	bhi.n	434 <usart_init+0xa8>
     42a:	2380      	movs	r3, #128	; 0x80
     42c:	019b      	lsls	r3, r3, #6
     42e:	4599      	cmp	r9, r3
     430:	d00a      	beq.n	448 <usart_init+0xbc>
     432:	e103      	b.n	63c <usart_init+0x2b0>
     434:	23c0      	movs	r3, #192	; 0xc0
     436:	01db      	lsls	r3, r3, #7
     438:	4599      	cmp	r9, r3
     43a:	d00a      	beq.n	452 <usart_init+0xc6>
     43c:	2380      	movs	r3, #128	; 0x80
     43e:	021b      	lsls	r3, r3, #8
     440:	4599      	cmp	r9, r3
     442:	d100      	bne.n	446 <usart_init+0xba>
     444:	e0ff      	b.n	646 <usart_init+0x2ba>
     446:	e0f9      	b.n	63c <usart_init+0x2b0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     448:	2310      	movs	r3, #16
     44a:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     44c:	3b0f      	subs	r3, #15
     44e:	9307      	str	r3, [sp, #28]
     450:	e0fd      	b.n	64e <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     452:	2308      	movs	r3, #8
     454:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     456:	3b07      	subs	r3, #7
     458:	9307      	str	r3, [sp, #28]
     45a:	e0f8      	b.n	64e <usart_init+0x2c2>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     45c:	6833      	ldr	r3, [r6, #0]
     45e:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     460:	68f3      	ldr	r3, [r6, #12]
     462:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     464:	6973      	ldr	r3, [r6, #20]
     466:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     468:	7e33      	ldrb	r3, [r6, #24]
     46a:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     46c:	2326      	movs	r3, #38	; 0x26
     46e:	5cf3      	ldrb	r3, [r6, r3]
     470:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     472:	6872      	ldr	r2, [r6, #4]
     474:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     476:	2a00      	cmp	r2, #0
     478:	d015      	beq.n	4a6 <usart_init+0x11a>
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	055b      	lsls	r3, r3, #21
     47e:	429a      	cmp	r2, r3
     480:	d136      	bne.n	4f0 <usart_init+0x164>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     482:	2327      	movs	r3, #39	; 0x27
     484:	5cf3      	ldrb	r3, [r6, r3]
     486:	2b00      	cmp	r3, #0
     488:	d136      	bne.n	4f8 <usart_init+0x16c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     48a:	6a33      	ldr	r3, [r6, #32]
     48c:	4698      	mov	r8, r3
     48e:	b2c0      	uxtb	r0, r0
     490:	4b83      	ldr	r3, [pc, #524]	; (6a0 <usart_init+0x314>)
     492:	4798      	blx	r3
     494:	1c01      	adds	r1, r0, #0
     496:	4640      	mov	r0, r8
     498:	220e      	movs	r2, #14
     49a:	ab06      	add	r3, sp, #24
     49c:	469c      	mov	ip, r3
     49e:	4462      	add	r2, ip
     4a0:	4b80      	ldr	r3, [pc, #512]	; (6a4 <usart_init+0x318>)
     4a2:	4798      	blx	r3
     4a4:	e025      	b.n	4f2 <usart_init+0x166>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     4a6:	2308      	movs	r3, #8
     4a8:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     4aa:	2300      	movs	r3, #0
     4ac:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     4ae:	2327      	movs	r3, #39	; 0x27
     4b0:	5cf3      	ldrb	r3, [r6, r3]
     4b2:	2b00      	cmp	r3, #0
     4b4:	d00b      	beq.n	4ce <usart_init+0x142>
				status_code =
     4b6:	4643      	mov	r3, r8
     4b8:	9300      	str	r3, [sp, #0]
     4ba:	6a30      	ldr	r0, [r6, #32]
     4bc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     4be:	220e      	movs	r2, #14
     4c0:	ab06      	add	r3, sp, #24
     4c2:	469c      	mov	ip, r3
     4c4:	4462      	add	r2, ip
     4c6:	9b07      	ldr	r3, [sp, #28]
     4c8:	4f77      	ldr	r7, [pc, #476]	; (6a8 <usart_init+0x31c>)
     4ca:	47b8      	blx	r7
     4cc:	e011      	b.n	4f2 <usart_init+0x166>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     4ce:	6a33      	ldr	r3, [r6, #32]
     4d0:	1c1f      	adds	r7, r3, #0
     4d2:	b2c0      	uxtb	r0, r0
     4d4:	4b72      	ldr	r3, [pc, #456]	; (6a0 <usart_init+0x314>)
     4d6:	4798      	blx	r3
     4d8:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     4da:	4643      	mov	r3, r8
     4dc:	9300      	str	r3, [sp, #0]
     4de:	1c38      	adds	r0, r7, #0
     4e0:	220e      	movs	r2, #14
     4e2:	ab06      	add	r3, sp, #24
     4e4:	469c      	mov	ip, r3
     4e6:	4462      	add	r2, ip
     4e8:	9b07      	ldr	r3, [sp, #28]
     4ea:	4f6f      	ldr	r7, [pc, #444]	; (6a8 <usart_init+0x31c>)
     4ec:	47b8      	blx	r7
     4ee:	e000      	b.n	4f2 <usart_init+0x166>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     4f0:	2000      	movs	r0, #0
     4f2:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     4f4:	d000      	beq.n	4f8 <usart_init+0x16c>
     4f6:	e0c0      	b.n	67a <usart_init+0x2ee>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     4f8:	7e73      	ldrb	r3, [r6, #25]
     4fa:	2b00      	cmp	r3, #0
     4fc:	d002      	beq.n	504 <usart_init+0x178>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     4fe:	7eb3      	ldrb	r3, [r6, #26]
     500:	4652      	mov	r2, sl
     502:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     504:	682a      	ldr	r2, [r5, #0]
     506:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     508:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     50a:	2b00      	cmp	r3, #0
     50c:	d1fc      	bne.n	508 <usart_init+0x17c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     50e:	330e      	adds	r3, #14
     510:	aa06      	add	r2, sp, #24
     512:	4694      	mov	ip, r2
     514:	4463      	add	r3, ip
     516:	881b      	ldrh	r3, [r3, #0]
     518:	4652      	mov	r2, sl
     51a:	8193      	strh	r3, [r2, #12]
     51c:	9b02      	ldr	r3, [sp, #8]
     51e:	465a      	mov	r2, fp
     520:	4313      	orrs	r3, r2
     522:	9a03      	ldr	r2, [sp, #12]
     524:	4313      	orrs	r3, r2
     526:	433b      	orrs	r3, r7
     528:	464a      	mov	r2, r9
     52a:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     52c:	9a04      	ldr	r2, [sp, #16]
     52e:	0212      	lsls	r2, r2, #8
     530:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     532:	9a05      	ldr	r2, [sp, #20]
     534:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     536:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     538:	2327      	movs	r3, #39	; 0x27
     53a:	5cf3      	ldrb	r3, [r6, r3]
     53c:	2b00      	cmp	r3, #0
     53e:	d101      	bne.n	544 <usart_init+0x1b8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     540:	3304      	adds	r3, #4
     542:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     544:	7f33      	ldrb	r3, [r6, #28]
     546:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     548:	7e72      	ldrb	r2, [r6, #25]
     54a:	0293      	lsls	r3, r2, #10
     54c:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     54e:	7f72      	ldrb	r2, [r6, #29]
     550:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     552:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     554:	2224      	movs	r2, #36	; 0x24
     556:	5cb2      	ldrb	r2, [r6, r2]
     558:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     55a:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     55c:	2225      	movs	r2, #37	; 0x25
     55e:	5cb2      	ldrb	r2, [r6, r2]
     560:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     562:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     564:	7af1      	ldrb	r1, [r6, #11]
     566:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     568:	8933      	ldrh	r3, [r6, #8]
     56a:	2bff      	cmp	r3, #255	; 0xff
     56c:	d004      	beq.n	578 <usart_init+0x1ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     56e:	2280      	movs	r2, #128	; 0x80
     570:	0452      	lsls	r2, r2, #17
     572:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     574:	4319      	orrs	r1, r3
     576:	e005      	b.n	584 <usart_init+0x1f8>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     578:	7ef3      	ldrb	r3, [r6, #27]
     57a:	2b00      	cmp	r3, #0
     57c:	d002      	beq.n	584 <usart_init+0x1f8>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     57e:	2380      	movs	r3, #128	; 0x80
     580:	04db      	lsls	r3, r3, #19
     582:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     584:	232c      	movs	r3, #44	; 0x2c
     586:	5cf3      	ldrb	r3, [r6, r3]
     588:	2b00      	cmp	r3, #0
     58a:	d103      	bne.n	594 <usart_init+0x208>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     58c:	4b47      	ldr	r3, [pc, #284]	; (6ac <usart_init+0x320>)
     58e:	789b      	ldrb	r3, [r3, #2]
     590:	079b      	lsls	r3, r3, #30
     592:	d501      	bpl.n	598 <usart_init+0x20c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     594:	2380      	movs	r3, #128	; 0x80
     596:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     598:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     59a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     59c:	2b00      	cmp	r3, #0
     59e:	d1fc      	bne.n	59a <usart_init+0x20e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     5a0:	4653      	mov	r3, sl
     5a2:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     5a4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     5a6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     5a8:	2b00      	cmp	r3, #0
     5aa:	d1fc      	bne.n	5a6 <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     5ac:	4653      	mov	r3, sl
     5ae:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     5b0:	ab0e      	add	r3, sp, #56	; 0x38
     5b2:	2280      	movs	r2, #128	; 0x80
     5b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5b6:	2200      	movs	r2, #0
     5b8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     5ba:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     5bc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     5be:	6b33      	ldr	r3, [r6, #48]	; 0x30
     5c0:	930a      	str	r3, [sp, #40]	; 0x28
     5c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
     5c4:	930b      	str	r3, [sp, #44]	; 0x2c
     5c6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     5c8:	930c      	str	r3, [sp, #48]	; 0x30
     5ca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     5cc:	9302      	str	r3, [sp, #8]
     5ce:	930d      	str	r3, [sp, #52]	; 0x34
     5d0:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     5d2:	ae0e      	add	r6, sp, #56	; 0x38
     5d4:	b2f9      	uxtb	r1, r7
     5d6:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     5d8:	aa0a      	add	r2, sp, #40	; 0x28
     5da:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     5dc:	2800      	cmp	r0, #0
     5de:	d102      	bne.n	5e6 <usart_init+0x25a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     5e0:	1c20      	adds	r0, r4, #0
     5e2:	4b33      	ldr	r3, [pc, #204]	; (6b0 <usart_init+0x324>)
     5e4:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     5e6:	1c43      	adds	r3, r0, #1
     5e8:	d005      	beq.n	5f6 <usart_init+0x26a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     5ea:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     5ec:	0c00      	lsrs	r0, r0, #16
     5ee:	b2c0      	uxtb	r0, r0
     5f0:	1c31      	adds	r1, r6, #0
     5f2:	4b30      	ldr	r3, [pc, #192]	; (6b4 <usart_init+0x328>)
     5f4:	4798      	blx	r3
     5f6:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     5f8:	2f04      	cmp	r7, #4
     5fa:	d1eb      	bne.n	5d4 <usart_init+0x248>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     5fc:	2300      	movs	r3, #0
     5fe:	60eb      	str	r3, [r5, #12]
     600:	612b      	str	r3, [r5, #16]
     602:	616b      	str	r3, [r5, #20]
     604:	61ab      	str	r3, [r5, #24]
     606:	61eb      	str	r3, [r5, #28]
     608:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     60a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     60c:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     60e:	2200      	movs	r2, #0
     610:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     612:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     614:	3330      	adds	r3, #48	; 0x30
     616:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     618:	3301      	adds	r3, #1
     61a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     61c:	3301      	adds	r3, #1
     61e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     620:	3301      	adds	r3, #1
     622:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     624:	6828      	ldr	r0, [r5, #0]
     626:	4b19      	ldr	r3, [pc, #100]	; (68c <usart_init+0x300>)
     628:	4798      	blx	r3
     62a:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     62c:	4922      	ldr	r1, [pc, #136]	; (6b8 <usart_init+0x32c>)
     62e:	4b23      	ldr	r3, [pc, #140]	; (6bc <usart_init+0x330>)
     630:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     632:	00a4      	lsls	r4, r4, #2
     634:	4b22      	ldr	r3, [pc, #136]	; (6c0 <usart_init+0x334>)
     636:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     638:	2300      	movs	r3, #0
     63a:	e01e      	b.n	67a <usart_init+0x2ee>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     63c:	2310      	movs	r3, #16
     63e:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     640:	2300      	movs	r3, #0
     642:	9307      	str	r3, [sp, #28]
     644:	e003      	b.n	64e <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     646:	2303      	movs	r3, #3
     648:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     64a:	2300      	movs	r3, #0
     64c:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     64e:	6833      	ldr	r3, [r6, #0]
     650:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     652:	68f3      	ldr	r3, [r6, #12]
     654:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     656:	6973      	ldr	r3, [r6, #20]
     658:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     65a:	7e33      	ldrb	r3, [r6, #24]
     65c:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     65e:	2326      	movs	r3, #38	; 0x26
     660:	5cf3      	ldrb	r3, [r6, r3]
     662:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     664:	6872      	ldr	r2, [r6, #4]
     666:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     668:	2a00      	cmp	r2, #0
     66a:	d100      	bne.n	66e <usart_init+0x2e2>
     66c:	e71f      	b.n	4ae <usart_init+0x122>
     66e:	2380      	movs	r3, #128	; 0x80
     670:	055b      	lsls	r3, r3, #21
     672:	429a      	cmp	r2, r3
     674:	d100      	bne.n	678 <usart_init+0x2ec>
     676:	e704      	b.n	482 <usart_init+0xf6>
     678:	e73e      	b.n	4f8 <usart_init+0x16c>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     67a:	1c18      	adds	r0, r3, #0
     67c:	b011      	add	sp, #68	; 0x44
     67e:	bc3c      	pop	{r2, r3, r4, r5}
     680:	4690      	mov	r8, r2
     682:	4699      	mov	r9, r3
     684:	46a2      	mov	sl, r4
     686:	46ab      	mov	fp, r5
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	000010cd 	.word	0x000010cd
     690:	40000400 	.word	0x40000400
     694:	0000154d 	.word	0x0000154d
     698:	000014c1 	.word	0x000014c1
     69c:	00000ef9 	.word	0x00000ef9
     6a0:	00001569 	.word	0x00001569
     6a4:	00000d09 	.word	0x00000d09
     6a8:	00000d31 	.word	0x00000d31
     6ac:	41002000 	.word	0x41002000
     6b0:	00000f45 	.word	0x00000f45
     6b4:	00001645 	.word	0x00001645
     6b8:	000007d9 	.word	0x000007d9
     6bc:	00000119 	.word	0x00000119
     6c0:	20000108 	.word	0x20000108

000006c4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     6c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6c6:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     6c8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     6ca:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     6cc:	2c00      	cmp	r4, #0
     6ce:	d00d      	beq.n	6ec <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     6d0:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     6d2:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     6d4:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     6d6:	2800      	cmp	r0, #0
     6d8:	d108      	bne.n	6ec <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6da:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6dc:	2a00      	cmp	r2, #0
     6de:	d1fc      	bne.n	6da <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     6e0:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     6e2:	2102      	movs	r1, #2
     6e4:	7e1a      	ldrb	r2, [r3, #24]
     6e6:	420a      	tst	r2, r1
     6e8:	d0fc      	beq.n	6e4 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     6ea:	2200      	movs	r2, #0
}
     6ec:	1c10      	adds	r0, r2, #0
     6ee:	bd10      	pop	{r4, pc}

000006f0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     6f0:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6f2:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     6f4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     6f6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     6f8:	2a00      	cmp	r2, #0
     6fa:	d02f      	beq.n	75c <usart_read_wait+0x6c>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     6fc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     6fe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     700:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     702:	2a00      	cmp	r2, #0
     704:	d12a      	bne.n	75c <usart_read_wait+0x6c>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     706:	7e22      	ldrb	r2, [r4, #24]
     708:	0752      	lsls	r2, r2, #29
     70a:	d527      	bpl.n	75c <usart_read_wait+0x6c>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     70c:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     70e:	2b00      	cmp	r3, #0
     710:	d1fc      	bne.n	70c <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     712:	8b63      	ldrh	r3, [r4, #26]
     714:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     716:	069a      	lsls	r2, r3, #26
     718:	d01d      	beq.n	756 <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     71a:	079a      	lsls	r2, r3, #30
     71c:	d503      	bpl.n	726 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     71e:	2302      	movs	r3, #2
     720:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     722:	3318      	adds	r3, #24
     724:	e01a      	b.n	75c <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     726:	075a      	lsls	r2, r3, #29
     728:	d503      	bpl.n	732 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     72a:	2304      	movs	r3, #4
     72c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     72e:	331a      	adds	r3, #26
     730:	e014      	b.n	75c <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     732:	07da      	lsls	r2, r3, #31
     734:	d503      	bpl.n	73e <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     736:	2301      	movs	r3, #1
     738:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     73a:	3312      	adds	r3, #18
     73c:	e00e      	b.n	75c <usart_read_wait+0x6c>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     73e:	06da      	lsls	r2, r3, #27
     740:	d503      	bpl.n	74a <usart_read_wait+0x5a>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     742:	2310      	movs	r3, #16
     744:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     746:	3332      	adds	r3, #50	; 0x32
     748:	e008      	b.n	75c <usart_read_wait+0x6c>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     74a:	069b      	lsls	r3, r3, #26
     74c:	d503      	bpl.n	756 <usart_read_wait+0x66>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     74e:	2320      	movs	r3, #32
     750:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     752:	3321      	adds	r3, #33	; 0x21
     754:	e002      	b.n	75c <usart_read_wait+0x6c>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     756:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     758:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     75a:	2300      	movs	r3, #0
}
     75c:	1c18      	adds	r0, r3, #0
     75e:	bd10      	pop	{r4, pc}

00000760 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     762:	1c04      	adds	r4, r0, #0
     764:	1c0d      	adds	r5, r1, #0
     766:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     768:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     76a:	4b0f      	ldr	r3, [pc, #60]	; (7a8 <_usart_read_buffer+0x48>)
     76c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     76e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     770:	b29b      	uxth	r3, r3
     772:	2b00      	cmp	r3, #0
     774:	d003      	beq.n	77e <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     776:	4b0d      	ldr	r3, [pc, #52]	; (7ac <_usart_read_buffer+0x4c>)
     778:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     77a:	2005      	movs	r0, #5
     77c:	e013      	b.n	7a6 <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     77e:	85a6      	strh	r6, [r4, #44]	; 0x2c
     780:	4b0a      	ldr	r3, [pc, #40]	; (7ac <_usart_read_buffer+0x4c>)
     782:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
     784:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     786:	2205      	movs	r2, #5
     788:	2332      	movs	r3, #50	; 0x32
     78a:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     78c:	3b2e      	subs	r3, #46	; 0x2e
     78e:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
     790:	7a23      	ldrb	r3, [r4, #8]
     792:	2b00      	cmp	r3, #0
     794:	d001      	beq.n	79a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     796:	2320      	movs	r3, #32
     798:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     79a:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
     79c:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
     79e:	2b00      	cmp	r3, #0
     7a0:	d001      	beq.n	7a6 <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     7a2:	2308      	movs	r3, #8
     7a4:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
     7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7a8:	00000c3d 	.word	0x00000c3d
     7ac:	00000c7d 	.word	0x00000c7d

000007b0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     7b0:	1c93      	adds	r3, r2, #2
     7b2:	009b      	lsls	r3, r3, #2
     7b4:	18c3      	adds	r3, r0, r3
     7b6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     7b8:	2301      	movs	r3, #1
     7ba:	4093      	lsls	r3, r2
     7bc:	1c1a      	adds	r2, r3, #0
     7be:	2130      	movs	r1, #48	; 0x30
     7c0:	5c43      	ldrb	r3, [r0, r1]
     7c2:	431a      	orrs	r2, r3
     7c4:	5442      	strb	r2, [r0, r1]
}
     7c6:	4770      	bx	lr

000007c8 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     7c8:	b508      	push	{r3, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
     7ca:	2201      	movs	r2, #1
     7cc:	4b01      	ldr	r3, [pc, #4]	; (7d4 <usart_read_job+0xc>)
     7ce:	4798      	blx	r3
}
     7d0:	bd08      	pop	{r3, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00000761 	.word	0x00000761

000007d8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     7da:	0080      	lsls	r0, r0, #2
     7dc:	4b60      	ldr	r3, [pc, #384]	; (960 <_usart_interrupt_handler+0x188>)
     7de:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     7e0:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7e2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7e4:	2b00      	cmp	r3, #0
     7e6:	d1fc      	bne.n	7e2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     7e8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     7ea:	7da6      	ldrb	r6, [r4, #22]
     7ec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     7ee:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     7f0:	5ceb      	ldrb	r3, [r5, r3]
     7f2:	2230      	movs	r2, #48	; 0x30
     7f4:	5caf      	ldrb	r7, [r5, r2]
     7f6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     7f8:	07f3      	lsls	r3, r6, #31
     7fa:	d522      	bpl.n	842 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     7fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     7fe:	b29b      	uxth	r3, r3
     800:	2b00      	cmp	r3, #0
     802:	d01c      	beq.n	83e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     804:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     806:	7813      	ldrb	r3, [r2, #0]
     808:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     80a:	1c51      	adds	r1, r2, #1
     80c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     80e:	7969      	ldrb	r1, [r5, #5]
     810:	2901      	cmp	r1, #1
     812:	d001      	beq.n	818 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     814:	b29b      	uxth	r3, r3
     816:	e004      	b.n	822 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     818:	7851      	ldrb	r1, [r2, #1]
     81a:	0209      	lsls	r1, r1, #8
     81c:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     81e:	3202      	adds	r2, #2
     820:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     822:	05db      	lsls	r3, r3, #23
     824:	0ddb      	lsrs	r3, r3, #23
     826:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     828:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     82a:	3b01      	subs	r3, #1
     82c:	b29b      	uxth	r3, r3
     82e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     830:	2b00      	cmp	r3, #0
     832:	d106      	bne.n	842 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     834:	3301      	adds	r3, #1
     836:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     838:	3301      	adds	r3, #1
     83a:	75a3      	strb	r3, [r4, #22]
     83c:	e001      	b.n	842 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     83e:	2301      	movs	r3, #1
     840:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     842:	07b3      	lsls	r3, r6, #30
     844:	d509      	bpl.n	85a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     846:	2302      	movs	r3, #2
     848:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     84a:	2200      	movs	r2, #0
     84c:	3331      	adds	r3, #49	; 0x31
     84e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     850:	07fb      	lsls	r3, r7, #31
     852:	d502      	bpl.n	85a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     854:	1c28      	adds	r0, r5, #0
     856:	68eb      	ldr	r3, [r5, #12]
     858:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     85a:	0773      	lsls	r3, r6, #29
     85c:	d560      	bpl.n	920 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     85e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     860:	b29b      	uxth	r3, r3
     862:	2b00      	cmp	r3, #0
     864:	d05a      	beq.n	91c <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     866:	8b63      	ldrh	r3, [r4, #26]
     868:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     86a:	071a      	lsls	r2, r3, #28
     86c:	d402      	bmi.n	874 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     86e:	223f      	movs	r2, #63	; 0x3f
     870:	4013      	ands	r3, r2
     872:	e001      	b.n	878 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     874:	2237      	movs	r2, #55	; 0x37
     876:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     878:	2b00      	cmp	r3, #0
     87a:	d02d      	beq.n	8d8 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     87c:	079a      	lsls	r2, r3, #30
     87e:	d505      	bpl.n	88c <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     880:	221a      	movs	r2, #26
     882:	2332      	movs	r3, #50	; 0x32
     884:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     886:	3b30      	subs	r3, #48	; 0x30
     888:	8363      	strh	r3, [r4, #26]
     88a:	e01f      	b.n	8cc <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     88c:	075a      	lsls	r2, r3, #29
     88e:	d505      	bpl.n	89c <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     890:	221e      	movs	r2, #30
     892:	2332      	movs	r3, #50	; 0x32
     894:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     896:	3b2e      	subs	r3, #46	; 0x2e
     898:	8363      	strh	r3, [r4, #26]
     89a:	e017      	b.n	8cc <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     89c:	07da      	lsls	r2, r3, #31
     89e:	d505      	bpl.n	8ac <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     8a0:	2213      	movs	r2, #19
     8a2:	2332      	movs	r3, #50	; 0x32
     8a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     8a6:	3b31      	subs	r3, #49	; 0x31
     8a8:	8363      	strh	r3, [r4, #26]
     8aa:	e00f      	b.n	8cc <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     8ac:	06da      	lsls	r2, r3, #27
     8ae:	d505      	bpl.n	8bc <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     8b0:	2242      	movs	r2, #66	; 0x42
     8b2:	2332      	movs	r3, #50	; 0x32
     8b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     8b6:	3b22      	subs	r3, #34	; 0x22
     8b8:	8363      	strh	r3, [r4, #26]
     8ba:	e007      	b.n	8cc <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     8bc:	2220      	movs	r2, #32
     8be:	421a      	tst	r2, r3
     8c0:	d004      	beq.n	8cc <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     8c2:	3221      	adds	r2, #33	; 0x21
     8c4:	2332      	movs	r3, #50	; 0x32
     8c6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     8c8:	3b12      	subs	r3, #18
     8ca:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     8cc:	077b      	lsls	r3, r7, #29
     8ce:	d527      	bpl.n	920 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     8d0:	1c28      	adds	r0, r5, #0
     8d2:	696b      	ldr	r3, [r5, #20]
     8d4:	4798      	blx	r3
     8d6:	e023      	b.n	920 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     8d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     8da:	05db      	lsls	r3, r3, #23
     8dc:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     8de:	b2da      	uxtb	r2, r3
     8e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
     8e2:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     8e4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     8e6:	1c51      	adds	r1, r2, #1
     8e8:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     8ea:	7969      	ldrb	r1, [r5, #5]
     8ec:	2901      	cmp	r1, #1
     8ee:	d104      	bne.n	8fa <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     8f0:	0a1b      	lsrs	r3, r3, #8
     8f2:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     8f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     8f6:	3301      	adds	r3, #1
     8f8:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     8fa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     8fc:	3b01      	subs	r3, #1
     8fe:	b29b      	uxth	r3, r3
     900:	85ab      	strh	r3, [r5, #44]	; 0x2c
     902:	2b00      	cmp	r3, #0
     904:	d10c      	bne.n	920 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     906:	3304      	adds	r3, #4
     908:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     90a:	2200      	movs	r2, #0
     90c:	332e      	adds	r3, #46	; 0x2e
     90e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     910:	07bb      	lsls	r3, r7, #30
     912:	d505      	bpl.n	920 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     914:	1c28      	adds	r0, r5, #0
     916:	692b      	ldr	r3, [r5, #16]
     918:	4798      	blx	r3
     91a:	e001      	b.n	920 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     91c:	2304      	movs	r3, #4
     91e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     920:	06f3      	lsls	r3, r6, #27
     922:	d507      	bpl.n	934 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     924:	2310      	movs	r3, #16
     926:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     928:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     92a:	06fb      	lsls	r3, r7, #27
     92c:	d502      	bpl.n	934 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     92e:	1c28      	adds	r0, r5, #0
     930:	69eb      	ldr	r3, [r5, #28]
     932:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     934:	06b3      	lsls	r3, r6, #26
     936:	d507      	bpl.n	948 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     938:	2320      	movs	r3, #32
     93a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     93c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     93e:	073b      	lsls	r3, r7, #28
     940:	d502      	bpl.n	948 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     942:	1c28      	adds	r0, r5, #0
     944:	69ab      	ldr	r3, [r5, #24]
     946:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     948:	0733      	lsls	r3, r6, #28
     94a:	d507      	bpl.n	95c <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     94c:	2308      	movs	r3, #8
     94e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     950:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     952:	06bb      	lsls	r3, r7, #26
     954:	d502      	bpl.n	95c <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     956:	6a2b      	ldr	r3, [r5, #32]
     958:	1c28      	adds	r0, r5, #0
     95a:	4798      	blx	r3
		}
	}
#endif
}
     95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	20000108 	.word	0x20000108

00000964 <ISRNetworkTransmission>:
}

void ISRNetworkTransmission(void){
	//puts("t\r\n");
	
}
     964:	4770      	bx	lr
     966:	46c0      	nop			; (mov r8, r8)

00000968 <ISRNetworkReception>:
volatile uint8_t rx;
volatile circularBuffer buffer;
/************************************************************************/
/* GLOBAL FUNCTION                                                      */
/************************************************************************/
void ISRNetworkReception(void){
     968:	b510      	push	{r4, lr}
	
	usart_read_job(&usart_instance,&rx);	
     96a:	4c09      	ldr	r4, [pc, #36]	; (990 <ISRNetworkReception+0x28>)
     96c:	4809      	ldr	r0, [pc, #36]	; (994 <ISRNetworkReception+0x2c>)
     96e:	1c21      	adds	r1, r4, #0
     970:	4b09      	ldr	r3, [pc, #36]	; (998 <ISRNetworkReception+0x30>)
     972:	4798      	blx	r3
	buffer.buffer[buffer.indice]=rx;
     974:	4b09      	ldr	r3, [pc, #36]	; (99c <ISRNetworkReception+0x34>)
     976:	490a      	ldr	r1, [pc, #40]	; (9a0 <ISRNetworkReception+0x38>)
     978:	5c5a      	ldrb	r2, [r3, r1]
     97a:	b2d2      	uxtb	r2, r2
     97c:	7820      	ldrb	r0, [r4, #0]
     97e:	b2c0      	uxtb	r0, r0
     980:	5498      	strb	r0, [r3, r2]

	buffer.indice++;
     982:	5c5a      	ldrb	r2, [r3, r1]
     984:	3201      	adds	r2, #1
     986:	b2d2      	uxtb	r2, r2
     988:	545a      	strb	r2, [r3, r1]
	if(buffer.indice>=CIRCULAR_BUFFER_LENGTH){
     98a:	5c5b      	ldrb	r3, [r3, r1]
		buffer.indice=0;
	}
}
     98c:	bd10      	pop	{r4, pc}
     98e:	46c0      	nop			; (mov r8, r8)
     990:	20000164 	.word	0x20000164
     994:	20000130 	.word	0x20000130
     998:	000007c9 	.word	0x000007c9
     99c:	20000168 	.word	0x20000168
     9a0:	00000bb8 	.word	0x00000bb8

000009a4 <networkAvailable>:
}

bool networkAvailable(void){


	if(buffer.currentIndice!=buffer.indice){
     9a4:	4a04      	ldr	r2, [pc, #16]	; (9b8 <networkAvailable+0x14>)
     9a6:	4b05      	ldr	r3, [pc, #20]	; (9bc <networkAvailable+0x18>)
     9a8:	5cd3      	ldrb	r3, [r2, r3]
     9aa:	4905      	ldr	r1, [pc, #20]	; (9c0 <networkAvailable+0x1c>)
     9ac:	5c50      	ldrb	r0, [r2, r1]
     9ae:	1a18      	subs	r0, r3, r0
     9b0:	1e43      	subs	r3, r0, #1
     9b2:	4198      	sbcs	r0, r3
     9b4:	b2c0      	uxtb	r0, r0
	else{
			
		return false;
	}

}
     9b6:	4770      	bx	lr
     9b8:	20000168 	.word	0x20000168
     9bc:	00000bb9 	.word	0x00000bb9
     9c0:	00000bb8 	.word	0x00000bb8

000009c4 <networkRead>:
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
void networkTx(const uint8_t send[],const uint16_t length){
	usart_write_buffer_wait(&usart_instance, send,length);
}
uint8_t networkRead(void){
     9c4:	b508      	push	{r3, lr}
	if(networkAvailable()){
     9c6:	4b08      	ldr	r3, [pc, #32]	; (9e8 <networkRead+0x24>)
     9c8:	4798      	blx	r3
			buffer.currentIndice=0;
		}
		return recu; 
	}
	else{
		return 0;
     9ca:	2300      	movs	r3, #0
}
void networkTx(const uint8_t send[],const uint16_t length){
	usart_write_buffer_wait(&usart_instance, send,length);
}
uint8_t networkRead(void){
	if(networkAvailable()){
     9cc:	2800      	cmp	r0, #0
     9ce:	d009      	beq.n	9e4 <networkRead+0x20>
		uint8_t recu;
		recu=buffer.buffer[buffer.currentIndice];
     9d0:	4a06      	ldr	r2, [pc, #24]	; (9ec <networkRead+0x28>)
     9d2:	4807      	ldr	r0, [pc, #28]	; (9f0 <networkRead+0x2c>)
     9d4:	5c13      	ldrb	r3, [r2, r0]
     9d6:	b2db      	uxtb	r3, r3
     9d8:	5cd3      	ldrb	r3, [r2, r3]
		buffer.currentIndice++;
     9da:	5c11      	ldrb	r1, [r2, r0]
     9dc:	3101      	adds	r1, #1
     9de:	b2c9      	uxtb	r1, r1
     9e0:	5411      	strb	r1, [r2, r0]
		if(buffer.currentIndice>=CIRCULAR_BUFFER_LENGTH){
     9e2:	5c12      	ldrb	r2, [r2, r0]
	else{
		return 0;
	}

	
}
     9e4:	1c18      	adds	r0, r3, #0
     9e6:	bd08      	pop	{r3, pc}
     9e8:	000009a5 	.word	0x000009a5
     9ec:	20000168 	.word	0x20000168
     9f0:	00000bb9 	.word	0x00000bb9

000009f4 <configurationNetwork>:

void configurationNetwork(){
     9f4:	b570      	push	{r4, r5, r6, lr}
     9f6:	b090      	sub	sp, #64	; 0x40
	buffer.currentIndice=0;
     9f8:	4933      	ldr	r1, [pc, #204]	; (ac8 <configurationNetwork+0xd4>)
     9fa:	2300      	movs	r3, #0
     9fc:	2200      	movs	r2, #0
     9fe:	4833      	ldr	r0, [pc, #204]	; (acc <configurationNetwork+0xd8>)
     a00:	540b      	strb	r3, [r1, r0]
	buffer.indice=0;
     a02:	4833      	ldr	r0, [pc, #204]	; (ad0 <configurationNetwork+0xdc>)
     a04:	540b      	strb	r3, [r1, r0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     a06:	2180      	movs	r1, #128	; 0x80
     a08:	05c9      	lsls	r1, r1, #23
     a0a:	9100      	str	r1, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     a0c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     a0e:	21ff      	movs	r1, #255	; 0xff
     a10:	4668      	mov	r0, sp
     a12:	8101      	strh	r1, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
     a14:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     a16:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     a18:	2101      	movs	r1, #1
     a1a:	2024      	movs	r0, #36	; 0x24
     a1c:	466c      	mov	r4, sp
     a1e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     a20:	3001      	adds	r0, #1
     a22:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     a24:	3125      	adds	r1, #37	; 0x25
     a26:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     a28:	3101      	adds	r1, #1
     a2a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     a2c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     a2e:	3105      	adds	r1, #5
     a30:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     a32:	3101      	adds	r1, #1
     a34:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     a36:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     a38:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     a3a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     a3c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     a3e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     a40:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     a42:	2313      	movs	r3, #19
     a44:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     a46:	7762      	strb	r2, [r4, #29]
	//GCLK generator 0 as clock source
	//Default pin configurationc
	usart_get_config_defaults(&config_usart);
	//baudrate 9600
	
	config_usart.baudrate    = 57600;
     a48:	23e1      	movs	r3, #225	; 0xe1
     a4a:	021b      	lsls	r3, r3, #8
     a4c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1 ;//Rx on PAD1 Tx on PAD0
     a4e:	2380      	movs	r3, #128	; 0x80
     a50:	035b      	lsls	r3, r3, #13
     a52:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA16D_SERCOM3_PAD0;//MUX D
     a54:	4b1f      	ldr	r3, [pc, #124]	; (ad4 <configurationNetwork+0xe0>)
     a56:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA17D_SERCOM3_PAD1;// MUX D
     a58:	4b1f      	ldr	r3, [pc, #124]	; (ad8 <configurationNetwork+0xe4>)
     a5a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
     a5c:	2301      	movs	r3, #1
     a5e:	425b      	negs	r3, r3
     a60:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
     a62:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance,SERCOM3, &config_usart) != STATUS_OK) ;
     a64:	4e1d      	ldr	r6, [pc, #116]	; (adc <configurationNetwork+0xe8>)
     a66:	4d1e      	ldr	r5, [pc, #120]	; (ae0 <configurationNetwork+0xec>)
     a68:	4c1e      	ldr	r4, [pc, #120]	; (ae4 <configurationNetwork+0xf0>)
     a6a:	1c30      	adds	r0, r6, #0
     a6c:	1c29      	adds	r1, r5, #0
     a6e:	466a      	mov	r2, sp
     a70:	47a0      	blx	r4
     a72:	2800      	cmp	r0, #0
     a74:	d1f9      	bne.n	a6a <configurationNetwork+0x76>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a76:	4d19      	ldr	r5, [pc, #100]	; (adc <configurationNetwork+0xe8>)
     a78:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     a7a:	1c20      	adds	r0, r4, #0
     a7c:	4b1a      	ldr	r3, [pc, #104]	; (ae8 <configurationNetwork+0xf4>)
     a7e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a80:	231f      	movs	r3, #31
     a82:	4018      	ands	r0, r3
     a84:	3b1e      	subs	r3, #30
     a86:	4083      	lsls	r3, r0
     a88:	1c18      	adds	r0, r3, #0
     a8a:	4b18      	ldr	r3, [pc, #96]	; (aec <configurationNetwork+0xf8>)
     a8c:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a8e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a90:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a92:	2b00      	cmp	r3, #0
     a94:	d1fc      	bne.n	a90 <configurationNetwork+0x9c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     a96:	6822      	ldr	r2, [r4, #0]
     a98:	3302      	adds	r3, #2
     a9a:	4313      	orrs	r3, r2
     a9c:	6023      	str	r3, [r4, #0]

	usart_enable(&usart_instance);
	//config callback
		//config register
	usart_register_callback(&usart_instance,(usart_callback_t)ISRNetworkTransmission, USART_CALLBACK_BUFFER_TRANSMITTED);
     a9e:	4c0f      	ldr	r4, [pc, #60]	; (adc <configurationNetwork+0xe8>)
     aa0:	1c20      	adds	r0, r4, #0
     aa2:	4913      	ldr	r1, [pc, #76]	; (af0 <configurationNetwork+0xfc>)
     aa4:	2200      	movs	r2, #0
     aa6:	4d13      	ldr	r5, [pc, #76]	; (af4 <configurationNetwork+0x100>)
     aa8:	47a8      	blx	r5
	usart_register_callback(&usart_instance,(usart_callback_t)ISRNetworkReception, USART_CALLBACK_BUFFER_RECEIVED);
     aaa:	1c20      	adds	r0, r4, #0
     aac:	4912      	ldr	r1, [pc, #72]	; (af8 <configurationNetwork+0x104>)
     aae:	2201      	movs	r2, #1
     ab0:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     ab2:	2231      	movs	r2, #49	; 0x31
     ab4:	5ca1      	ldrb	r1, [r4, r2]
     ab6:	2303      	movs	r3, #3
     ab8:	430b      	orrs	r3, r1
     aba:	54a3      	strb	r3, [r4, r2]

		//enable callback
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	usart_read_job(&usart_instance,&rx);
     abc:	1c20      	adds	r0, r4, #0
     abe:	490f      	ldr	r1, [pc, #60]	; (afc <configurationNetwork+0x108>)
     ac0:	4b0f      	ldr	r3, [pc, #60]	; (b00 <configurationNetwork+0x10c>)
     ac2:	4798      	blx	r3

}
     ac4:	b010      	add	sp, #64	; 0x40
     ac6:	bd70      	pop	{r4, r5, r6, pc}
     ac8:	20000168 	.word	0x20000168
     acc:	00000bb9 	.word	0x00000bb9
     ad0:	00000bb8 	.word	0x00000bb8
     ad4:	00100003 	.word	0x00100003
     ad8:	00110003 	.word	0x00110003
     adc:	20000130 	.word	0x20000130
     ae0:	42001400 	.word	0x42001400
     ae4:	0000038d 	.word	0x0000038d
     ae8:	00000155 	.word	0x00000155
     aec:	e000e100 	.word	0xe000e100
     af0:	00000965 	.word	0x00000965
     af4:	000007b1 	.word	0x000007b1
     af8:	00000969 	.word	0x00000969
     afc:	20000164 	.word	0x20000164
     b00:	000007c9 	.word	0x000007c9

00000b04 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     b04:	b570      	push	{r4, r5, r6, lr}
     b06:	b082      	sub	sp, #8
     b08:	1c05      	adds	r5, r0, #0
     b0a:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     b0c:	2200      	movs	r2, #0
     b0e:	466b      	mov	r3, sp
     b10:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     b12:	4c06      	ldr	r4, [pc, #24]	; (b2c <usart_serial_getchar+0x28>)
     b14:	1c28      	adds	r0, r5, #0
     b16:	466b      	mov	r3, sp
     b18:	1d99      	adds	r1, r3, #6
     b1a:	47a0      	blx	r4
     b1c:	2800      	cmp	r0, #0
     b1e:	d1f9      	bne.n	b14 <usart_serial_getchar+0x10>

	*c = temp;
     b20:	466b      	mov	r3, sp
     b22:	3306      	adds	r3, #6
     b24:	881b      	ldrh	r3, [r3, #0]
     b26:	7033      	strb	r3, [r6, #0]
}
     b28:	b002      	add	sp, #8
     b2a:	bd70      	pop	{r4, r5, r6, pc}
     b2c:	000006f1 	.word	0x000006f1

00000b30 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     b30:	b570      	push	{r4, r5, r6, lr}
     b32:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     b34:	b28c      	uxth	r4, r1
     b36:	4e03      	ldr	r6, [pc, #12]	; (b44 <usart_serial_putchar+0x14>)
     b38:	1c28      	adds	r0, r5, #0
     b3a:	1c21      	adds	r1, r4, #0
     b3c:	47b0      	blx	r6
     b3e:	2800      	cmp	r0, #0
     b40:	d1fa      	bne.n	b38 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     b42:	bd70      	pop	{r4, r5, r6, pc}
     b44:	000006c5 	.word	0x000006c5

00000b48 <configureHMI>:

static struct usart_module hmiUart;
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/
void configureHMI(void){
     b48:	b5f0      	push	{r4, r5, r6, r7, lr}
     b4a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     b4c:	2380      	movs	r3, #128	; 0x80
     b4e:	05db      	lsls	r3, r3, #23
     b50:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     b52:	2300      	movs	r3, #0
     b54:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     b56:	22ff      	movs	r2, #255	; 0xff
     b58:	4669      	mov	r1, sp
     b5a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     b5c:	2200      	movs	r2, #0
     b5e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     b60:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     b62:	2401      	movs	r4, #1
     b64:	2124      	movs	r1, #36	; 0x24
     b66:	4668      	mov	r0, sp
     b68:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     b6a:	3101      	adds	r1, #1
     b6c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     b6e:	3101      	adds	r1, #1
     b70:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     b72:	3101      	adds	r1, #1
     b74:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     b76:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     b78:	3105      	adds	r1, #5
     b7a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     b7c:	3101      	adds	r1, #1
     b7e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     b80:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     b82:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     b84:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     b86:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     b88:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     b8a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     b8c:	2313      	movs	r3, #19
     b8e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     b90:	7742      	strb	r2, [r0, #29]
		struct usart_config usart_conf;
		usart_get_config_defaults(&usart_conf);
		// Define as STDIO Standart of C, STDIO use the EDBG serial for default. see file conf_uart_serial.h
		usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;//USART_RX_1_TX_0_XCK_1
     b92:	2380      	movs	r3, #128	; 0x80
     b94:	035b      	lsls	r3, r3, #13
     b96:	9303      	str	r3, [sp, #12]
		usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;//PINMUX_PA04D_SERCOM0_PAD0 multiplexing SERCOM0
     b98:	4b1a      	ldr	r3, [pc, #104]	; (c04 <configureHMI+0xbc>)
     b9a:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;//PINMUX_PA05D_SERCOM0_PAD1 multilexing SERCOM0
     b9c:	4b1a      	ldr	r3, [pc, #104]	; (c08 <configureHMI+0xc0>)
     b9e:	930d      	str	r3, [sp, #52]	; 0x34
		usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;//PINMUX_UNUSED 
     ba0:	2301      	movs	r3, #1
     ba2:	425b      	negs	r3, r3
     ba4:	930e      	str	r3, [sp, #56]	; 0x38
		usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;//PINMUX_UNUSED
     ba6:	930f      	str	r3, [sp, #60]	; 0x3c
		usart_conf.baudrate    = CONF_STDIO_BAUDRATE;//9600
     ba8:	23e1      	movs	r3, #225	; 0xe1
     baa:	021b      	lsls	r3, r3, #8
     bac:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     bae:	4d17      	ldr	r5, [pc, #92]	; (c0c <configureHMI+0xc4>)
     bb0:	4b17      	ldr	r3, [pc, #92]	; (c10 <configureHMI+0xc8>)
     bb2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     bb4:	4a17      	ldr	r2, [pc, #92]	; (c14 <configureHMI+0xcc>)
     bb6:	4b18      	ldr	r3, [pc, #96]	; (c18 <configureHMI+0xd0>)
     bb8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     bba:	4a18      	ldr	r2, [pc, #96]	; (c1c <configureHMI+0xd4>)
     bbc:	4b18      	ldr	r3, [pc, #96]	; (c20 <configureHMI+0xd8>)
     bbe:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     bc0:	1c28      	adds	r0, r5, #0
     bc2:	4918      	ldr	r1, [pc, #96]	; (c24 <configureHMI+0xdc>)
     bc4:	466a      	mov	r2, sp
     bc6:	4b18      	ldr	r3, [pc, #96]	; (c28 <configureHMI+0xe0>)
     bc8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     bca:	4f18      	ldr	r7, [pc, #96]	; (c2c <configureHMI+0xe4>)
     bcc:	683b      	ldr	r3, [r7, #0]
     bce:	6898      	ldr	r0, [r3, #8]
     bd0:	2100      	movs	r1, #0
     bd2:	4e17      	ldr	r6, [pc, #92]	; (c30 <configureHMI+0xe8>)
     bd4:	47b0      	blx	r6
	setbuf(stdin, NULL);
     bd6:	683b      	ldr	r3, [r7, #0]
     bd8:	6858      	ldr	r0, [r3, #4]
     bda:	2100      	movs	r1, #0
     bdc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bde:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     be0:	1c30      	adds	r0, r6, #0
     be2:	4b14      	ldr	r3, [pc, #80]	; (c34 <configureHMI+0xec>)
     be4:	4798      	blx	r3
     be6:	231f      	movs	r3, #31
     be8:	4018      	ands	r0, r3
     bea:	4084      	lsls	r4, r0
     bec:	4b12      	ldr	r3, [pc, #72]	; (c38 <configureHMI+0xf0>)
     bee:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bf0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bf2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bf4:	2b00      	cmp	r3, #0
     bf6:	d1fc      	bne.n	bf2 <configureHMI+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     bf8:	6832      	ldr	r2, [r6, #0]
     bfa:	3302      	adds	r3, #2
     bfc:	4313      	orrs	r3, r2
     bfe:	6033      	str	r3, [r6, #0]
		stdio_serial_init(&hmiUart, CONF_STDIO_USART_MODULE, &usart_conf);
		usart_enable(&hmiUart);
     c00:	b011      	add	sp, #68	; 0x44
     c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c04:	00040003 	.word	0x00040003
     c08:	00050003 	.word	0x00050003
     c0c:	200000a4 	.word	0x200000a4
     c10:	20000128 	.word	0x20000128
     c14:	00000b31 	.word	0x00000b31
     c18:	20000124 	.word	0x20000124
     c1c:	00000b05 	.word	0x00000b05
     c20:	20000120 	.word	0x20000120
     c24:	42000800 	.word	0x42000800
     c28:	0000038d 	.word	0x0000038d
     c2c:	20000064 	.word	0x20000064
     c30:	00001ad5 	.word	0x00001ad5
     c34:	00000155 	.word	0x00000155
     c38:	e000e100 	.word	0xe000e100

00000c3c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c3c:	4b0c      	ldr	r3, [pc, #48]	; (c70 <cpu_irq_enter_critical+0x34>)
     c3e:	681b      	ldr	r3, [r3, #0]
     c40:	2b00      	cmp	r3, #0
     c42:	d110      	bne.n	c66 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c44:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c48:	2b00      	cmp	r3, #0
     c4a:	d109      	bne.n	c60 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     c4c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c4e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c52:	2200      	movs	r2, #0
     c54:	4b07      	ldr	r3, [pc, #28]	; (c74 <cpu_irq_enter_critical+0x38>)
     c56:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c58:	3201      	adds	r2, #1
     c5a:	4b07      	ldr	r3, [pc, #28]	; (c78 <cpu_irq_enter_critical+0x3c>)
     c5c:	701a      	strb	r2, [r3, #0]
     c5e:	e002      	b.n	c66 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c60:	2200      	movs	r2, #0
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <cpu_irq_enter_critical+0x3c>)
     c64:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c66:	4a02      	ldr	r2, [pc, #8]	; (c70 <cpu_irq_enter_critical+0x34>)
     c68:	6813      	ldr	r3, [r2, #0]
     c6a:	3301      	adds	r3, #1
     c6c:	6013      	str	r3, [r2, #0]
}
     c6e:	4770      	bx	lr
     c70:	200000d8 	.word	0x200000d8
     c74:	20000000 	.word	0x20000000
     c78:	200000dc 	.word	0x200000dc

00000c7c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c7c:	4b08      	ldr	r3, [pc, #32]	; (ca0 <cpu_irq_leave_critical+0x24>)
     c7e:	681a      	ldr	r2, [r3, #0]
     c80:	3a01      	subs	r2, #1
     c82:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c84:	681b      	ldr	r3, [r3, #0]
     c86:	2b00      	cmp	r3, #0
     c88:	d109      	bne.n	c9e <cpu_irq_leave_critical+0x22>
     c8a:	4b06      	ldr	r3, [pc, #24]	; (ca4 <cpu_irq_leave_critical+0x28>)
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	2b00      	cmp	r3, #0
     c90:	d005      	beq.n	c9e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c92:	2201      	movs	r2, #1
     c94:	4b04      	ldr	r3, [pc, #16]	; (ca8 <cpu_irq_leave_critical+0x2c>)
     c96:	701a      	strb	r2, [r3, #0]
     c98:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     c9c:	b662      	cpsie	i
	}
}
     c9e:	4770      	bx	lr
     ca0:	200000d8 	.word	0x200000d8
     ca4:	200000dc 	.word	0x200000dc
     ca8:	20000000 	.word	0x20000000

00000cac <system_board_init>:




void system_board_init(void)
{
     cac:	b5f0      	push	{r4, r5, r6, r7, lr}
     cae:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     cb0:	ac01      	add	r4, sp, #4
     cb2:	2501      	movs	r5, #1
     cb4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     cb6:	2700      	movs	r7, #0
     cb8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     cba:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     cbc:	2013      	movs	r0, #19
     cbe:	1c21      	adds	r1, r4, #0
     cc0:	4e06      	ldr	r6, [pc, #24]	; (cdc <system_board_init+0x30>)
     cc2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     cc4:	2280      	movs	r2, #128	; 0x80
     cc6:	0312      	lsls	r2, r2, #12
     cc8:	4b05      	ldr	r3, [pc, #20]	; (ce0 <system_board_init+0x34>)
     cca:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ccc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     cce:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     cd0:	201c      	movs	r0, #28
     cd2:	1c21      	adds	r1, r4, #0
     cd4:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     cd6:	b003      	add	sp, #12
     cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	00000ce5 	.word	0x00000ce5
     ce0:	41004400 	.word	0x41004400

00000ce4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ce4:	b500      	push	{lr}
     ce6:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ce8:	ab01      	add	r3, sp, #4
     cea:	2280      	movs	r2, #128	; 0x80
     cec:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     cee:	780a      	ldrb	r2, [r1, #0]
     cf0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     cf2:	784a      	ldrb	r2, [r1, #1]
     cf4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     cf6:	788a      	ldrb	r2, [r1, #2]
     cf8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     cfa:	1c19      	adds	r1, r3, #0
     cfc:	4b01      	ldr	r3, [pc, #4]	; (d04 <port_pin_set_config+0x20>)
     cfe:	4798      	blx	r3
}
     d00:	b003      	add	sp, #12
     d02:	bd00      	pop	{pc}
     d04:	00001645 	.word	0x00001645

00000d08 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d08:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d0a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d0c:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d0e:	4281      	cmp	r1, r0
     d10:	d30c      	bcc.n	d2c <_sercom_get_sync_baud_val+0x24>
     d12:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     d14:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     d16:	3301      	adds	r3, #1
     d18:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     d1a:	4288      	cmp	r0, r1
     d1c:	d9fa      	bls.n	d14 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     d1e:	3b01      	subs	r3, #1
     d20:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d22:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     d24:	2bff      	cmp	r3, #255	; 0xff
     d26:	d801      	bhi.n	d2c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     d28:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     d2a:	2400      	movs	r4, #0
	}
}
     d2c:	1c20      	adds	r0, r4, #0
     d2e:	bd10      	pop	{r4, pc}

00000d30 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     d30:	b5f0      	push	{r4, r5, r6, r7, lr}
     d32:	465f      	mov	r7, fp
     d34:	4656      	mov	r6, sl
     d36:	464d      	mov	r5, r9
     d38:	4644      	mov	r4, r8
     d3a:	b4f0      	push	{r4, r5, r6, r7}
     d3c:	b089      	sub	sp, #36	; 0x24
     d3e:	1c1c      	adds	r4, r3, #0
     d40:	ab12      	add	r3, sp, #72	; 0x48
     d42:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d44:	1c06      	adds	r6, r0, #0
     d46:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d48:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d4a:	428e      	cmp	r6, r1
     d4c:	d900      	bls.n	d50 <_sercom_get_async_baud_val+0x20>
     d4e:	e0c7      	b.n	ee0 <_sercom_get_async_baud_val+0x1b0>
     d50:	1c25      	adds	r5, r4, #0
     d52:	9207      	str	r2, [sp, #28]
     d54:	1c0c      	adds	r4, r1, #0
     d56:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     d58:	2d00      	cmp	r5, #0
     d5a:	d151      	bne.n	e00 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     d5c:	1c18      	adds	r0, r3, #0
     d5e:	2100      	movs	r1, #0
     d60:	2300      	movs	r3, #0
     d62:	4d63      	ldr	r5, [pc, #396]	; (ef0 <_sercom_get_async_baud_val+0x1c0>)
     d64:	47a8      	blx	r5
     d66:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     d68:	1c26      	adds	r6, r4, #0
     d6a:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     d6c:	2300      	movs	r3, #0
     d6e:	2400      	movs	r4, #0
     d70:	9302      	str	r3, [sp, #8]
     d72:	9403      	str	r4, [sp, #12]
     d74:	2200      	movs	r2, #0
     d76:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     d78:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     d7a:	2120      	movs	r1, #32
     d7c:	468c      	mov	ip, r1
     d7e:	391f      	subs	r1, #31
     d80:	9600      	str	r6, [sp, #0]
     d82:	9701      	str	r7, [sp, #4]
     d84:	2420      	movs	r4, #32
     d86:	4264      	negs	r4, r4
     d88:	1904      	adds	r4, r0, r4
     d8a:	d403      	bmi.n	d94 <_sercom_get_async_baud_val+0x64>
     d8c:	1c0d      	adds	r5, r1, #0
     d8e:	40a5      	lsls	r5, r4
     d90:	46a8      	mov	r8, r5
     d92:	e004      	b.n	d9e <_sercom_get_async_baud_val+0x6e>
     d94:	4664      	mov	r4, ip
     d96:	1a24      	subs	r4, r4, r0
     d98:	1c0d      	adds	r5, r1, #0
     d9a:	40e5      	lsrs	r5, r4
     d9c:	46a8      	mov	r8, r5
     d9e:	1c0c      	adds	r4, r1, #0
     da0:	4084      	lsls	r4, r0
     da2:	46a1      	mov	r9, r4

		r = r << 1;
     da4:	1c14      	adds	r4, r2, #0
     da6:	1c1d      	adds	r5, r3, #0
     da8:	18a4      	adds	r4, r4, r2
     daa:	415d      	adcs	r5, r3
     dac:	1c22      	adds	r2, r4, #0
     dae:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     db0:	465e      	mov	r6, fp
     db2:	4647      	mov	r7, r8
     db4:	423e      	tst	r6, r7
     db6:	d003      	beq.n	dc0 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     db8:	1c0e      	adds	r6, r1, #0
     dba:	4326      	orrs	r6, r4
     dbc:	1c32      	adds	r2, r6, #0
     dbe:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     dc0:	9c01      	ldr	r4, [sp, #4]
     dc2:	429c      	cmp	r4, r3
     dc4:	d810      	bhi.n	de8 <_sercom_get_async_baud_val+0xb8>
     dc6:	d102      	bne.n	dce <_sercom_get_async_baud_val+0x9e>
     dc8:	9c00      	ldr	r4, [sp, #0]
     dca:	4294      	cmp	r4, r2
     dcc:	d80c      	bhi.n	de8 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     dce:	9c00      	ldr	r4, [sp, #0]
     dd0:	9d01      	ldr	r5, [sp, #4]
     dd2:	1b12      	subs	r2, r2, r4
     dd4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     dd6:	464d      	mov	r5, r9
     dd8:	9e02      	ldr	r6, [sp, #8]
     dda:	9f03      	ldr	r7, [sp, #12]
     ddc:	4335      	orrs	r5, r6
     dde:	1c3c      	adds	r4, r7, #0
     de0:	4646      	mov	r6, r8
     de2:	4334      	orrs	r4, r6
     de4:	9502      	str	r5, [sp, #8]
     de6:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     de8:	3801      	subs	r0, #1
     dea:	d2cb      	bcs.n	d84 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     dec:	2200      	movs	r2, #0
     dee:	2301      	movs	r3, #1
     df0:	9802      	ldr	r0, [sp, #8]
     df2:	9903      	ldr	r1, [sp, #12]
     df4:	1a12      	subs	r2, r2, r0
     df6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     df8:	0c11      	lsrs	r1, r2, #16
     dfa:	041b      	lsls	r3, r3, #16
     dfc:	4319      	orrs	r1, r3
     dfe:	e06c      	b.n	eda <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     e00:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     e02:	2d01      	cmp	r5, #1
     e04:	d169      	bne.n	eda <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     e06:	0f61      	lsrs	r1, r4, #29
     e08:	1c0f      	adds	r7, r1, #0
     e0a:	00e1      	lsls	r1, r4, #3
     e0c:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     e0e:	1c18      	adds	r0, r3, #0
     e10:	2100      	movs	r1, #0
     e12:	2300      	movs	r3, #0
     e14:	4c36      	ldr	r4, [pc, #216]	; (ef0 <_sercom_get_async_baud_val+0x1c0>)
     e16:	47a0      	blx	r4
     e18:	1c04      	adds	r4, r0, #0
     e1a:	1c0d      	adds	r5, r1, #0
     e1c:	2300      	movs	r3, #0
     e1e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     e20:	3320      	adds	r3, #32
     e22:	469b      	mov	fp, r3
     e24:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     e26:	4663      	mov	r3, ip
     e28:	9305      	str	r3, [sp, #20]
     e2a:	46b9      	mov	r9, r7
     e2c:	466b      	mov	r3, sp
     e2e:	7d1b      	ldrb	r3, [r3, #20]
     e30:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e32:	2300      	movs	r3, #0
     e34:	469c      	mov	ip, r3
     e36:	2000      	movs	r0, #0
     e38:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     e3a:	223f      	movs	r2, #63	; 0x3f
     e3c:	9400      	str	r4, [sp, #0]
     e3e:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     e40:	2320      	movs	r3, #32
     e42:	425b      	negs	r3, r3
     e44:	18d3      	adds	r3, r2, r3
     e46:	d403      	bmi.n	e50 <_sercom_get_async_baud_val+0x120>
     e48:	1c34      	adds	r4, r6, #0
     e4a:	409c      	lsls	r4, r3
     e4c:	1c23      	adds	r3, r4, #0
     e4e:	e004      	b.n	e5a <_sercom_get_async_baud_val+0x12a>
     e50:	465b      	mov	r3, fp
     e52:	1a9b      	subs	r3, r3, r2
     e54:	1c34      	adds	r4, r6, #0
     e56:	40dc      	lsrs	r4, r3
     e58:	1c23      	adds	r3, r4, #0
     e5a:	1c37      	adds	r7, r6, #0
     e5c:	4097      	lsls	r7, r2

		r = r << 1;
     e5e:	1c04      	adds	r4, r0, #0
     e60:	1c0d      	adds	r5, r1, #0
     e62:	1824      	adds	r4, r4, r0
     e64:	414d      	adcs	r5, r1
     e66:	1c20      	adds	r0, r4, #0
     e68:	1c29      	adds	r1, r5, #0
     e6a:	9002      	str	r0, [sp, #8]
     e6c:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     e6e:	4644      	mov	r4, r8
     e70:	403c      	ands	r4, r7
     e72:	46a2      	mov	sl, r4
     e74:	464c      	mov	r4, r9
     e76:	4023      	ands	r3, r4
     e78:	4654      	mov	r4, sl
     e7a:	4323      	orrs	r3, r4
     e7c:	d005      	beq.n	e8a <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     e7e:	9b02      	ldr	r3, [sp, #8]
     e80:	9c03      	ldr	r4, [sp, #12]
     e82:	1c1d      	adds	r5, r3, #0
     e84:	4335      	orrs	r5, r6
     e86:	1c28      	adds	r0, r5, #0
     e88:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     e8a:	9b01      	ldr	r3, [sp, #4]
     e8c:	428b      	cmp	r3, r1
     e8e:	d80a      	bhi.n	ea6 <_sercom_get_async_baud_val+0x176>
     e90:	d102      	bne.n	e98 <_sercom_get_async_baud_val+0x168>
     e92:	9b00      	ldr	r3, [sp, #0]
     e94:	4283      	cmp	r3, r0
     e96:	d806      	bhi.n	ea6 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     e98:	9b00      	ldr	r3, [sp, #0]
     e9a:	9c01      	ldr	r4, [sp, #4]
     e9c:	1ac0      	subs	r0, r0, r3
     e9e:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     ea0:	4663      	mov	r3, ip
     ea2:	433b      	orrs	r3, r7
     ea4:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     ea6:	3a01      	subs	r2, #1
     ea8:	d2ca      	bcs.n	e40 <_sercom_get_async_baud_val+0x110>
     eaa:	9c00      	ldr	r4, [sp, #0]
     eac:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     eae:	4662      	mov	r2, ip
     eb0:	9905      	ldr	r1, [sp, #20]
     eb2:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     eb4:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     eb6:	4a0f      	ldr	r2, [pc, #60]	; (ef4 <_sercom_get_async_baud_val+0x1c4>)
     eb8:	4293      	cmp	r3, r2
     eba:	d908      	bls.n	ece <_sercom_get_async_baud_val+0x19e>
     ebc:	9a06      	ldr	r2, [sp, #24]
     ebe:	3201      	adds	r2, #1
     ec0:	b2d2      	uxtb	r2, r2
     ec2:	9206      	str	r2, [sp, #24]
     ec4:	1c0a      	adds	r2, r1, #0
     ec6:	3201      	adds	r2, #1
     ec8:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     eca:	2a08      	cmp	r2, #8
     ecc:	d1ae      	bne.n	e2c <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ece:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     ed0:	9a06      	ldr	r2, [sp, #24]
     ed2:	2a08      	cmp	r2, #8
     ed4:	d004      	beq.n	ee0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     ed6:	0351      	lsls	r1, r2, #13
     ed8:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     eda:	9b07      	ldr	r3, [sp, #28]
     edc:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     ede:	2500      	movs	r5, #0
}
     ee0:	1c28      	adds	r0, r5, #0
     ee2:	b009      	add	sp, #36	; 0x24
     ee4:	bc3c      	pop	{r2, r3, r4, r5}
     ee6:	4690      	mov	r8, r2
     ee8:	4699      	mov	r9, r3
     eea:	46a2      	mov	sl, r4
     eec:	46ab      	mov	fp, r5
     eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef0:	000019e9 	.word	0x000019e9
     ef4:	00001fff 	.word	0x00001fff

00000ef8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ef8:	b510      	push	{r4, lr}
     efa:	b082      	sub	sp, #8
     efc:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     efe:	4b0e      	ldr	r3, [pc, #56]	; (f38 <sercom_set_gclk_generator+0x40>)
     f00:	781b      	ldrb	r3, [r3, #0]
     f02:	2b00      	cmp	r3, #0
     f04:	d001      	beq.n	f0a <sercom_set_gclk_generator+0x12>
     f06:	2900      	cmp	r1, #0
     f08:	d00d      	beq.n	f26 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     f0a:	a901      	add	r1, sp, #4
     f0c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     f0e:	2013      	movs	r0, #19
     f10:	4b0a      	ldr	r3, [pc, #40]	; (f3c <sercom_set_gclk_generator+0x44>)
     f12:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     f14:	2013      	movs	r0, #19
     f16:	4b0a      	ldr	r3, [pc, #40]	; (f40 <sercom_set_gclk_generator+0x48>)
     f18:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     f1a:	4b07      	ldr	r3, [pc, #28]	; (f38 <sercom_set_gclk_generator+0x40>)
     f1c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     f1e:	2201      	movs	r2, #1
     f20:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     f22:	2000      	movs	r0, #0
     f24:	e006      	b.n	f34 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     f26:	4b04      	ldr	r3, [pc, #16]	; (f38 <sercom_set_gclk_generator+0x40>)
     f28:	785b      	ldrb	r3, [r3, #1]
     f2a:	4283      	cmp	r3, r0
     f2c:	d001      	beq.n	f32 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     f2e:	201d      	movs	r0, #29
     f30:	e000      	b.n	f34 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     f32:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     f34:	b002      	add	sp, #8
     f36:	bd10      	pop	{r4, pc}
     f38:	200000e0 	.word	0x200000e0
     f3c:	0000154d 	.word	0x0000154d
     f40:	000014c1 	.word	0x000014c1

00000f44 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     f44:	4b44      	ldr	r3, [pc, #272]	; (1058 <_sercom_get_default_pad+0x114>)
     f46:	4298      	cmp	r0, r3
     f48:	d033      	beq.n	fb2 <_sercom_get_default_pad+0x6e>
     f4a:	d806      	bhi.n	f5a <_sercom_get_default_pad+0x16>
     f4c:	4b43      	ldr	r3, [pc, #268]	; (105c <_sercom_get_default_pad+0x118>)
     f4e:	4298      	cmp	r0, r3
     f50:	d00d      	beq.n	f6e <_sercom_get_default_pad+0x2a>
     f52:	4b43      	ldr	r3, [pc, #268]	; (1060 <_sercom_get_default_pad+0x11c>)
     f54:	4298      	cmp	r0, r3
     f56:	d01b      	beq.n	f90 <_sercom_get_default_pad+0x4c>
     f58:	e06f      	b.n	103a <_sercom_get_default_pad+0xf6>
     f5a:	4b42      	ldr	r3, [pc, #264]	; (1064 <_sercom_get_default_pad+0x120>)
     f5c:	4298      	cmp	r0, r3
     f5e:	d04a      	beq.n	ff6 <_sercom_get_default_pad+0xb2>
     f60:	4b41      	ldr	r3, [pc, #260]	; (1068 <_sercom_get_default_pad+0x124>)
     f62:	4298      	cmp	r0, r3
     f64:	d058      	beq.n	1018 <_sercom_get_default_pad+0xd4>
     f66:	4b41      	ldr	r3, [pc, #260]	; (106c <_sercom_get_default_pad+0x128>)
     f68:	4298      	cmp	r0, r3
     f6a:	d166      	bne.n	103a <_sercom_get_default_pad+0xf6>
     f6c:	e032      	b.n	fd4 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f6e:	2901      	cmp	r1, #1
     f70:	d006      	beq.n	f80 <_sercom_get_default_pad+0x3c>
     f72:	2900      	cmp	r1, #0
     f74:	d063      	beq.n	103e <_sercom_get_default_pad+0xfa>
     f76:	2902      	cmp	r1, #2
     f78:	d006      	beq.n	f88 <_sercom_get_default_pad+0x44>
     f7a:	2903      	cmp	r1, #3
     f7c:	d006      	beq.n	f8c <_sercom_get_default_pad+0x48>
     f7e:	e001      	b.n	f84 <_sercom_get_default_pad+0x40>
     f80:	483b      	ldr	r0, [pc, #236]	; (1070 <_sercom_get_default_pad+0x12c>)
     f82:	e067      	b.n	1054 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     f84:	2000      	movs	r0, #0
     f86:	e065      	b.n	1054 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f88:	483a      	ldr	r0, [pc, #232]	; (1074 <_sercom_get_default_pad+0x130>)
     f8a:	e063      	b.n	1054 <_sercom_get_default_pad+0x110>
     f8c:	483a      	ldr	r0, [pc, #232]	; (1078 <_sercom_get_default_pad+0x134>)
     f8e:	e061      	b.n	1054 <_sercom_get_default_pad+0x110>
     f90:	2901      	cmp	r1, #1
     f92:	d006      	beq.n	fa2 <_sercom_get_default_pad+0x5e>
     f94:	2900      	cmp	r1, #0
     f96:	d054      	beq.n	1042 <_sercom_get_default_pad+0xfe>
     f98:	2902      	cmp	r1, #2
     f9a:	d006      	beq.n	faa <_sercom_get_default_pad+0x66>
     f9c:	2903      	cmp	r1, #3
     f9e:	d006      	beq.n	fae <_sercom_get_default_pad+0x6a>
     fa0:	e001      	b.n	fa6 <_sercom_get_default_pad+0x62>
     fa2:	4836      	ldr	r0, [pc, #216]	; (107c <_sercom_get_default_pad+0x138>)
     fa4:	e056      	b.n	1054 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fa6:	2000      	movs	r0, #0
     fa8:	e054      	b.n	1054 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     faa:	4835      	ldr	r0, [pc, #212]	; (1080 <_sercom_get_default_pad+0x13c>)
     fac:	e052      	b.n	1054 <_sercom_get_default_pad+0x110>
     fae:	4835      	ldr	r0, [pc, #212]	; (1084 <_sercom_get_default_pad+0x140>)
     fb0:	e050      	b.n	1054 <_sercom_get_default_pad+0x110>
     fb2:	2901      	cmp	r1, #1
     fb4:	d006      	beq.n	fc4 <_sercom_get_default_pad+0x80>
     fb6:	2900      	cmp	r1, #0
     fb8:	d045      	beq.n	1046 <_sercom_get_default_pad+0x102>
     fba:	2902      	cmp	r1, #2
     fbc:	d006      	beq.n	fcc <_sercom_get_default_pad+0x88>
     fbe:	2903      	cmp	r1, #3
     fc0:	d006      	beq.n	fd0 <_sercom_get_default_pad+0x8c>
     fc2:	e001      	b.n	fc8 <_sercom_get_default_pad+0x84>
     fc4:	4830      	ldr	r0, [pc, #192]	; (1088 <_sercom_get_default_pad+0x144>)
     fc6:	e045      	b.n	1054 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fc8:	2000      	movs	r0, #0
     fca:	e043      	b.n	1054 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fcc:	482f      	ldr	r0, [pc, #188]	; (108c <_sercom_get_default_pad+0x148>)
     fce:	e041      	b.n	1054 <_sercom_get_default_pad+0x110>
     fd0:	482f      	ldr	r0, [pc, #188]	; (1090 <_sercom_get_default_pad+0x14c>)
     fd2:	e03f      	b.n	1054 <_sercom_get_default_pad+0x110>
     fd4:	2901      	cmp	r1, #1
     fd6:	d006      	beq.n	fe6 <_sercom_get_default_pad+0xa2>
     fd8:	2900      	cmp	r1, #0
     fda:	d036      	beq.n	104a <_sercom_get_default_pad+0x106>
     fdc:	2902      	cmp	r1, #2
     fde:	d006      	beq.n	fee <_sercom_get_default_pad+0xaa>
     fe0:	2903      	cmp	r1, #3
     fe2:	d006      	beq.n	ff2 <_sercom_get_default_pad+0xae>
     fe4:	e001      	b.n	fea <_sercom_get_default_pad+0xa6>
     fe6:	482b      	ldr	r0, [pc, #172]	; (1094 <_sercom_get_default_pad+0x150>)
     fe8:	e034      	b.n	1054 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fea:	2000      	movs	r0, #0
     fec:	e032      	b.n	1054 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fee:	482a      	ldr	r0, [pc, #168]	; (1098 <_sercom_get_default_pad+0x154>)
     ff0:	e030      	b.n	1054 <_sercom_get_default_pad+0x110>
     ff2:	482a      	ldr	r0, [pc, #168]	; (109c <_sercom_get_default_pad+0x158>)
     ff4:	e02e      	b.n	1054 <_sercom_get_default_pad+0x110>
     ff6:	2901      	cmp	r1, #1
     ff8:	d006      	beq.n	1008 <_sercom_get_default_pad+0xc4>
     ffa:	2900      	cmp	r1, #0
     ffc:	d027      	beq.n	104e <_sercom_get_default_pad+0x10a>
     ffe:	2902      	cmp	r1, #2
    1000:	d006      	beq.n	1010 <_sercom_get_default_pad+0xcc>
    1002:	2903      	cmp	r1, #3
    1004:	d006      	beq.n	1014 <_sercom_get_default_pad+0xd0>
    1006:	e001      	b.n	100c <_sercom_get_default_pad+0xc8>
    1008:	4825      	ldr	r0, [pc, #148]	; (10a0 <_sercom_get_default_pad+0x15c>)
    100a:	e023      	b.n	1054 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    100c:	2000      	movs	r0, #0
    100e:	e021      	b.n	1054 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1010:	4824      	ldr	r0, [pc, #144]	; (10a4 <_sercom_get_default_pad+0x160>)
    1012:	e01f      	b.n	1054 <_sercom_get_default_pad+0x110>
    1014:	4824      	ldr	r0, [pc, #144]	; (10a8 <_sercom_get_default_pad+0x164>)
    1016:	e01d      	b.n	1054 <_sercom_get_default_pad+0x110>
    1018:	2901      	cmp	r1, #1
    101a:	d006      	beq.n	102a <_sercom_get_default_pad+0xe6>
    101c:	2900      	cmp	r1, #0
    101e:	d018      	beq.n	1052 <_sercom_get_default_pad+0x10e>
    1020:	2902      	cmp	r1, #2
    1022:	d006      	beq.n	1032 <_sercom_get_default_pad+0xee>
    1024:	2903      	cmp	r1, #3
    1026:	d006      	beq.n	1036 <_sercom_get_default_pad+0xf2>
    1028:	e001      	b.n	102e <_sercom_get_default_pad+0xea>
    102a:	4820      	ldr	r0, [pc, #128]	; (10ac <_sercom_get_default_pad+0x168>)
    102c:	e012      	b.n	1054 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    102e:	2000      	movs	r0, #0
    1030:	e010      	b.n	1054 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1032:	481f      	ldr	r0, [pc, #124]	; (10b0 <_sercom_get_default_pad+0x16c>)
    1034:	e00e      	b.n	1054 <_sercom_get_default_pad+0x110>
    1036:	481f      	ldr	r0, [pc, #124]	; (10b4 <_sercom_get_default_pad+0x170>)
    1038:	e00c      	b.n	1054 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    103a:	2000      	movs	r0, #0
    103c:	e00a      	b.n	1054 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    103e:	481e      	ldr	r0, [pc, #120]	; (10b8 <_sercom_get_default_pad+0x174>)
    1040:	e008      	b.n	1054 <_sercom_get_default_pad+0x110>
    1042:	2003      	movs	r0, #3
    1044:	e006      	b.n	1054 <_sercom_get_default_pad+0x110>
    1046:	481d      	ldr	r0, [pc, #116]	; (10bc <_sercom_get_default_pad+0x178>)
    1048:	e004      	b.n	1054 <_sercom_get_default_pad+0x110>
    104a:	481d      	ldr	r0, [pc, #116]	; (10c0 <_sercom_get_default_pad+0x17c>)
    104c:	e002      	b.n	1054 <_sercom_get_default_pad+0x110>
    104e:	481d      	ldr	r0, [pc, #116]	; (10c4 <_sercom_get_default_pad+0x180>)
    1050:	e000      	b.n	1054 <_sercom_get_default_pad+0x110>
    1052:	481d      	ldr	r0, [pc, #116]	; (10c8 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    1054:	4770      	bx	lr
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	42001000 	.word	0x42001000
    105c:	42000800 	.word	0x42000800
    1060:	42000c00 	.word	0x42000c00
    1064:	42001800 	.word	0x42001800
    1068:	42001c00 	.word	0x42001c00
    106c:	42001400 	.word	0x42001400
    1070:	00050003 	.word	0x00050003
    1074:	00060003 	.word	0x00060003
    1078:	00070003 	.word	0x00070003
    107c:	00010003 	.word	0x00010003
    1080:	001e0003 	.word	0x001e0003
    1084:	001f0003 	.word	0x001f0003
    1088:	000d0002 	.word	0x000d0002
    108c:	000e0002 	.word	0x000e0002
    1090:	000f0002 	.word	0x000f0002
    1094:	00110003 	.word	0x00110003
    1098:	00120003 	.word	0x00120003
    109c:	00130003 	.word	0x00130003
    10a0:	003f0005 	.word	0x003f0005
    10a4:	003e0005 	.word	0x003e0005
    10a8:	00520005 	.word	0x00520005
    10ac:	00170003 	.word	0x00170003
    10b0:	00180003 	.word	0x00180003
    10b4:	00190003 	.word	0x00190003
    10b8:	00040003 	.word	0x00040003
    10bc:	000c0002 	.word	0x000c0002
    10c0:	00100003 	.word	0x00100003
    10c4:	00530005 	.word	0x00530005
    10c8:	00160003 	.word	0x00160003

000010cc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    10cc:	b530      	push	{r4, r5, lr}
    10ce:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    10d0:	4b0c      	ldr	r3, [pc, #48]	; (1104 <_sercom_get_sercom_inst_index+0x38>)
    10d2:	466a      	mov	r2, sp
    10d4:	cb32      	ldmia	r3!, {r1, r4, r5}
    10d6:	c232      	stmia	r2!, {r1, r4, r5}
    10d8:	cb32      	ldmia	r3!, {r1, r4, r5}
    10da:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    10dc:	9b00      	ldr	r3, [sp, #0]
    10de:	4283      	cmp	r3, r0
    10e0:	d006      	beq.n	10f0 <_sercom_get_sercom_inst_index+0x24>
    10e2:	2301      	movs	r3, #1
    10e4:	009a      	lsls	r2, r3, #2
    10e6:	4669      	mov	r1, sp
    10e8:	5852      	ldr	r2, [r2, r1]
    10ea:	4282      	cmp	r2, r0
    10ec:	d103      	bne.n	10f6 <_sercom_get_sercom_inst_index+0x2a>
    10ee:	e000      	b.n	10f2 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f0:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    10f2:	b2d8      	uxtb	r0, r3
    10f4:	e003      	b.n	10fe <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f6:	3301      	adds	r3, #1
    10f8:	2b06      	cmp	r3, #6
    10fa:	d1f3      	bne.n	10e4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    10fc:	2000      	movs	r0, #0
}
    10fe:	b007      	add	sp, #28
    1100:	bd30      	pop	{r4, r5, pc}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	000024c0 	.word	0x000024c0

00001108 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1108:	b508      	push	{r3, lr}
	switch (clock_source) {
    110a:	2808      	cmp	r0, #8
    110c:	d803      	bhi.n	1116 <system_clock_source_get_hz+0xe>
    110e:	0080      	lsls	r0, r0, #2
    1110:	4b1b      	ldr	r3, [pc, #108]	; (1180 <system_clock_source_get_hz+0x78>)
    1112:	581b      	ldr	r3, [r3, r0]
    1114:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1116:	2000      	movs	r0, #0
    1118:	e031      	b.n	117e <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    111a:	4b1a      	ldr	r3, [pc, #104]	; (1184 <system_clock_source_get_hz+0x7c>)
    111c:	6918      	ldr	r0, [r3, #16]
    111e:	e02e      	b.n	117e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1120:	4b19      	ldr	r3, [pc, #100]	; (1188 <system_clock_source_get_hz+0x80>)
    1122:	6a18      	ldr	r0, [r3, #32]
    1124:	0580      	lsls	r0, r0, #22
    1126:	0f80      	lsrs	r0, r0, #30
    1128:	4b18      	ldr	r3, [pc, #96]	; (118c <system_clock_source_get_hz+0x84>)
    112a:	40c3      	lsrs	r3, r0
    112c:	1c18      	adds	r0, r3, #0
    112e:	e026      	b.n	117e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1130:	4b14      	ldr	r3, [pc, #80]	; (1184 <system_clock_source_get_hz+0x7c>)
    1132:	6958      	ldr	r0, [r3, #20]
    1134:	e023      	b.n	117e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1136:	4b13      	ldr	r3, [pc, #76]	; (1184 <system_clock_source_get_hz+0x7c>)
    1138:	681b      	ldr	r3, [r3, #0]
    113a:	2002      	movs	r0, #2
    113c:	4018      	ands	r0, r3
    113e:	d01e      	beq.n	117e <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1140:	4911      	ldr	r1, [pc, #68]	; (1188 <system_clock_source_get_hz+0x80>)
    1142:	2210      	movs	r2, #16
    1144:	68cb      	ldr	r3, [r1, #12]
    1146:	421a      	tst	r2, r3
    1148:	d0fc      	beq.n	1144 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    114a:	4b0e      	ldr	r3, [pc, #56]	; (1184 <system_clock_source_get_hz+0x7c>)
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	075b      	lsls	r3, r3, #29
    1150:	d514      	bpl.n	117c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1152:	2000      	movs	r0, #0
    1154:	4b0e      	ldr	r3, [pc, #56]	; (1190 <system_clock_source_get_hz+0x88>)
    1156:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1158:	4b0a      	ldr	r3, [pc, #40]	; (1184 <system_clock_source_get_hz+0x7c>)
    115a:	689b      	ldr	r3, [r3, #8]
    115c:	041b      	lsls	r3, r3, #16
    115e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1160:	4358      	muls	r0, r3
    1162:	e00c      	b.n	117e <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1164:	2350      	movs	r3, #80	; 0x50
    1166:	4a08      	ldr	r2, [pc, #32]	; (1188 <system_clock_source_get_hz+0x80>)
    1168:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    116a:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    116c:	075b      	lsls	r3, r3, #29
    116e:	d506      	bpl.n	117e <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1170:	4b04      	ldr	r3, [pc, #16]	; (1184 <system_clock_source_get_hz+0x7c>)
    1172:	68d8      	ldr	r0, [r3, #12]
    1174:	e003      	b.n	117e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1176:	2080      	movs	r0, #128	; 0x80
    1178:	0200      	lsls	r0, r0, #8
    117a:	e000      	b.n	117e <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    117c:	4805      	ldr	r0, [pc, #20]	; (1194 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    117e:	bd08      	pop	{r3, pc}
    1180:	000024d8 	.word	0x000024d8
    1184:	200000e4 	.word	0x200000e4
    1188:	40000800 	.word	0x40000800
    118c:	007a1200 	.word	0x007a1200
    1190:	00001569 	.word	0x00001569
    1194:	02dc6c00 	.word	0x02dc6c00

00001198 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1198:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    119a:	4c0c      	ldr	r4, [pc, #48]	; (11cc <system_clock_source_osc8m_set_config+0x34>)
    119c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    119e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    11a0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    11a2:	7842      	ldrb	r2, [r0, #1]
    11a4:	2001      	movs	r0, #1
    11a6:	4002      	ands	r2, r0
    11a8:	0192      	lsls	r2, r2, #6
    11aa:	2640      	movs	r6, #64	; 0x40
    11ac:	43b3      	bics	r3, r6
    11ae:	4313      	orrs	r3, r2
    11b0:	1c02      	adds	r2, r0, #0
    11b2:	402a      	ands	r2, r5
    11b4:	01d2      	lsls	r2, r2, #7
    11b6:	307f      	adds	r0, #127	; 0x7f
    11b8:	4383      	bics	r3, r0
    11ba:	4313      	orrs	r3, r2
    11bc:	2203      	movs	r2, #3
    11be:	400a      	ands	r2, r1
    11c0:	0212      	lsls	r2, r2, #8
    11c2:	4903      	ldr	r1, [pc, #12]	; (11d0 <system_clock_source_osc8m_set_config+0x38>)
    11c4:	400b      	ands	r3, r1
    11c6:	4313      	orrs	r3, r2
    11c8:	6223      	str	r3, [r4, #32]
}
    11ca:	bd70      	pop	{r4, r5, r6, pc}
    11cc:	40000800 	.word	0x40000800
    11d0:	fffffcff 	.word	0xfffffcff

000011d4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    11d4:	2808      	cmp	r0, #8
    11d6:	d803      	bhi.n	11e0 <system_clock_source_enable+0xc>
    11d8:	0080      	lsls	r0, r0, #2
    11da:	4b25      	ldr	r3, [pc, #148]	; (1270 <system_clock_source_enable+0x9c>)
    11dc:	581b      	ldr	r3, [r3, r0]
    11de:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    11e0:	2017      	movs	r0, #23
    11e2:	e044      	b.n	126e <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    11e4:	4a23      	ldr	r2, [pc, #140]	; (1274 <system_clock_source_enable+0xa0>)
    11e6:	6a11      	ldr	r1, [r2, #32]
    11e8:	2302      	movs	r3, #2
    11ea:	430b      	orrs	r3, r1
    11ec:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    11ee:	2000      	movs	r0, #0
    11f0:	e03d      	b.n	126e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    11f2:	4a20      	ldr	r2, [pc, #128]	; (1274 <system_clock_source_enable+0xa0>)
    11f4:	6991      	ldr	r1, [r2, #24]
    11f6:	2302      	movs	r3, #2
    11f8:	430b      	orrs	r3, r1
    11fa:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11fc:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    11fe:	e036      	b.n	126e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1200:	4a1c      	ldr	r2, [pc, #112]	; (1274 <system_clock_source_enable+0xa0>)
    1202:	8a11      	ldrh	r1, [r2, #16]
    1204:	2302      	movs	r3, #2
    1206:	430b      	orrs	r3, r1
    1208:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    120a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    120c:	e02f      	b.n	126e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    120e:	4a19      	ldr	r2, [pc, #100]	; (1274 <system_clock_source_enable+0xa0>)
    1210:	8a91      	ldrh	r1, [r2, #20]
    1212:	2302      	movs	r3, #2
    1214:	430b      	orrs	r3, r1
    1216:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1218:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    121a:	e028      	b.n	126e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    121c:	4916      	ldr	r1, [pc, #88]	; (1278 <system_clock_source_enable+0xa4>)
    121e:	680b      	ldr	r3, [r1, #0]
    1220:	2202      	movs	r2, #2
    1222:	4313      	orrs	r3, r2
    1224:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1226:	4b13      	ldr	r3, [pc, #76]	; (1274 <system_clock_source_enable+0xa0>)
    1228:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    122a:	1c19      	adds	r1, r3, #0
    122c:	320e      	adds	r2, #14
    122e:	68cb      	ldr	r3, [r1, #12]
    1230:	421a      	tst	r2, r3
    1232:	d0fc      	beq.n	122e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1234:	4a10      	ldr	r2, [pc, #64]	; (1278 <system_clock_source_enable+0xa4>)
    1236:	6891      	ldr	r1, [r2, #8]
    1238:	4b0e      	ldr	r3, [pc, #56]	; (1274 <system_clock_source_enable+0xa0>)
    123a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    123c:	6852      	ldr	r2, [r2, #4]
    123e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1240:	2200      	movs	r2, #0
    1242:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1244:	1c19      	adds	r1, r3, #0
    1246:	3210      	adds	r2, #16
    1248:	68cb      	ldr	r3, [r1, #12]
    124a:	421a      	tst	r2, r3
    124c:	d0fc      	beq.n	1248 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    124e:	4b0a      	ldr	r3, [pc, #40]	; (1278 <system_clock_source_enable+0xa4>)
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	b29b      	uxth	r3, r3
    1254:	4a07      	ldr	r2, [pc, #28]	; (1274 <system_clock_source_enable+0xa0>)
    1256:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1258:	2000      	movs	r0, #0
    125a:	e008      	b.n	126e <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    125c:	4905      	ldr	r1, [pc, #20]	; (1274 <system_clock_source_enable+0xa0>)
    125e:	2244      	movs	r2, #68	; 0x44
    1260:	5c88      	ldrb	r0, [r1, r2]
    1262:	2302      	movs	r3, #2
    1264:	4303      	orrs	r3, r0
    1266:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1268:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    126a:	e000      	b.n	126e <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    126c:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    126e:	4770      	bx	lr
    1270:	000024fc 	.word	0x000024fc
    1274:	40000800 	.word	0x40000800
    1278:	200000e4 	.word	0x200000e4

0000127c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    127c:	b530      	push	{r4, r5, lr}
    127e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1280:	22c2      	movs	r2, #194	; 0xc2
    1282:	00d2      	lsls	r2, r2, #3
    1284:	4b1a      	ldr	r3, [pc, #104]	; (12f0 <system_clock_init+0x74>)
    1286:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1288:	4a1a      	ldr	r2, [pc, #104]	; (12f4 <system_clock_init+0x78>)
    128a:	6853      	ldr	r3, [r2, #4]
    128c:	211e      	movs	r1, #30
    128e:	438b      	bics	r3, r1
    1290:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1292:	2301      	movs	r3, #1
    1294:	466a      	mov	r2, sp
    1296:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1298:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    129a:	4d17      	ldr	r5, [pc, #92]	; (12f8 <system_clock_init+0x7c>)
    129c:	b2e0      	uxtb	r0, r4
    129e:	4669      	mov	r1, sp
    12a0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12a2:	3401      	adds	r4, #1
    12a4:	2c25      	cmp	r4, #37	; 0x25
    12a6:	d1f9      	bne.n	129c <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    12a8:	a803      	add	r0, sp, #12
    12aa:	2400      	movs	r4, #0
    12ac:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    12ae:	2501      	movs	r5, #1
    12b0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    12b2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    12b4:	4b11      	ldr	r3, [pc, #68]	; (12fc <system_clock_init+0x80>)
    12b6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    12b8:	2006      	movs	r0, #6
    12ba:	4b11      	ldr	r3, [pc, #68]	; (1300 <system_clock_init+0x84>)
    12bc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    12be:	4b11      	ldr	r3, [pc, #68]	; (1304 <system_clock_init+0x88>)
    12c0:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    12c2:	4b11      	ldr	r3, [pc, #68]	; (1308 <system_clock_init+0x8c>)
    12c4:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    12c6:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    12c8:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    12ca:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    12cc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    12ce:	466b      	mov	r3, sp
    12d0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    12d2:	2306      	movs	r3, #6
    12d4:	466a      	mov	r2, sp
    12d6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    12d8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    12da:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    12dc:	2000      	movs	r0, #0
    12de:	4669      	mov	r1, sp
    12e0:	4b0a      	ldr	r3, [pc, #40]	; (130c <system_clock_init+0x90>)
    12e2:	4798      	blx	r3
    12e4:	2000      	movs	r0, #0
    12e6:	4b0a      	ldr	r3, [pc, #40]	; (1310 <system_clock_init+0x94>)
    12e8:	4798      	blx	r3
#endif
}
    12ea:	b005      	add	sp, #20
    12ec:	bd30      	pop	{r4, r5, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	40000800 	.word	0x40000800
    12f4:	41004000 	.word	0x41004000
    12f8:	0000154d 	.word	0x0000154d
    12fc:	00001199 	.word	0x00001199
    1300:	000011d5 	.word	0x000011d5
    1304:	00001315 	.word	0x00001315
    1308:	40000400 	.word	0x40000400
    130c:	00001339 	.word	0x00001339
    1310:	000013f1 	.word	0x000013f1

00001314 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1314:	4a06      	ldr	r2, [pc, #24]	; (1330 <system_gclk_init+0x1c>)
    1316:	6991      	ldr	r1, [r2, #24]
    1318:	2308      	movs	r3, #8
    131a:	430b      	orrs	r3, r1
    131c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    131e:	2201      	movs	r2, #1
    1320:	4b04      	ldr	r3, [pc, #16]	; (1334 <system_gclk_init+0x20>)
    1322:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1324:	1c19      	adds	r1, r3, #0
    1326:	780b      	ldrb	r3, [r1, #0]
    1328:	4213      	tst	r3, r2
    132a:	d1fc      	bne.n	1326 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    132c:	4770      	bx	lr
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	40000400 	.word	0x40000400
    1334:	40000c00 	.word	0x40000c00

00001338 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1338:	b570      	push	{r4, r5, r6, lr}
    133a:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    133c:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    133e:	780d      	ldrb	r5, [r1, #0]
    1340:	022d      	lsls	r5, r5, #8
    1342:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1344:	784b      	ldrb	r3, [r1, #1]
    1346:	2b00      	cmp	r3, #0
    1348:	d002      	beq.n	1350 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    134a:	2380      	movs	r3, #128	; 0x80
    134c:	02db      	lsls	r3, r3, #11
    134e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1350:	7a4b      	ldrb	r3, [r1, #9]
    1352:	2b00      	cmp	r3, #0
    1354:	d002      	beq.n	135c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1356:	2380      	movs	r3, #128	; 0x80
    1358:	031b      	lsls	r3, r3, #12
    135a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    135c:	6848      	ldr	r0, [r1, #4]
    135e:	2801      	cmp	r0, #1
    1360:	d918      	bls.n	1394 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1362:	1e43      	subs	r3, r0, #1
    1364:	4218      	tst	r0, r3
    1366:	d110      	bne.n	138a <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1368:	2802      	cmp	r0, #2
    136a:	d906      	bls.n	137a <system_gclk_gen_set_config+0x42>
    136c:	2302      	movs	r3, #2
    136e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1370:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1372:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1374:	4298      	cmp	r0, r3
    1376:	d8fb      	bhi.n	1370 <system_gclk_gen_set_config+0x38>
    1378:	e000      	b.n	137c <system_gclk_gen_set_config+0x44>
    137a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    137c:	0212      	lsls	r2, r2, #8
    137e:	4332      	orrs	r2, r6
    1380:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1382:	2380      	movs	r3, #128	; 0x80
    1384:	035b      	lsls	r3, r3, #13
    1386:	431d      	orrs	r5, r3
    1388:	e004      	b.n	1394 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    138a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    138c:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    138e:	2380      	movs	r3, #128	; 0x80
    1390:	029b      	lsls	r3, r3, #10
    1392:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1394:	7a0b      	ldrb	r3, [r1, #8]
    1396:	2b00      	cmp	r3, #0
    1398:	d002      	beq.n	13a0 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    139a:	2380      	movs	r3, #128	; 0x80
    139c:	039b      	lsls	r3, r3, #14
    139e:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13a0:	4a0f      	ldr	r2, [pc, #60]	; (13e0 <system_gclk_gen_set_config+0xa8>)
    13a2:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    13a4:	b25b      	sxtb	r3, r3
    13a6:	2b00      	cmp	r3, #0
    13a8:	dbfb      	blt.n	13a2 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13aa:	4b0e      	ldr	r3, [pc, #56]	; (13e4 <system_gclk_gen_set_config+0xac>)
    13ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13ae:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <system_gclk_gen_set_config+0xb0>)
    13b0:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13b2:	4a0b      	ldr	r2, [pc, #44]	; (13e0 <system_gclk_gen_set_config+0xa8>)
    13b4:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    13b6:	b25b      	sxtb	r3, r3
    13b8:	2b00      	cmp	r3, #0
    13ba:	dbfb      	blt.n	13b4 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    13bc:	4b08      	ldr	r3, [pc, #32]	; (13e0 <system_gclk_gen_set_config+0xa8>)
    13be:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13c0:	1c1a      	adds	r2, r3, #0
    13c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    13c4:	b25b      	sxtb	r3, r3
    13c6:	2b00      	cmp	r3, #0
    13c8:	dbfb      	blt.n	13c2 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    13ca:	4a05      	ldr	r2, [pc, #20]	; (13e0 <system_gclk_gen_set_config+0xa8>)
    13cc:	6851      	ldr	r1, [r2, #4]
    13ce:	2380      	movs	r3, #128	; 0x80
    13d0:	025b      	lsls	r3, r3, #9
    13d2:	400b      	ands	r3, r1
    13d4:	431d      	orrs	r5, r3
    13d6:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13d8:	4b04      	ldr	r3, [pc, #16]	; (13ec <system_gclk_gen_set_config+0xb4>)
    13da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13dc:	bd70      	pop	{r4, r5, r6, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	40000c00 	.word	0x40000c00
    13e4:	00000c3d 	.word	0x00000c3d
    13e8:	40000c08 	.word	0x40000c08
    13ec:	00000c7d 	.word	0x00000c7d

000013f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    13f0:	b510      	push	{r4, lr}
    13f2:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13f4:	4a0b      	ldr	r2, [pc, #44]	; (1424 <system_gclk_gen_enable+0x34>)
    13f6:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    13f8:	b25b      	sxtb	r3, r3
    13fa:	2b00      	cmp	r3, #0
    13fc:	dbfb      	blt.n	13f6 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13fe:	4b0a      	ldr	r3, [pc, #40]	; (1428 <system_gclk_gen_enable+0x38>)
    1400:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1402:	4b0a      	ldr	r3, [pc, #40]	; (142c <system_gclk_gen_enable+0x3c>)
    1404:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1406:	4a07      	ldr	r2, [pc, #28]	; (1424 <system_gclk_gen_enable+0x34>)
    1408:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    140a:	b25b      	sxtb	r3, r3
    140c:	2b00      	cmp	r3, #0
    140e:	dbfb      	blt.n	1408 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1410:	4a04      	ldr	r2, [pc, #16]	; (1424 <system_gclk_gen_enable+0x34>)
    1412:	6853      	ldr	r3, [r2, #4]
    1414:	2180      	movs	r1, #128	; 0x80
    1416:	0249      	lsls	r1, r1, #9
    1418:	430b      	orrs	r3, r1
    141a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    141c:	4b04      	ldr	r3, [pc, #16]	; (1430 <system_gclk_gen_enable+0x40>)
    141e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1420:	bd10      	pop	{r4, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	40000c00 	.word	0x40000c00
    1428:	00000c3d 	.word	0x00000c3d
    142c:	40000c04 	.word	0x40000c04
    1430:	00000c7d 	.word	0x00000c7d

00001434 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1434:	b570      	push	{r4, r5, r6, lr}
    1436:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1438:	4a1a      	ldr	r2, [pc, #104]	; (14a4 <system_gclk_gen_get_hz+0x70>)
    143a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    143c:	b25b      	sxtb	r3, r3
    143e:	2b00      	cmp	r3, #0
    1440:	dbfb      	blt.n	143a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1442:	4b19      	ldr	r3, [pc, #100]	; (14a8 <system_gclk_gen_get_hz+0x74>)
    1444:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1446:	4b19      	ldr	r3, [pc, #100]	; (14ac <system_gclk_gen_get_hz+0x78>)
    1448:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    144a:	4a16      	ldr	r2, [pc, #88]	; (14a4 <system_gclk_gen_get_hz+0x70>)
    144c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    144e:	b25b      	sxtb	r3, r3
    1450:	2b00      	cmp	r3, #0
    1452:	dbfb      	blt.n	144c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1454:	4e13      	ldr	r6, [pc, #76]	; (14a4 <system_gclk_gen_get_hz+0x70>)
    1456:	6870      	ldr	r0, [r6, #4]
    1458:	04c0      	lsls	r0, r0, #19
    145a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    145c:	4b14      	ldr	r3, [pc, #80]	; (14b0 <system_gclk_gen_get_hz+0x7c>)
    145e:	4798      	blx	r3
    1460:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1462:	4b12      	ldr	r3, [pc, #72]	; (14ac <system_gclk_gen_get_hz+0x78>)
    1464:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1466:	6876      	ldr	r6, [r6, #4]
    1468:	02f6      	lsls	r6, r6, #11
    146a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    146c:	4b11      	ldr	r3, [pc, #68]	; (14b4 <system_gclk_gen_get_hz+0x80>)
    146e:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1470:	4a0c      	ldr	r2, [pc, #48]	; (14a4 <system_gclk_gen_get_hz+0x70>)
    1472:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1474:	b25b      	sxtb	r3, r3
    1476:	2b00      	cmp	r3, #0
    1478:	dbfb      	blt.n	1472 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    147a:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <system_gclk_gen_get_hz+0x70>)
    147c:	689c      	ldr	r4, [r3, #8]
    147e:	0a24      	lsrs	r4, r4, #8
    1480:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1482:	4b0d      	ldr	r3, [pc, #52]	; (14b8 <system_gclk_gen_get_hz+0x84>)
    1484:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1486:	2e00      	cmp	r6, #0
    1488:	d107      	bne.n	149a <system_gclk_gen_get_hz+0x66>
    148a:	2c01      	cmp	r4, #1
    148c:	d907      	bls.n	149e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    148e:	1c28      	adds	r0, r5, #0
    1490:	1c21      	adds	r1, r4, #0
    1492:	4b0a      	ldr	r3, [pc, #40]	; (14bc <system_gclk_gen_get_hz+0x88>)
    1494:	4798      	blx	r3
    1496:	1c05      	adds	r5, r0, #0
    1498:	e001      	b.n	149e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    149a:	3401      	adds	r4, #1
    149c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    149e:	1c28      	adds	r0, r5, #0
    14a0:	bd70      	pop	{r4, r5, r6, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	40000c00 	.word	0x40000c00
    14a8:	00000c3d 	.word	0x00000c3d
    14ac:	40000c04 	.word	0x40000c04
    14b0:	00001109 	.word	0x00001109
    14b4:	40000c08 	.word	0x40000c08
    14b8:	00000c7d 	.word	0x00000c7d
    14bc:	000018c5 	.word	0x000018c5

000014c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    14c0:	b510      	push	{r4, lr}
    14c2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14c4:	4b06      	ldr	r3, [pc, #24]	; (14e0 <system_gclk_chan_enable+0x20>)
    14c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14c8:	4b06      	ldr	r3, [pc, #24]	; (14e4 <system_gclk_chan_enable+0x24>)
    14ca:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    14cc:	4a06      	ldr	r2, [pc, #24]	; (14e8 <system_gclk_chan_enable+0x28>)
    14ce:	8851      	ldrh	r1, [r2, #2]
    14d0:	2380      	movs	r3, #128	; 0x80
    14d2:	01db      	lsls	r3, r3, #7
    14d4:	430b      	orrs	r3, r1
    14d6:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14d8:	4b04      	ldr	r3, [pc, #16]	; (14ec <system_gclk_chan_enable+0x2c>)
    14da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14dc:	bd10      	pop	{r4, pc}
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	00000c3d 	.word	0x00000c3d
    14e4:	40000c02 	.word	0x40000c02
    14e8:	40000c00 	.word	0x40000c00
    14ec:	00000c7d 	.word	0x00000c7d

000014f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    14f0:	b510      	push	{r4, lr}
    14f2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14f4:	4b0f      	ldr	r3, [pc, #60]	; (1534 <system_gclk_chan_disable+0x44>)
    14f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14f8:	4b0f      	ldr	r3, [pc, #60]	; (1538 <system_gclk_chan_disable+0x48>)
    14fa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    14fc:	4b0f      	ldr	r3, [pc, #60]	; (153c <system_gclk_chan_disable+0x4c>)
    14fe:	885a      	ldrh	r2, [r3, #2]
    1500:	0512      	lsls	r2, r2, #20
    1502:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1504:	8859      	ldrh	r1, [r3, #2]
    1506:	4a0e      	ldr	r2, [pc, #56]	; (1540 <system_gclk_chan_disable+0x50>)
    1508:	400a      	ands	r2, r1
    150a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    150c:	8859      	ldrh	r1, [r3, #2]
    150e:	4a0d      	ldr	r2, [pc, #52]	; (1544 <system_gclk_chan_disable+0x54>)
    1510:	400a      	ands	r2, r1
    1512:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1514:	1c19      	adds	r1, r3, #0
    1516:	2280      	movs	r2, #128	; 0x80
    1518:	01d2      	lsls	r2, r2, #7
    151a:	884b      	ldrh	r3, [r1, #2]
    151c:	4213      	tst	r3, r2
    151e:	d1fc      	bne.n	151a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1520:	4906      	ldr	r1, [pc, #24]	; (153c <system_gclk_chan_disable+0x4c>)
    1522:	0202      	lsls	r2, r0, #8
    1524:	8848      	ldrh	r0, [r1, #2]
    1526:	4b06      	ldr	r3, [pc, #24]	; (1540 <system_gclk_chan_disable+0x50>)
    1528:	4003      	ands	r3, r0
    152a:	4313      	orrs	r3, r2
    152c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    152e:	4b06      	ldr	r3, [pc, #24]	; (1548 <system_gclk_chan_disable+0x58>)
    1530:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1532:	bd10      	pop	{r4, pc}
    1534:	00000c3d 	.word	0x00000c3d
    1538:	40000c02 	.word	0x40000c02
    153c:	40000c00 	.word	0x40000c00
    1540:	fffff0ff 	.word	0xfffff0ff
    1544:	ffffbfff 	.word	0xffffbfff
    1548:	00000c7d 	.word	0x00000c7d

0000154c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    154c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    154e:	780c      	ldrb	r4, [r1, #0]
    1550:	0224      	lsls	r4, r4, #8
    1552:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1554:	4b02      	ldr	r3, [pc, #8]	; (1560 <system_gclk_chan_set_config+0x14>)
    1556:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1558:	b2a4      	uxth	r4, r4
    155a:	4b02      	ldr	r3, [pc, #8]	; (1564 <system_gclk_chan_set_config+0x18>)
    155c:	805c      	strh	r4, [r3, #2]
}
    155e:	bd10      	pop	{r4, pc}
    1560:	000014f1 	.word	0x000014f1
    1564:	40000c00 	.word	0x40000c00

00001568 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1568:	b510      	push	{r4, lr}
    156a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    156c:	4b06      	ldr	r3, [pc, #24]	; (1588 <system_gclk_chan_get_hz+0x20>)
    156e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1570:	4b06      	ldr	r3, [pc, #24]	; (158c <system_gclk_chan_get_hz+0x24>)
    1572:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1574:	4b06      	ldr	r3, [pc, #24]	; (1590 <system_gclk_chan_get_hz+0x28>)
    1576:	885c      	ldrh	r4, [r3, #2]
    1578:	0524      	lsls	r4, r4, #20
    157a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    157c:	4b05      	ldr	r3, [pc, #20]	; (1594 <system_gclk_chan_get_hz+0x2c>)
    157e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1580:	1c20      	adds	r0, r4, #0
    1582:	4b05      	ldr	r3, [pc, #20]	; (1598 <system_gclk_chan_get_hz+0x30>)
    1584:	4798      	blx	r3
}
    1586:	bd10      	pop	{r4, pc}
    1588:	00000c3d 	.word	0x00000c3d
    158c:	40000c02 	.word	0x40000c02
    1590:	40000c00 	.word	0x40000c00
    1594:	00000c7d 	.word	0x00000c7d
    1598:	00001435 	.word	0x00001435

0000159c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    159c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    159e:	78d3      	ldrb	r3, [r2, #3]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d11e      	bne.n	15e2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    15a4:	7814      	ldrb	r4, [r2, #0]
    15a6:	2c80      	cmp	r4, #128	; 0x80
    15a8:	d004      	beq.n	15b4 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    15aa:	0624      	lsls	r4, r4, #24
    15ac:	2380      	movs	r3, #128	; 0x80
    15ae:	025b      	lsls	r3, r3, #9
    15b0:	431c      	orrs	r4, r3
    15b2:	e000      	b.n	15b6 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    15b4:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    15b6:	7853      	ldrb	r3, [r2, #1]
    15b8:	2502      	movs	r5, #2
    15ba:	43ab      	bics	r3, r5
    15bc:	d10a      	bne.n	15d4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    15be:	7893      	ldrb	r3, [r2, #2]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d103      	bne.n	15cc <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    15c4:	2380      	movs	r3, #128	; 0x80
    15c6:	029b      	lsls	r3, r3, #10
    15c8:	431c      	orrs	r4, r3
    15ca:	e002      	b.n	15d2 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    15cc:	23c0      	movs	r3, #192	; 0xc0
    15ce:	02db      	lsls	r3, r3, #11
    15d0:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    15d2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15d4:	7853      	ldrb	r3, [r2, #1]
    15d6:	3b01      	subs	r3, #1
    15d8:	2b01      	cmp	r3, #1
    15da:	d812      	bhi.n	1602 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15dc:	4b18      	ldr	r3, [pc, #96]	; (1640 <_system_pinmux_config+0xa4>)
    15de:	401c      	ands	r4, r3
    15e0:	e00f      	b.n	1602 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    15e2:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15e4:	040b      	lsls	r3, r1, #16
    15e6:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15e8:	24a0      	movs	r4, #160	; 0xa0
    15ea:	05e4      	lsls	r4, r4, #23
    15ec:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15ee:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15f0:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15f2:	24d0      	movs	r4, #208	; 0xd0
    15f4:	0624      	lsls	r4, r4, #24
    15f6:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15f8:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15fa:	78d3      	ldrb	r3, [r2, #3]
    15fc:	2b00      	cmp	r3, #0
    15fe:	d018      	beq.n	1632 <_system_pinmux_config+0x96>
    1600:	e01c      	b.n	163c <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1602:	040b      	lsls	r3, r1, #16
    1604:	0c1b      	lsrs	r3, r3, #16
    1606:	25a0      	movs	r5, #160	; 0xa0
    1608:	05ed      	lsls	r5, r5, #23
    160a:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    160c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    160e:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1610:	0c0b      	lsrs	r3, r1, #16
    1612:	25d0      	movs	r5, #208	; 0xd0
    1614:	062d      	lsls	r5, r5, #24
    1616:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1618:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    161a:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    161c:	78d3      	ldrb	r3, [r2, #3]
    161e:	2b00      	cmp	r3, #0
    1620:	d10c      	bne.n	163c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1622:	0363      	lsls	r3, r4, #13
    1624:	d505      	bpl.n	1632 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1626:	7893      	ldrb	r3, [r2, #2]
    1628:	2b01      	cmp	r3, #1
    162a:	d101      	bne.n	1630 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    162c:	6181      	str	r1, [r0, #24]
    162e:	e000      	b.n	1632 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1630:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1632:	7853      	ldrb	r3, [r2, #1]
    1634:	3b01      	subs	r3, #1
    1636:	2b01      	cmp	r3, #1
    1638:	d800      	bhi.n	163c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    163a:	6081      	str	r1, [r0, #8]
		}
	}
}
    163c:	bd30      	pop	{r4, r5, pc}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	fffbffff 	.word	0xfffbffff

00001644 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1644:	b508      	push	{r3, lr}
    1646:	1c03      	adds	r3, r0, #0
    1648:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    164a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    164c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    164e:	2900      	cmp	r1, #0
    1650:	d104      	bne.n	165c <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1652:	0958      	lsrs	r0, r3, #5
    1654:	01c0      	lsls	r0, r0, #7
    1656:	4905      	ldr	r1, [pc, #20]	; (166c <system_pinmux_pin_set_config+0x28>)
    1658:	468c      	mov	ip, r1
    165a:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    165c:	211f      	movs	r1, #31
    165e:	400b      	ands	r3, r1
    1660:	391e      	subs	r1, #30
    1662:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1664:	4b02      	ldr	r3, [pc, #8]	; (1670 <system_pinmux_pin_set_config+0x2c>)
    1666:	4798      	blx	r3
}
    1668:	bd08      	pop	{r3, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	41004400 	.word	0x41004400
    1670:	0000159d 	.word	0x0000159d

00001674 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1674:	4770      	bx	lr
    1676:	46c0      	nop			; (mov r8, r8)

00001678 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1678:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <system_init+0x18>)
    167c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    167e:	4b05      	ldr	r3, [pc, #20]	; (1694 <system_init+0x1c>)
    1680:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1682:	4b05      	ldr	r3, [pc, #20]	; (1698 <system_init+0x20>)
    1684:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1686:	4b05      	ldr	r3, [pc, #20]	; (169c <system_init+0x24>)
    1688:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    168a:	4b05      	ldr	r3, [pc, #20]	; (16a0 <system_init+0x28>)
    168c:	4798      	blx	r3
}
    168e:	bd08      	pop	{r3, pc}
    1690:	0000127d 	.word	0x0000127d
    1694:	00000cad 	.word	0x00000cad
    1698:	00001675 	.word	0x00001675
    169c:	00001675 	.word	0x00001675
    16a0:	00001675 	.word	0x00001675

000016a4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    16a4:	e7fe      	b.n	16a4 <Dummy_Handler>
    16a6:	46c0      	nop			; (mov r8, r8)

000016a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    16a8:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    16aa:	4b2e      	ldr	r3, [pc, #184]	; (1764 <Reset_Handler+0xbc>)
    16ac:	4a2e      	ldr	r2, [pc, #184]	; (1768 <Reset_Handler+0xc0>)
    16ae:	429a      	cmp	r2, r3
    16b0:	d003      	beq.n	16ba <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    16b2:	4b2e      	ldr	r3, [pc, #184]	; (176c <Reset_Handler+0xc4>)
    16b4:	4a2b      	ldr	r2, [pc, #172]	; (1764 <Reset_Handler+0xbc>)
    16b6:	429a      	cmp	r2, r3
    16b8:	d304      	bcc.n	16c4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16ba:	4b2d      	ldr	r3, [pc, #180]	; (1770 <Reset_Handler+0xc8>)
    16bc:	4a2d      	ldr	r2, [pc, #180]	; (1774 <Reset_Handler+0xcc>)
    16be:	429a      	cmp	r2, r3
    16c0:	d310      	bcc.n	16e4 <Reset_Handler+0x3c>
    16c2:	e01e      	b.n	1702 <Reset_Handler+0x5a>
    16c4:	4a2c      	ldr	r2, [pc, #176]	; (1778 <Reset_Handler+0xd0>)
    16c6:	4b29      	ldr	r3, [pc, #164]	; (176c <Reset_Handler+0xc4>)
    16c8:	3303      	adds	r3, #3
    16ca:	1a9b      	subs	r3, r3, r2
    16cc:	089b      	lsrs	r3, r3, #2
    16ce:	3301      	adds	r3, #1
    16d0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    16d2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    16d4:	4823      	ldr	r0, [pc, #140]	; (1764 <Reset_Handler+0xbc>)
    16d6:	4924      	ldr	r1, [pc, #144]	; (1768 <Reset_Handler+0xc0>)
    16d8:	588c      	ldr	r4, [r1, r2]
    16da:	5084      	str	r4, [r0, r2]
    16dc:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    16de:	429a      	cmp	r2, r3
    16e0:	d1fa      	bne.n	16d8 <Reset_Handler+0x30>
    16e2:	e7ea      	b.n	16ba <Reset_Handler+0x12>
    16e4:	4a25      	ldr	r2, [pc, #148]	; (177c <Reset_Handler+0xd4>)
    16e6:	4b22      	ldr	r3, [pc, #136]	; (1770 <Reset_Handler+0xc8>)
    16e8:	3303      	adds	r3, #3
    16ea:	1a9b      	subs	r3, r3, r2
    16ec:	089b      	lsrs	r3, r3, #2
    16ee:	3301      	adds	r3, #1
    16f0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16f2:	2200      	movs	r2, #0
                *pDest++ = 0;
    16f4:	481f      	ldr	r0, [pc, #124]	; (1774 <Reset_Handler+0xcc>)
    16f6:	2100      	movs	r1, #0
    16f8:	1814      	adds	r4, r2, r0
    16fa:	6021      	str	r1, [r4, #0]
    16fc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16fe:	429a      	cmp	r2, r3
    1700:	d1fa      	bne.n	16f8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1702:	4a1f      	ldr	r2, [pc, #124]	; (1780 <Reset_Handler+0xd8>)
    1704:	21ff      	movs	r1, #255	; 0xff
    1706:	4b1f      	ldr	r3, [pc, #124]	; (1784 <Reset_Handler+0xdc>)
    1708:	438b      	bics	r3, r1
    170a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    170c:	39fd      	subs	r1, #253	; 0xfd
    170e:	2390      	movs	r3, #144	; 0x90
    1710:	005b      	lsls	r3, r3, #1
    1712:	4a1d      	ldr	r2, [pc, #116]	; (1788 <Reset_Handler+0xe0>)
    1714:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1716:	481d      	ldr	r0, [pc, #116]	; (178c <Reset_Handler+0xe4>)
    1718:	78c3      	ldrb	r3, [r0, #3]
    171a:	2403      	movs	r4, #3
    171c:	43a3      	bics	r3, r4
    171e:	2202      	movs	r2, #2
    1720:	4313      	orrs	r3, r2
    1722:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1724:	78c3      	ldrb	r3, [r0, #3]
    1726:	260c      	movs	r6, #12
    1728:	43b3      	bics	r3, r6
    172a:	2108      	movs	r1, #8
    172c:	430b      	orrs	r3, r1
    172e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1730:	4b17      	ldr	r3, [pc, #92]	; (1790 <Reset_Handler+0xe8>)
    1732:	7b98      	ldrb	r0, [r3, #14]
    1734:	2530      	movs	r5, #48	; 0x30
    1736:	43a8      	bics	r0, r5
    1738:	1c05      	adds	r5, r0, #0
    173a:	2020      	movs	r0, #32
    173c:	4328      	orrs	r0, r5
    173e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1740:	7b98      	ldrb	r0, [r3, #14]
    1742:	43b0      	bics	r0, r6
    1744:	4301      	orrs	r1, r0
    1746:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1748:	7b99      	ldrb	r1, [r3, #14]
    174a:	43a1      	bics	r1, r4
    174c:	430a      	orrs	r2, r1
    174e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1750:	4a10      	ldr	r2, [pc, #64]	; (1794 <Reset_Handler+0xec>)
    1752:	6851      	ldr	r1, [r2, #4]
    1754:	2380      	movs	r3, #128	; 0x80
    1756:	430b      	orrs	r3, r1
    1758:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    175a:	4b0f      	ldr	r3, [pc, #60]	; (1798 <Reset_Handler+0xf0>)
    175c:	4798      	blx	r3

        /* Branch to main function */
        main();
    175e:	4b0f      	ldr	r3, [pc, #60]	; (179c <Reset_Handler+0xf4>)
    1760:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1762:	e7fe      	b.n	1762 <Reset_Handler+0xba>
    1764:	20000000 	.word	0x20000000
    1768:	000025a8 	.word	0x000025a8
    176c:	20000068 	.word	0x20000068
    1770:	20000d34 	.word	0x20000d34
    1774:	20000068 	.word	0x20000068
    1778:	20000004 	.word	0x20000004
    177c:	2000006c 	.word	0x2000006c
    1780:	e000ed00 	.word	0xe000ed00
    1784:	00000000 	.word	0x00000000
    1788:	41007000 	.word	0x41007000
    178c:	41005000 	.word	0x41005000
    1790:	41004800 	.word	0x41004800
    1794:	41004000 	.word	0x41004000
    1798:	00001a3d 	.word	0x00001a3d
    179c:	000017f9 	.word	0x000017f9

000017a0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    17a0:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    17a2:	4a06      	ldr	r2, [pc, #24]	; (17bc <_sbrk+0x1c>)
    17a4:	6812      	ldr	r2, [r2, #0]
    17a6:	2a00      	cmp	r2, #0
    17a8:	d102      	bne.n	17b0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    17aa:	4905      	ldr	r1, [pc, #20]	; (17c0 <_sbrk+0x20>)
    17ac:	4a03      	ldr	r2, [pc, #12]	; (17bc <_sbrk+0x1c>)
    17ae:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    17b0:	4a02      	ldr	r2, [pc, #8]	; (17bc <_sbrk+0x1c>)
    17b2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    17b4:	18c3      	adds	r3, r0, r3
    17b6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    17b8:	4770      	bx	lr
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	200000fc 	.word	0x200000fc
    17c0:	20002d38 	.word	0x20002d38

000017c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    17c4:	2001      	movs	r0, #1
    17c6:	4240      	negs	r0, r0
    17c8:	4770      	bx	lr
    17ca:	46c0      	nop			; (mov r8, r8)

000017cc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    17cc:	2380      	movs	r3, #128	; 0x80
    17ce:	019b      	lsls	r3, r3, #6
    17d0:	604b      	str	r3, [r1, #4]

	return 0;
}
    17d2:	2000      	movs	r0, #0
    17d4:	4770      	bx	lr
    17d6:	46c0      	nop			; (mov r8, r8)

000017d8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    17d8:	2001      	movs	r0, #1
    17da:	4770      	bx	lr

000017dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    17dc:	2000      	movs	r0, #0
    17de:	4770      	bx	lr

000017e0 <calculCRC>:
	
	return true;
	
}
//#ifdef MASTER_R21
uint8_t calculCRC(uint8_t data[]){
    17e0:	1c03      	adds	r3, r0, #0
    17e2:	2280      	movs	r2, #128	; 0x80
    17e4:	0112      	lsls	r2, r2, #4
    17e6:	1881      	adds	r1, r0, r2
	uint16_t i;
	uint8_t crc=0;
    17e8:	2000      	movs	r0, #0
	for(i=0;i<(DATASIZE*2);i++){
		crc=crc+data[i];			
    17ea:	781a      	ldrb	r2, [r3, #0]
    17ec:	1880      	adds	r0, r0, r2
    17ee:	b2c0      	uxtb	r0, r0
    17f0:	3301      	adds	r3, #1
}
//#ifdef MASTER_R21
uint8_t calculCRC(uint8_t data[]){
	uint16_t i;
	uint8_t crc=0;
	for(i=0;i<(DATASIZE*2);i++){
    17f2:	428b      	cmp	r3, r1
    17f4:	d1f9      	bne.n	17ea <calculCRC+0xa>
		crc=crc+data[i];			
	}
	
	return crc;
}
    17f6:	4770      	bx	lr

000017f8 <main>:
	networkTx(crc,1);
	printf("end\r\n");	
	
	
}
int main(void){
    17f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fa:	465f      	mov	r7, fp
    17fc:	464e      	mov	r6, r9
    17fe:	4645      	mov	r5, r8
    1800:	b4e0      	push	{r5, r6, r7}
    1802:	4c25      	ldr	r4, [pc, #148]	; (1898 <main+0xa0>)
    1804:	44a5      	add	sp, r4

	
	system_init();
    1806:	4b25      	ldr	r3, [pc, #148]	; (189c <main+0xa4>)
    1808:	4798      	blx	r3
	configureHMI();
    180a:	4b25      	ldr	r3, [pc, #148]	; (18a0 <main+0xa8>)
    180c:	4798      	blx	r3
	
	configurationNetwork();
    180e:	4b25      	ldr	r3, [pc, #148]	; (18a4 <main+0xac>)
    1810:	4798      	blx	r3
	#ifndef MASTER_R21
		configure_spi_slave();
	#endif
	configureInternalClock();
    1812:	4b25      	ldr	r3, [pc, #148]	; (18a8 <main+0xb0>)
    1814:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1816:	4b25      	ldr	r3, [pc, #148]	; (18ac <main+0xb4>)
    1818:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    181a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    181c:	07d2      	lsls	r2, r2, #31
    181e:	d536      	bpl.n	188e <main+0x96>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1820:	2200      	movs	r2, #0
    1822:	629a      	str	r2, [r3, #40]	; 0x28
    1824:	e033      	b.n	188e <main+0x96>
	uint8_t buffer_rx[DATASIZE*2];

	spi_write(&spi_slave_instance,0);
	uint16_t i ;
	for(i=0;i<DATASIZE*2;i++){	//a suppr
		buffer_rx[i]=i;
    1826:	a902      	add	r1, sp, #8
    1828:	545b      	strb	r3, [r3, r1]
    182a:	3301      	adds	r3, #1
	#endif
	uint8_t buffer_rx[DATASIZE*2];

	spi_write(&spi_slave_instance,0);
	uint16_t i ;
	for(i=0;i<DATASIZE*2;i++){	//a suppr
    182c:	4293      	cmp	r3, r2
    182e:	d1fa      	bne.n	1826 <main+0x2e>
			uint16_t indice=0;
			//while(!networkAvailable());
		
			
			while(indice<(DATASIZE*2)+1){
				while(networkAvailable()){
    1830:	4b1f      	ldr	r3, [pc, #124]	; (18b0 <main+0xb8>)
    1832:	4699      	mov	r9, r3
						indice++;
						
					}
					else{
						indice++;
						uint8_t crc = calculCRC(buffer_rx);
    1834:	4b1f      	ldr	r3, [pc, #124]	; (18b4 <main+0xbc>)
    1836:	469b      	mov	fp, r3
						uint8_t crcReceive=networkRead();
    1838:	4b1f      	ldr	r3, [pc, #124]	; (18b8 <main+0xc0>)
    183a:	4698      	mov	r8, r3
			}
			else{
				//printf("ERROR TIMEOUT\r\n");
			}
		#else
			uint16_t indice=0;
    183c:	2700      	movs	r7, #0
    183e:	e01e      	b.n	187e <main+0x86>
		
			
			while(indice<(DATASIZE*2)+1){
				while(networkAvailable()){

					if(indice<(DATASIZE*2)){
    1840:	4b1e      	ldr	r3, [pc, #120]	; (18bc <main+0xc4>)
    1842:	429f      	cmp	r7, r3
    1844:	d804      	bhi.n	1850 <main+0x58>
						buffer_rx[indice]=networkRead();
    1846:	4b1c      	ldr	r3, [pc, #112]	; (18b8 <main+0xc0>)
    1848:	4798      	blx	r3
    184a:	ab02      	add	r3, sp, #8
    184c:	55d8      	strb	r0, [r3, r7]
    184e:	e014      	b.n	187a <main+0x82>
						indice++;
						
					}
					else{
						indice++;
						uint8_t crc = calculCRC(buffer_rx);
    1850:	a802      	add	r0, sp, #8
    1852:	47d8      	blx	fp
    1854:	9001      	str	r0, [sp, #4]
    1856:	1c04      	adds	r4, r0, #0
						uint8_t crcReceive=networkRead();
    1858:	47c0      	blx	r8
						if(crc==crcReceive){
    185a:	4284      	cmp	r4, r0
    185c:	d10d      	bne.n	187a <main+0x82>
    185e:	ac02      	add	r4, sp, #8
    1860:	2680      	movs	r6, #128	; 0x80
    1862:	0136      	lsls	r6, r6, #4
    1864:	46a4      	mov	ip, r4
    1866:	4466      	add	r6, ip
							for(i=0;i<(DATASIZE*2);i++){
								printf("%c",buffer_rx[i]);
    1868:	4d15      	ldr	r5, [pc, #84]	; (18c0 <main+0xc8>)
    186a:	7820      	ldrb	r0, [r4, #0]
    186c:	47a8      	blx	r5
    186e:	3401      	adds	r4, #1
					else{
						indice++;
						uint8_t crc = calculCRC(buffer_rx);
						uint8_t crcReceive=networkRead();
						if(crc==crcReceive){
							for(i=0;i<(DATASIZE*2);i++){
    1870:	42b4      	cmp	r4, r6
    1872:	d1fa      	bne.n	186a <main+0x72>
								printf("%c",buffer_rx[i]);
							}
							printf("%c",crc);
    1874:	9801      	ldr	r0, [sp, #4]
    1876:	4b12      	ldr	r3, [pc, #72]	; (18c0 <main+0xc8>)
    1878:	4798      	blx	r3
    187a:	1c7b      	adds	r3, r7, #1
    187c:	b29f      	uxth	r7, r3
			uint16_t indice=0;
			//while(!networkAvailable());
		
			
			while(indice<(DATASIZE*2)+1){
				while(networkAvailable()){
    187e:	47c8      	blx	r9
    1880:	2800      	cmp	r0, #0
    1882:	d1dd      	bne.n	1840 <main+0x48>
		#else
			uint16_t indice=0;
			//while(!networkAvailable());
		
			
			while(indice<(DATASIZE*2)+1){
    1884:	2380      	movs	r3, #128	; 0x80
    1886:	011b      	lsls	r3, r3, #4
    1888:	429f      	cmp	r7, r3
    188a:	d8d7      	bhi.n	183c <main+0x44>
    188c:	e7f7      	b.n	187e <main+0x86>
	networkTx(crc,1);
	printf("end\r\n");	
	
	
}
int main(void){
    188e:	2300      	movs	r3, #0
	#endif
	uint8_t buffer_rx[DATASIZE*2];

	spi_write(&spi_slave_instance,0);
	uint16_t i ;
	for(i=0;i<DATASIZE*2;i++){	//a suppr
    1890:	2280      	movs	r2, #128	; 0x80
    1892:	0112      	lsls	r2, r2, #4
    1894:	e7c7      	b.n	1826 <main+0x2e>
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	fffff7f8 	.word	0xfffff7f8
    189c:	00001679 	.word	0x00001679
    18a0:	00000b49 	.word	0x00000b49
    18a4:	000009f5 	.word	0x000009f5
    18a8:	000002f9 	.word	0x000002f9
    18ac:	20000d24 	.word	0x20000d24
    18b0:	000009a5 	.word	0x000009a5
    18b4:	000017e1 	.word	0x000017e1
    18b8:	000009c5 	.word	0x000009c5
    18bc:	000007ff 	.word	0x000007ff
    18c0:	00001aad 	.word	0x00001aad

000018c4 <__aeabi_uidiv>:
    18c4:	2200      	movs	r2, #0
    18c6:	0843      	lsrs	r3, r0, #1
    18c8:	428b      	cmp	r3, r1
    18ca:	d374      	bcc.n	19b6 <__aeabi_uidiv+0xf2>
    18cc:	0903      	lsrs	r3, r0, #4
    18ce:	428b      	cmp	r3, r1
    18d0:	d35f      	bcc.n	1992 <__aeabi_uidiv+0xce>
    18d2:	0a03      	lsrs	r3, r0, #8
    18d4:	428b      	cmp	r3, r1
    18d6:	d344      	bcc.n	1962 <__aeabi_uidiv+0x9e>
    18d8:	0b03      	lsrs	r3, r0, #12
    18da:	428b      	cmp	r3, r1
    18dc:	d328      	bcc.n	1930 <__aeabi_uidiv+0x6c>
    18de:	0c03      	lsrs	r3, r0, #16
    18e0:	428b      	cmp	r3, r1
    18e2:	d30d      	bcc.n	1900 <__aeabi_uidiv+0x3c>
    18e4:	22ff      	movs	r2, #255	; 0xff
    18e6:	0209      	lsls	r1, r1, #8
    18e8:	ba12      	rev	r2, r2
    18ea:	0c03      	lsrs	r3, r0, #16
    18ec:	428b      	cmp	r3, r1
    18ee:	d302      	bcc.n	18f6 <__aeabi_uidiv+0x32>
    18f0:	1212      	asrs	r2, r2, #8
    18f2:	0209      	lsls	r1, r1, #8
    18f4:	d065      	beq.n	19c2 <__aeabi_uidiv+0xfe>
    18f6:	0b03      	lsrs	r3, r0, #12
    18f8:	428b      	cmp	r3, r1
    18fa:	d319      	bcc.n	1930 <__aeabi_uidiv+0x6c>
    18fc:	e000      	b.n	1900 <__aeabi_uidiv+0x3c>
    18fe:	0a09      	lsrs	r1, r1, #8
    1900:	0bc3      	lsrs	r3, r0, #15
    1902:	428b      	cmp	r3, r1
    1904:	d301      	bcc.n	190a <__aeabi_uidiv+0x46>
    1906:	03cb      	lsls	r3, r1, #15
    1908:	1ac0      	subs	r0, r0, r3
    190a:	4152      	adcs	r2, r2
    190c:	0b83      	lsrs	r3, r0, #14
    190e:	428b      	cmp	r3, r1
    1910:	d301      	bcc.n	1916 <__aeabi_uidiv+0x52>
    1912:	038b      	lsls	r3, r1, #14
    1914:	1ac0      	subs	r0, r0, r3
    1916:	4152      	adcs	r2, r2
    1918:	0b43      	lsrs	r3, r0, #13
    191a:	428b      	cmp	r3, r1
    191c:	d301      	bcc.n	1922 <__aeabi_uidiv+0x5e>
    191e:	034b      	lsls	r3, r1, #13
    1920:	1ac0      	subs	r0, r0, r3
    1922:	4152      	adcs	r2, r2
    1924:	0b03      	lsrs	r3, r0, #12
    1926:	428b      	cmp	r3, r1
    1928:	d301      	bcc.n	192e <__aeabi_uidiv+0x6a>
    192a:	030b      	lsls	r3, r1, #12
    192c:	1ac0      	subs	r0, r0, r3
    192e:	4152      	adcs	r2, r2
    1930:	0ac3      	lsrs	r3, r0, #11
    1932:	428b      	cmp	r3, r1
    1934:	d301      	bcc.n	193a <__aeabi_uidiv+0x76>
    1936:	02cb      	lsls	r3, r1, #11
    1938:	1ac0      	subs	r0, r0, r3
    193a:	4152      	adcs	r2, r2
    193c:	0a83      	lsrs	r3, r0, #10
    193e:	428b      	cmp	r3, r1
    1940:	d301      	bcc.n	1946 <__aeabi_uidiv+0x82>
    1942:	028b      	lsls	r3, r1, #10
    1944:	1ac0      	subs	r0, r0, r3
    1946:	4152      	adcs	r2, r2
    1948:	0a43      	lsrs	r3, r0, #9
    194a:	428b      	cmp	r3, r1
    194c:	d301      	bcc.n	1952 <__aeabi_uidiv+0x8e>
    194e:	024b      	lsls	r3, r1, #9
    1950:	1ac0      	subs	r0, r0, r3
    1952:	4152      	adcs	r2, r2
    1954:	0a03      	lsrs	r3, r0, #8
    1956:	428b      	cmp	r3, r1
    1958:	d301      	bcc.n	195e <__aeabi_uidiv+0x9a>
    195a:	020b      	lsls	r3, r1, #8
    195c:	1ac0      	subs	r0, r0, r3
    195e:	4152      	adcs	r2, r2
    1960:	d2cd      	bcs.n	18fe <__aeabi_uidiv+0x3a>
    1962:	09c3      	lsrs	r3, r0, #7
    1964:	428b      	cmp	r3, r1
    1966:	d301      	bcc.n	196c <__aeabi_uidiv+0xa8>
    1968:	01cb      	lsls	r3, r1, #7
    196a:	1ac0      	subs	r0, r0, r3
    196c:	4152      	adcs	r2, r2
    196e:	0983      	lsrs	r3, r0, #6
    1970:	428b      	cmp	r3, r1
    1972:	d301      	bcc.n	1978 <__aeabi_uidiv+0xb4>
    1974:	018b      	lsls	r3, r1, #6
    1976:	1ac0      	subs	r0, r0, r3
    1978:	4152      	adcs	r2, r2
    197a:	0943      	lsrs	r3, r0, #5
    197c:	428b      	cmp	r3, r1
    197e:	d301      	bcc.n	1984 <__aeabi_uidiv+0xc0>
    1980:	014b      	lsls	r3, r1, #5
    1982:	1ac0      	subs	r0, r0, r3
    1984:	4152      	adcs	r2, r2
    1986:	0903      	lsrs	r3, r0, #4
    1988:	428b      	cmp	r3, r1
    198a:	d301      	bcc.n	1990 <__aeabi_uidiv+0xcc>
    198c:	010b      	lsls	r3, r1, #4
    198e:	1ac0      	subs	r0, r0, r3
    1990:	4152      	adcs	r2, r2
    1992:	08c3      	lsrs	r3, r0, #3
    1994:	428b      	cmp	r3, r1
    1996:	d301      	bcc.n	199c <__aeabi_uidiv+0xd8>
    1998:	00cb      	lsls	r3, r1, #3
    199a:	1ac0      	subs	r0, r0, r3
    199c:	4152      	adcs	r2, r2
    199e:	0883      	lsrs	r3, r0, #2
    19a0:	428b      	cmp	r3, r1
    19a2:	d301      	bcc.n	19a8 <__aeabi_uidiv+0xe4>
    19a4:	008b      	lsls	r3, r1, #2
    19a6:	1ac0      	subs	r0, r0, r3
    19a8:	4152      	adcs	r2, r2
    19aa:	0843      	lsrs	r3, r0, #1
    19ac:	428b      	cmp	r3, r1
    19ae:	d301      	bcc.n	19b4 <__aeabi_uidiv+0xf0>
    19b0:	004b      	lsls	r3, r1, #1
    19b2:	1ac0      	subs	r0, r0, r3
    19b4:	4152      	adcs	r2, r2
    19b6:	1a41      	subs	r1, r0, r1
    19b8:	d200      	bcs.n	19bc <__aeabi_uidiv+0xf8>
    19ba:	4601      	mov	r1, r0
    19bc:	4152      	adcs	r2, r2
    19be:	4610      	mov	r0, r2
    19c0:	4770      	bx	lr
    19c2:	e7ff      	b.n	19c4 <__aeabi_uidiv+0x100>
    19c4:	b501      	push	{r0, lr}
    19c6:	2000      	movs	r0, #0
    19c8:	f000 f80c 	bl	19e4 <__aeabi_idiv0>
    19cc:	bd02      	pop	{r1, pc}
    19ce:	46c0      	nop			; (mov r8, r8)

000019d0 <__aeabi_uidivmod>:
    19d0:	2900      	cmp	r1, #0
    19d2:	d0f7      	beq.n	19c4 <__aeabi_uidiv+0x100>
    19d4:	b503      	push	{r0, r1, lr}
    19d6:	f7ff ff75 	bl	18c4 <__aeabi_uidiv>
    19da:	bc0e      	pop	{r1, r2, r3}
    19dc:	4342      	muls	r2, r0
    19de:	1a89      	subs	r1, r1, r2
    19e0:	4718      	bx	r3
    19e2:	46c0      	nop			; (mov r8, r8)

000019e4 <__aeabi_idiv0>:
    19e4:	4770      	bx	lr
    19e6:	46c0      	nop			; (mov r8, r8)

000019e8 <__aeabi_lmul>:
    19e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ea:	464f      	mov	r7, r9
    19ec:	4646      	mov	r6, r8
    19ee:	0405      	lsls	r5, r0, #16
    19f0:	0c2d      	lsrs	r5, r5, #16
    19f2:	1c2c      	adds	r4, r5, #0
    19f4:	b4c0      	push	{r6, r7}
    19f6:	0417      	lsls	r7, r2, #16
    19f8:	0c16      	lsrs	r6, r2, #16
    19fa:	0c3f      	lsrs	r7, r7, #16
    19fc:	4699      	mov	r9, r3
    19fe:	0c03      	lsrs	r3, r0, #16
    1a00:	437c      	muls	r4, r7
    1a02:	4375      	muls	r5, r6
    1a04:	435f      	muls	r7, r3
    1a06:	4373      	muls	r3, r6
    1a08:	197d      	adds	r5, r7, r5
    1a0a:	0c26      	lsrs	r6, r4, #16
    1a0c:	19ad      	adds	r5, r5, r6
    1a0e:	469c      	mov	ip, r3
    1a10:	42af      	cmp	r7, r5
    1a12:	d903      	bls.n	1a1c <__aeabi_lmul+0x34>
    1a14:	2380      	movs	r3, #128	; 0x80
    1a16:	025b      	lsls	r3, r3, #9
    1a18:	4698      	mov	r8, r3
    1a1a:	44c4      	add	ip, r8
    1a1c:	464b      	mov	r3, r9
    1a1e:	4351      	muls	r1, r2
    1a20:	4343      	muls	r3, r0
    1a22:	0424      	lsls	r4, r4, #16
    1a24:	0c2e      	lsrs	r6, r5, #16
    1a26:	0c24      	lsrs	r4, r4, #16
    1a28:	042d      	lsls	r5, r5, #16
    1a2a:	4466      	add	r6, ip
    1a2c:	192c      	adds	r4, r5, r4
    1a2e:	1859      	adds	r1, r3, r1
    1a30:	1989      	adds	r1, r1, r6
    1a32:	1c20      	adds	r0, r4, #0
    1a34:	bc0c      	pop	{r2, r3}
    1a36:	4690      	mov	r8, r2
    1a38:	4699      	mov	r9, r3
    1a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a3c <__libc_init_array>:
    1a3c:	4b0e      	ldr	r3, [pc, #56]	; (1a78 <__libc_init_array+0x3c>)
    1a3e:	b570      	push	{r4, r5, r6, lr}
    1a40:	2500      	movs	r5, #0
    1a42:	1c1e      	adds	r6, r3, #0
    1a44:	4c0d      	ldr	r4, [pc, #52]	; (1a7c <__libc_init_array+0x40>)
    1a46:	1ae4      	subs	r4, r4, r3
    1a48:	10a4      	asrs	r4, r4, #2
    1a4a:	42a5      	cmp	r5, r4
    1a4c:	d004      	beq.n	1a58 <__libc_init_array+0x1c>
    1a4e:	00ab      	lsls	r3, r5, #2
    1a50:	58f3      	ldr	r3, [r6, r3]
    1a52:	4798      	blx	r3
    1a54:	3501      	adds	r5, #1
    1a56:	e7f8      	b.n	1a4a <__libc_init_array+0xe>
    1a58:	f000 fd96 	bl	2588 <_init>
    1a5c:	4b08      	ldr	r3, [pc, #32]	; (1a80 <__libc_init_array+0x44>)
    1a5e:	2500      	movs	r5, #0
    1a60:	1c1e      	adds	r6, r3, #0
    1a62:	4c08      	ldr	r4, [pc, #32]	; (1a84 <__libc_init_array+0x48>)
    1a64:	1ae4      	subs	r4, r4, r3
    1a66:	10a4      	asrs	r4, r4, #2
    1a68:	42a5      	cmp	r5, r4
    1a6a:	d004      	beq.n	1a76 <__libc_init_array+0x3a>
    1a6c:	00ab      	lsls	r3, r5, #2
    1a6e:	58f3      	ldr	r3, [r6, r3]
    1a70:	4798      	blx	r3
    1a72:	3501      	adds	r5, #1
    1a74:	e7f8      	b.n	1a68 <__libc_init_array+0x2c>
    1a76:	bd70      	pop	{r4, r5, r6, pc}
    1a78:	00002594 	.word	0x00002594
    1a7c:	00002594 	.word	0x00002594
    1a80:	00002594 	.word	0x00002594
    1a84:	00002598 	.word	0x00002598

00001a88 <memcpy>:
    1a88:	2300      	movs	r3, #0
    1a8a:	b510      	push	{r4, lr}
    1a8c:	4293      	cmp	r3, r2
    1a8e:	d003      	beq.n	1a98 <memcpy+0x10>
    1a90:	5ccc      	ldrb	r4, [r1, r3]
    1a92:	54c4      	strb	r4, [r0, r3]
    1a94:	3301      	adds	r3, #1
    1a96:	e7f9      	b.n	1a8c <memcpy+0x4>
    1a98:	bd10      	pop	{r4, pc}

00001a9a <memset>:
    1a9a:	1c03      	adds	r3, r0, #0
    1a9c:	1882      	adds	r2, r0, r2
    1a9e:	4293      	cmp	r3, r2
    1aa0:	d002      	beq.n	1aa8 <memset+0xe>
    1aa2:	7019      	strb	r1, [r3, #0]
    1aa4:	3301      	adds	r3, #1
    1aa6:	e7fa      	b.n	1a9e <memset+0x4>
    1aa8:	4770      	bx	lr
	...

00001aac <putchar>:
    1aac:	b538      	push	{r3, r4, r5, lr}
    1aae:	4b08      	ldr	r3, [pc, #32]	; (1ad0 <putchar+0x24>)
    1ab0:	1c05      	adds	r5, r0, #0
    1ab2:	681c      	ldr	r4, [r3, #0]
    1ab4:	2c00      	cmp	r4, #0
    1ab6:	d005      	beq.n	1ac4 <putchar+0x18>
    1ab8:	69a3      	ldr	r3, [r4, #24]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d102      	bne.n	1ac4 <putchar+0x18>
    1abe:	1c20      	adds	r0, r4, #0
    1ac0:	f000 fa5c 	bl	1f7c <__sinit>
    1ac4:	1c29      	adds	r1, r5, #0
    1ac6:	1c20      	adds	r0, r4, #0
    1ac8:	68a2      	ldr	r2, [r4, #8]
    1aca:	f000 fbe9 	bl	22a0 <_putc_r>
    1ace:	bd38      	pop	{r3, r4, r5, pc}
    1ad0:	20000064 	.word	0x20000064

00001ad4 <setbuf>:
    1ad4:	b508      	push	{r3, lr}
    1ad6:	424a      	negs	r2, r1
    1ad8:	414a      	adcs	r2, r1
    1ada:	2380      	movs	r3, #128	; 0x80
    1adc:	0052      	lsls	r2, r2, #1
    1ade:	00db      	lsls	r3, r3, #3
    1ae0:	f000 f802 	bl	1ae8 <setvbuf>
    1ae4:	bd08      	pop	{r3, pc}
	...

00001ae8 <setvbuf>:
    1ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1aea:	1c1e      	adds	r6, r3, #0
    1aec:	4b3c      	ldr	r3, [pc, #240]	; (1be0 <setvbuf+0xf8>)
    1aee:	1c04      	adds	r4, r0, #0
    1af0:	681d      	ldr	r5, [r3, #0]
    1af2:	1c0f      	adds	r7, r1, #0
    1af4:	9201      	str	r2, [sp, #4]
    1af6:	2d00      	cmp	r5, #0
    1af8:	d005      	beq.n	1b06 <setvbuf+0x1e>
    1afa:	69ab      	ldr	r3, [r5, #24]
    1afc:	2b00      	cmp	r3, #0
    1afe:	d102      	bne.n	1b06 <setvbuf+0x1e>
    1b00:	1c28      	adds	r0, r5, #0
    1b02:	f000 fa3b 	bl	1f7c <__sinit>
    1b06:	4b37      	ldr	r3, [pc, #220]	; (1be4 <setvbuf+0xfc>)
    1b08:	429c      	cmp	r4, r3
    1b0a:	d101      	bne.n	1b10 <setvbuf+0x28>
    1b0c:	686c      	ldr	r4, [r5, #4]
    1b0e:	e008      	b.n	1b22 <setvbuf+0x3a>
    1b10:	4b35      	ldr	r3, [pc, #212]	; (1be8 <setvbuf+0x100>)
    1b12:	429c      	cmp	r4, r3
    1b14:	d101      	bne.n	1b1a <setvbuf+0x32>
    1b16:	68ac      	ldr	r4, [r5, #8]
    1b18:	e003      	b.n	1b22 <setvbuf+0x3a>
    1b1a:	4b34      	ldr	r3, [pc, #208]	; (1bec <setvbuf+0x104>)
    1b1c:	429c      	cmp	r4, r3
    1b1e:	d100      	bne.n	1b22 <setvbuf+0x3a>
    1b20:	68ec      	ldr	r4, [r5, #12]
    1b22:	9b01      	ldr	r3, [sp, #4]
    1b24:	2b02      	cmp	r3, #2
    1b26:	d858      	bhi.n	1bda <setvbuf+0xf2>
    1b28:	2e00      	cmp	r6, #0
    1b2a:	db56      	blt.n	1bda <setvbuf+0xf2>
    1b2c:	1c28      	adds	r0, r5, #0
    1b2e:	1c21      	adds	r1, r4, #0
    1b30:	f000 f9b6 	bl	1ea0 <_fflush_r>
    1b34:	2300      	movs	r3, #0
    1b36:	6063      	str	r3, [r4, #4]
    1b38:	61a3      	str	r3, [r4, #24]
    1b3a:	89a3      	ldrh	r3, [r4, #12]
    1b3c:	061b      	lsls	r3, r3, #24
    1b3e:	d503      	bpl.n	1b48 <setvbuf+0x60>
    1b40:	1c28      	adds	r0, r5, #0
    1b42:	6921      	ldr	r1, [r4, #16]
    1b44:	f000 fb0e 	bl	2164 <_free_r>
    1b48:	2283      	movs	r2, #131	; 0x83
    1b4a:	89a3      	ldrh	r3, [r4, #12]
    1b4c:	4393      	bics	r3, r2
    1b4e:	81a3      	strh	r3, [r4, #12]
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	2b02      	cmp	r3, #2
    1b54:	d013      	beq.n	1b7e <setvbuf+0x96>
    1b56:	2f00      	cmp	r7, #0
    1b58:	d125      	bne.n	1ba6 <setvbuf+0xbe>
    1b5a:	2e00      	cmp	r6, #0
    1b5c:	d101      	bne.n	1b62 <setvbuf+0x7a>
    1b5e:	2680      	movs	r6, #128	; 0x80
    1b60:	00f6      	lsls	r6, r6, #3
    1b62:	1c30      	adds	r0, r6, #0
    1b64:	f000 faf4 	bl	2150 <malloc>
    1b68:	1e07      	subs	r7, r0, #0
    1b6a:	d118      	bne.n	1b9e <setvbuf+0xb6>
    1b6c:	2080      	movs	r0, #128	; 0x80
    1b6e:	00c0      	lsls	r0, r0, #3
    1b70:	f000 faee 	bl	2150 <malloc>
    1b74:	1e07      	subs	r7, r0, #0
    1b76:	d110      	bne.n	1b9a <setvbuf+0xb2>
    1b78:	2001      	movs	r0, #1
    1b7a:	4240      	negs	r0, r0
    1b7c:	e000      	b.n	1b80 <setvbuf+0x98>
    1b7e:	2000      	movs	r0, #0
    1b80:	2202      	movs	r2, #2
    1b82:	89a3      	ldrh	r3, [r4, #12]
    1b84:	4313      	orrs	r3, r2
    1b86:	81a3      	strh	r3, [r4, #12]
    1b88:	2300      	movs	r3, #0
    1b8a:	60a3      	str	r3, [r4, #8]
    1b8c:	1c23      	adds	r3, r4, #0
    1b8e:	3347      	adds	r3, #71	; 0x47
    1b90:	6023      	str	r3, [r4, #0]
    1b92:	6123      	str	r3, [r4, #16]
    1b94:	2301      	movs	r3, #1
    1b96:	6163      	str	r3, [r4, #20]
    1b98:	e021      	b.n	1bde <setvbuf+0xf6>
    1b9a:	2680      	movs	r6, #128	; 0x80
    1b9c:	00f6      	lsls	r6, r6, #3
    1b9e:	2280      	movs	r2, #128	; 0x80
    1ba0:	89a3      	ldrh	r3, [r4, #12]
    1ba2:	4313      	orrs	r3, r2
    1ba4:	81a3      	strh	r3, [r4, #12]
    1ba6:	9b01      	ldr	r3, [sp, #4]
    1ba8:	2b01      	cmp	r3, #1
    1baa:	d105      	bne.n	1bb8 <setvbuf+0xd0>
    1bac:	89a3      	ldrh	r3, [r4, #12]
    1bae:	9a01      	ldr	r2, [sp, #4]
    1bb0:	431a      	orrs	r2, r3
    1bb2:	4273      	negs	r3, r6
    1bb4:	81a2      	strh	r2, [r4, #12]
    1bb6:	61a3      	str	r3, [r4, #24]
    1bb8:	4b0d      	ldr	r3, [pc, #52]	; (1bf0 <setvbuf+0x108>)
    1bba:	2000      	movs	r0, #0
    1bbc:	62ab      	str	r3, [r5, #40]	; 0x28
    1bbe:	89a2      	ldrh	r2, [r4, #12]
    1bc0:	6027      	str	r7, [r4, #0]
    1bc2:	6127      	str	r7, [r4, #16]
    1bc4:	6166      	str	r6, [r4, #20]
    1bc6:	0713      	lsls	r3, r2, #28
    1bc8:	d509      	bpl.n	1bde <setvbuf+0xf6>
    1bca:	2303      	movs	r3, #3
    1bcc:	401a      	ands	r2, r3
    1bce:	4253      	negs	r3, r2
    1bd0:	4153      	adcs	r3, r2
    1bd2:	425b      	negs	r3, r3
    1bd4:	401e      	ands	r6, r3
    1bd6:	60a6      	str	r6, [r4, #8]
    1bd8:	e001      	b.n	1bde <setvbuf+0xf6>
    1bda:	2001      	movs	r0, #1
    1bdc:	4240      	negs	r0, r0
    1bde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1be0:	20000064 	.word	0x20000064
    1be4:	00002528 	.word	0x00002528
    1be8:	00002548 	.word	0x00002548
    1bec:	00002568 	.word	0x00002568
    1bf0:	00001ef9 	.word	0x00001ef9

00001bf4 <__swbuf_r>:
    1bf4:	b570      	push	{r4, r5, r6, lr}
    1bf6:	1c05      	adds	r5, r0, #0
    1bf8:	1c0e      	adds	r6, r1, #0
    1bfa:	1c14      	adds	r4, r2, #0
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d004      	beq.n	1c0a <__swbuf_r+0x16>
    1c00:	6983      	ldr	r3, [r0, #24]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d101      	bne.n	1c0a <__swbuf_r+0x16>
    1c06:	f000 f9b9 	bl	1f7c <__sinit>
    1c0a:	4b23      	ldr	r3, [pc, #140]	; (1c98 <__swbuf_r+0xa4>)
    1c0c:	429c      	cmp	r4, r3
    1c0e:	d101      	bne.n	1c14 <__swbuf_r+0x20>
    1c10:	686c      	ldr	r4, [r5, #4]
    1c12:	e008      	b.n	1c26 <__swbuf_r+0x32>
    1c14:	4b21      	ldr	r3, [pc, #132]	; (1c9c <__swbuf_r+0xa8>)
    1c16:	429c      	cmp	r4, r3
    1c18:	d101      	bne.n	1c1e <__swbuf_r+0x2a>
    1c1a:	68ac      	ldr	r4, [r5, #8]
    1c1c:	e003      	b.n	1c26 <__swbuf_r+0x32>
    1c1e:	4b20      	ldr	r3, [pc, #128]	; (1ca0 <__swbuf_r+0xac>)
    1c20:	429c      	cmp	r4, r3
    1c22:	d100      	bne.n	1c26 <__swbuf_r+0x32>
    1c24:	68ec      	ldr	r4, [r5, #12]
    1c26:	69a3      	ldr	r3, [r4, #24]
    1c28:	60a3      	str	r3, [r4, #8]
    1c2a:	89a3      	ldrh	r3, [r4, #12]
    1c2c:	071b      	lsls	r3, r3, #28
    1c2e:	d50a      	bpl.n	1c46 <__swbuf_r+0x52>
    1c30:	6923      	ldr	r3, [r4, #16]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d007      	beq.n	1c46 <__swbuf_r+0x52>
    1c36:	6823      	ldr	r3, [r4, #0]
    1c38:	6922      	ldr	r2, [r4, #16]
    1c3a:	b2f6      	uxtb	r6, r6
    1c3c:	1a98      	subs	r0, r3, r2
    1c3e:	6963      	ldr	r3, [r4, #20]
    1c40:	4298      	cmp	r0, r3
    1c42:	db0f      	blt.n	1c64 <__swbuf_r+0x70>
    1c44:	e008      	b.n	1c58 <__swbuf_r+0x64>
    1c46:	1c28      	adds	r0, r5, #0
    1c48:	1c21      	adds	r1, r4, #0
    1c4a:	f000 f82b 	bl	1ca4 <__swsetup_r>
    1c4e:	2800      	cmp	r0, #0
    1c50:	d0f1      	beq.n	1c36 <__swbuf_r+0x42>
    1c52:	2001      	movs	r0, #1
    1c54:	4240      	negs	r0, r0
    1c56:	e01d      	b.n	1c94 <__swbuf_r+0xa0>
    1c58:	1c28      	adds	r0, r5, #0
    1c5a:	1c21      	adds	r1, r4, #0
    1c5c:	f000 f920 	bl	1ea0 <_fflush_r>
    1c60:	2800      	cmp	r0, #0
    1c62:	d1f6      	bne.n	1c52 <__swbuf_r+0x5e>
    1c64:	68a3      	ldr	r3, [r4, #8]
    1c66:	3001      	adds	r0, #1
    1c68:	3b01      	subs	r3, #1
    1c6a:	60a3      	str	r3, [r4, #8]
    1c6c:	6823      	ldr	r3, [r4, #0]
    1c6e:	1c5a      	adds	r2, r3, #1
    1c70:	6022      	str	r2, [r4, #0]
    1c72:	701e      	strb	r6, [r3, #0]
    1c74:	6963      	ldr	r3, [r4, #20]
    1c76:	4298      	cmp	r0, r3
    1c78:	d005      	beq.n	1c86 <__swbuf_r+0x92>
    1c7a:	89a3      	ldrh	r3, [r4, #12]
    1c7c:	1c30      	adds	r0, r6, #0
    1c7e:	07db      	lsls	r3, r3, #31
    1c80:	d508      	bpl.n	1c94 <__swbuf_r+0xa0>
    1c82:	2e0a      	cmp	r6, #10
    1c84:	d106      	bne.n	1c94 <__swbuf_r+0xa0>
    1c86:	1c28      	adds	r0, r5, #0
    1c88:	1c21      	adds	r1, r4, #0
    1c8a:	f000 f909 	bl	1ea0 <_fflush_r>
    1c8e:	2800      	cmp	r0, #0
    1c90:	d1df      	bne.n	1c52 <__swbuf_r+0x5e>
    1c92:	1c30      	adds	r0, r6, #0
    1c94:	bd70      	pop	{r4, r5, r6, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00002528 	.word	0x00002528
    1c9c:	00002548 	.word	0x00002548
    1ca0:	00002568 	.word	0x00002568

00001ca4 <__swsetup_r>:
    1ca4:	4b35      	ldr	r3, [pc, #212]	; (1d7c <__swsetup_r+0xd8>)
    1ca6:	b570      	push	{r4, r5, r6, lr}
    1ca8:	681d      	ldr	r5, [r3, #0]
    1caa:	1c06      	adds	r6, r0, #0
    1cac:	1c0c      	adds	r4, r1, #0
    1cae:	2d00      	cmp	r5, #0
    1cb0:	d005      	beq.n	1cbe <__swsetup_r+0x1a>
    1cb2:	69ab      	ldr	r3, [r5, #24]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d102      	bne.n	1cbe <__swsetup_r+0x1a>
    1cb8:	1c28      	adds	r0, r5, #0
    1cba:	f000 f95f 	bl	1f7c <__sinit>
    1cbe:	4b30      	ldr	r3, [pc, #192]	; (1d80 <__swsetup_r+0xdc>)
    1cc0:	429c      	cmp	r4, r3
    1cc2:	d101      	bne.n	1cc8 <__swsetup_r+0x24>
    1cc4:	686c      	ldr	r4, [r5, #4]
    1cc6:	e008      	b.n	1cda <__swsetup_r+0x36>
    1cc8:	4b2e      	ldr	r3, [pc, #184]	; (1d84 <__swsetup_r+0xe0>)
    1cca:	429c      	cmp	r4, r3
    1ccc:	d101      	bne.n	1cd2 <__swsetup_r+0x2e>
    1cce:	68ac      	ldr	r4, [r5, #8]
    1cd0:	e003      	b.n	1cda <__swsetup_r+0x36>
    1cd2:	4b2d      	ldr	r3, [pc, #180]	; (1d88 <__swsetup_r+0xe4>)
    1cd4:	429c      	cmp	r4, r3
    1cd6:	d100      	bne.n	1cda <__swsetup_r+0x36>
    1cd8:	68ec      	ldr	r4, [r5, #12]
    1cda:	89a3      	ldrh	r3, [r4, #12]
    1cdc:	b29a      	uxth	r2, r3
    1cde:	0711      	lsls	r1, r2, #28
    1ce0:	d423      	bmi.n	1d2a <__swsetup_r+0x86>
    1ce2:	06d1      	lsls	r1, r2, #27
    1ce4:	d407      	bmi.n	1cf6 <__swsetup_r+0x52>
    1ce6:	2209      	movs	r2, #9
    1ce8:	2001      	movs	r0, #1
    1cea:	6032      	str	r2, [r6, #0]
    1cec:	3237      	adds	r2, #55	; 0x37
    1cee:	4313      	orrs	r3, r2
    1cf0:	81a3      	strh	r3, [r4, #12]
    1cf2:	4240      	negs	r0, r0
    1cf4:	e040      	b.n	1d78 <__swsetup_r+0xd4>
    1cf6:	0753      	lsls	r3, r2, #29
    1cf8:	d513      	bpl.n	1d22 <__swsetup_r+0x7e>
    1cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1cfc:	2900      	cmp	r1, #0
    1cfe:	d008      	beq.n	1d12 <__swsetup_r+0x6e>
    1d00:	1c23      	adds	r3, r4, #0
    1d02:	3344      	adds	r3, #68	; 0x44
    1d04:	4299      	cmp	r1, r3
    1d06:	d002      	beq.n	1d0e <__swsetup_r+0x6a>
    1d08:	1c30      	adds	r0, r6, #0
    1d0a:	f000 fa2b 	bl	2164 <_free_r>
    1d0e:	2300      	movs	r3, #0
    1d10:	6363      	str	r3, [r4, #52]	; 0x34
    1d12:	2224      	movs	r2, #36	; 0x24
    1d14:	89a3      	ldrh	r3, [r4, #12]
    1d16:	4393      	bics	r3, r2
    1d18:	81a3      	strh	r3, [r4, #12]
    1d1a:	2300      	movs	r3, #0
    1d1c:	6063      	str	r3, [r4, #4]
    1d1e:	6923      	ldr	r3, [r4, #16]
    1d20:	6023      	str	r3, [r4, #0]
    1d22:	2208      	movs	r2, #8
    1d24:	89a3      	ldrh	r3, [r4, #12]
    1d26:	4313      	orrs	r3, r2
    1d28:	81a3      	strh	r3, [r4, #12]
    1d2a:	6923      	ldr	r3, [r4, #16]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d10b      	bne.n	1d48 <__swsetup_r+0xa4>
    1d30:	23a0      	movs	r3, #160	; 0xa0
    1d32:	89a2      	ldrh	r2, [r4, #12]
    1d34:	009b      	lsls	r3, r3, #2
    1d36:	4013      	ands	r3, r2
    1d38:	2280      	movs	r2, #128	; 0x80
    1d3a:	0092      	lsls	r2, r2, #2
    1d3c:	4293      	cmp	r3, r2
    1d3e:	d003      	beq.n	1d48 <__swsetup_r+0xa4>
    1d40:	1c30      	adds	r0, r6, #0
    1d42:	1c21      	adds	r1, r4, #0
    1d44:	f000 f9ac 	bl	20a0 <__smakebuf_r>
    1d48:	2301      	movs	r3, #1
    1d4a:	89a2      	ldrh	r2, [r4, #12]
    1d4c:	4013      	ands	r3, r2
    1d4e:	d005      	beq.n	1d5c <__swsetup_r+0xb8>
    1d50:	2300      	movs	r3, #0
    1d52:	60a3      	str	r3, [r4, #8]
    1d54:	6963      	ldr	r3, [r4, #20]
    1d56:	425b      	negs	r3, r3
    1d58:	61a3      	str	r3, [r4, #24]
    1d5a:	e003      	b.n	1d64 <__swsetup_r+0xc0>
    1d5c:	0791      	lsls	r1, r2, #30
    1d5e:	d400      	bmi.n	1d62 <__swsetup_r+0xbe>
    1d60:	6963      	ldr	r3, [r4, #20]
    1d62:	60a3      	str	r3, [r4, #8]
    1d64:	2000      	movs	r0, #0
    1d66:	6923      	ldr	r3, [r4, #16]
    1d68:	4283      	cmp	r3, r0
    1d6a:	d105      	bne.n	1d78 <__swsetup_r+0xd4>
    1d6c:	0613      	lsls	r3, r2, #24
    1d6e:	d503      	bpl.n	1d78 <__swsetup_r+0xd4>
    1d70:	2340      	movs	r3, #64	; 0x40
    1d72:	431a      	orrs	r2, r3
    1d74:	81a2      	strh	r2, [r4, #12]
    1d76:	3801      	subs	r0, #1
    1d78:	bd70      	pop	{r4, r5, r6, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	20000064 	.word	0x20000064
    1d80:	00002528 	.word	0x00002528
    1d84:	00002548 	.word	0x00002548
    1d88:	00002568 	.word	0x00002568

00001d8c <__sflush_r>:
    1d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d8e:	898a      	ldrh	r2, [r1, #12]
    1d90:	1c05      	adds	r5, r0, #0
    1d92:	1c0c      	adds	r4, r1, #0
    1d94:	0713      	lsls	r3, r2, #28
    1d96:	d45e      	bmi.n	1e56 <__sflush_r+0xca>
    1d98:	684b      	ldr	r3, [r1, #4]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	dc02      	bgt.n	1da4 <__sflush_r+0x18>
    1d9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1da0:	2b00      	cmp	r3, #0
    1da2:	dd1a      	ble.n	1dda <__sflush_r+0x4e>
    1da4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1da6:	2f00      	cmp	r7, #0
    1da8:	d017      	beq.n	1dda <__sflush_r+0x4e>
    1daa:	2300      	movs	r3, #0
    1dac:	682e      	ldr	r6, [r5, #0]
    1dae:	602b      	str	r3, [r5, #0]
    1db0:	2380      	movs	r3, #128	; 0x80
    1db2:	015b      	lsls	r3, r3, #5
    1db4:	401a      	ands	r2, r3
    1db6:	d001      	beq.n	1dbc <__sflush_r+0x30>
    1db8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    1dba:	e015      	b.n	1de8 <__sflush_r+0x5c>
    1dbc:	1c28      	adds	r0, r5, #0
    1dbe:	6a21      	ldr	r1, [r4, #32]
    1dc0:	2301      	movs	r3, #1
    1dc2:	47b8      	blx	r7
    1dc4:	1c02      	adds	r2, r0, #0
    1dc6:	1c43      	adds	r3, r0, #1
    1dc8:	d10e      	bne.n	1de8 <__sflush_r+0x5c>
    1dca:	682b      	ldr	r3, [r5, #0]
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d00b      	beq.n	1de8 <__sflush_r+0x5c>
    1dd0:	2b1d      	cmp	r3, #29
    1dd2:	d001      	beq.n	1dd8 <__sflush_r+0x4c>
    1dd4:	2b16      	cmp	r3, #22
    1dd6:	d102      	bne.n	1dde <__sflush_r+0x52>
    1dd8:	602e      	str	r6, [r5, #0]
    1dda:	2000      	movs	r0, #0
    1ddc:	e05e      	b.n	1e9c <__sflush_r+0x110>
    1dde:	2140      	movs	r1, #64	; 0x40
    1de0:	89a3      	ldrh	r3, [r4, #12]
    1de2:	430b      	orrs	r3, r1
    1de4:	81a3      	strh	r3, [r4, #12]
    1de6:	e059      	b.n	1e9c <__sflush_r+0x110>
    1de8:	89a3      	ldrh	r3, [r4, #12]
    1dea:	075b      	lsls	r3, r3, #29
    1dec:	d506      	bpl.n	1dfc <__sflush_r+0x70>
    1dee:	6863      	ldr	r3, [r4, #4]
    1df0:	1ad2      	subs	r2, r2, r3
    1df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1df4:	2b00      	cmp	r3, #0
    1df6:	d001      	beq.n	1dfc <__sflush_r+0x70>
    1df8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1dfa:	1ad2      	subs	r2, r2, r3
    1dfc:	2300      	movs	r3, #0
    1dfe:	1c28      	adds	r0, r5, #0
    1e00:	6a21      	ldr	r1, [r4, #32]
    1e02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1e04:	47b8      	blx	r7
    1e06:	89a3      	ldrh	r3, [r4, #12]
    1e08:	1c42      	adds	r2, r0, #1
    1e0a:	d106      	bne.n	1e1a <__sflush_r+0x8e>
    1e0c:	682a      	ldr	r2, [r5, #0]
    1e0e:	2a00      	cmp	r2, #0
    1e10:	d003      	beq.n	1e1a <__sflush_r+0x8e>
    1e12:	2a1d      	cmp	r2, #29
    1e14:	d001      	beq.n	1e1a <__sflush_r+0x8e>
    1e16:	2a16      	cmp	r2, #22
    1e18:	d119      	bne.n	1e4e <__sflush_r+0xc2>
    1e1a:	2200      	movs	r2, #0
    1e1c:	6062      	str	r2, [r4, #4]
    1e1e:	6922      	ldr	r2, [r4, #16]
    1e20:	6022      	str	r2, [r4, #0]
    1e22:	04db      	lsls	r3, r3, #19
    1e24:	d505      	bpl.n	1e32 <__sflush_r+0xa6>
    1e26:	1c43      	adds	r3, r0, #1
    1e28:	d102      	bne.n	1e30 <__sflush_r+0xa4>
    1e2a:	682b      	ldr	r3, [r5, #0]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d100      	bne.n	1e32 <__sflush_r+0xa6>
    1e30:	6560      	str	r0, [r4, #84]	; 0x54
    1e32:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e34:	602e      	str	r6, [r5, #0]
    1e36:	2900      	cmp	r1, #0
    1e38:	d0cf      	beq.n	1dda <__sflush_r+0x4e>
    1e3a:	1c23      	adds	r3, r4, #0
    1e3c:	3344      	adds	r3, #68	; 0x44
    1e3e:	4299      	cmp	r1, r3
    1e40:	d002      	beq.n	1e48 <__sflush_r+0xbc>
    1e42:	1c28      	adds	r0, r5, #0
    1e44:	f000 f98e 	bl	2164 <_free_r>
    1e48:	2000      	movs	r0, #0
    1e4a:	6360      	str	r0, [r4, #52]	; 0x34
    1e4c:	e026      	b.n	1e9c <__sflush_r+0x110>
    1e4e:	2240      	movs	r2, #64	; 0x40
    1e50:	4313      	orrs	r3, r2
    1e52:	81a3      	strh	r3, [r4, #12]
    1e54:	e022      	b.n	1e9c <__sflush_r+0x110>
    1e56:	690f      	ldr	r7, [r1, #16]
    1e58:	2f00      	cmp	r7, #0
    1e5a:	d0be      	beq.n	1dda <__sflush_r+0x4e>
    1e5c:	680b      	ldr	r3, [r1, #0]
    1e5e:	600f      	str	r7, [r1, #0]
    1e60:	1bdb      	subs	r3, r3, r7
    1e62:	9301      	str	r3, [sp, #4]
    1e64:	2300      	movs	r3, #0
    1e66:	0792      	lsls	r2, r2, #30
    1e68:	d100      	bne.n	1e6c <__sflush_r+0xe0>
    1e6a:	694b      	ldr	r3, [r1, #20]
    1e6c:	60a3      	str	r3, [r4, #8]
    1e6e:	9b01      	ldr	r3, [sp, #4]
    1e70:	2b00      	cmp	r3, #0
    1e72:	ddb2      	ble.n	1dda <__sflush_r+0x4e>
    1e74:	1c28      	adds	r0, r5, #0
    1e76:	6a21      	ldr	r1, [r4, #32]
    1e78:	1c3a      	adds	r2, r7, #0
    1e7a:	9b01      	ldr	r3, [sp, #4]
    1e7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1e7e:	47b0      	blx	r6
    1e80:	2800      	cmp	r0, #0
    1e82:	dc06      	bgt.n	1e92 <__sflush_r+0x106>
    1e84:	2240      	movs	r2, #64	; 0x40
    1e86:	2001      	movs	r0, #1
    1e88:	89a3      	ldrh	r3, [r4, #12]
    1e8a:	4240      	negs	r0, r0
    1e8c:	4313      	orrs	r3, r2
    1e8e:	81a3      	strh	r3, [r4, #12]
    1e90:	e004      	b.n	1e9c <__sflush_r+0x110>
    1e92:	9b01      	ldr	r3, [sp, #4]
    1e94:	183f      	adds	r7, r7, r0
    1e96:	1a1b      	subs	r3, r3, r0
    1e98:	9301      	str	r3, [sp, #4]
    1e9a:	e7e8      	b.n	1e6e <__sflush_r+0xe2>
    1e9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00001ea0 <_fflush_r>:
    1ea0:	b538      	push	{r3, r4, r5, lr}
    1ea2:	690b      	ldr	r3, [r1, #16]
    1ea4:	1c05      	adds	r5, r0, #0
    1ea6:	1c0c      	adds	r4, r1, #0
    1ea8:	2b00      	cmp	r3, #0
    1eaa:	d101      	bne.n	1eb0 <_fflush_r+0x10>
    1eac:	2000      	movs	r0, #0
    1eae:	e01c      	b.n	1eea <_fflush_r+0x4a>
    1eb0:	2800      	cmp	r0, #0
    1eb2:	d004      	beq.n	1ebe <_fflush_r+0x1e>
    1eb4:	6983      	ldr	r3, [r0, #24]
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d101      	bne.n	1ebe <_fflush_r+0x1e>
    1eba:	f000 f85f 	bl	1f7c <__sinit>
    1ebe:	4b0b      	ldr	r3, [pc, #44]	; (1eec <_fflush_r+0x4c>)
    1ec0:	429c      	cmp	r4, r3
    1ec2:	d101      	bne.n	1ec8 <_fflush_r+0x28>
    1ec4:	686c      	ldr	r4, [r5, #4]
    1ec6:	e008      	b.n	1eda <_fflush_r+0x3a>
    1ec8:	4b09      	ldr	r3, [pc, #36]	; (1ef0 <_fflush_r+0x50>)
    1eca:	429c      	cmp	r4, r3
    1ecc:	d101      	bne.n	1ed2 <_fflush_r+0x32>
    1ece:	68ac      	ldr	r4, [r5, #8]
    1ed0:	e003      	b.n	1eda <_fflush_r+0x3a>
    1ed2:	4b08      	ldr	r3, [pc, #32]	; (1ef4 <_fflush_r+0x54>)
    1ed4:	429c      	cmp	r4, r3
    1ed6:	d100      	bne.n	1eda <_fflush_r+0x3a>
    1ed8:	68ec      	ldr	r4, [r5, #12]
    1eda:	220c      	movs	r2, #12
    1edc:	5ea3      	ldrsh	r3, [r4, r2]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d0e4      	beq.n	1eac <_fflush_r+0xc>
    1ee2:	1c28      	adds	r0, r5, #0
    1ee4:	1c21      	adds	r1, r4, #0
    1ee6:	f7ff ff51 	bl	1d8c <__sflush_r>
    1eea:	bd38      	pop	{r3, r4, r5, pc}
    1eec:	00002528 	.word	0x00002528
    1ef0:	00002548 	.word	0x00002548
    1ef4:	00002568 	.word	0x00002568

00001ef8 <_cleanup_r>:
    1ef8:	b508      	push	{r3, lr}
    1efa:	4902      	ldr	r1, [pc, #8]	; (1f04 <_cleanup_r+0xc>)
    1efc:	f000 f8ae 	bl	205c <_fwalk_reent>
    1f00:	bd08      	pop	{r3, pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	00001ea1 	.word	0x00001ea1

00001f08 <std.isra.0>:
    1f08:	2300      	movs	r3, #0
    1f0a:	b510      	push	{r4, lr}
    1f0c:	1c04      	adds	r4, r0, #0
    1f0e:	6003      	str	r3, [r0, #0]
    1f10:	6043      	str	r3, [r0, #4]
    1f12:	6083      	str	r3, [r0, #8]
    1f14:	8181      	strh	r1, [r0, #12]
    1f16:	6643      	str	r3, [r0, #100]	; 0x64
    1f18:	81c2      	strh	r2, [r0, #14]
    1f1a:	6103      	str	r3, [r0, #16]
    1f1c:	6143      	str	r3, [r0, #20]
    1f1e:	6183      	str	r3, [r0, #24]
    1f20:	1c19      	adds	r1, r3, #0
    1f22:	2208      	movs	r2, #8
    1f24:	305c      	adds	r0, #92	; 0x5c
    1f26:	f7ff fdb8 	bl	1a9a <memset>
    1f2a:	4b05      	ldr	r3, [pc, #20]	; (1f40 <std.isra.0+0x38>)
    1f2c:	6224      	str	r4, [r4, #32]
    1f2e:	6263      	str	r3, [r4, #36]	; 0x24
    1f30:	4b04      	ldr	r3, [pc, #16]	; (1f44 <std.isra.0+0x3c>)
    1f32:	62a3      	str	r3, [r4, #40]	; 0x28
    1f34:	4b04      	ldr	r3, [pc, #16]	; (1f48 <std.isra.0+0x40>)
    1f36:	62e3      	str	r3, [r4, #44]	; 0x2c
    1f38:	4b04      	ldr	r3, [pc, #16]	; (1f4c <std.isra.0+0x44>)
    1f3a:	6323      	str	r3, [r4, #48]	; 0x30
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	0000233d 	.word	0x0000233d
    1f44:	00002365 	.word	0x00002365
    1f48:	0000239d 	.word	0x0000239d
    1f4c:	000023c9 	.word	0x000023c9

00001f50 <__sfmoreglue>:
    1f50:	b570      	push	{r4, r5, r6, lr}
    1f52:	2568      	movs	r5, #104	; 0x68
    1f54:	1e4b      	subs	r3, r1, #1
    1f56:	435d      	muls	r5, r3
    1f58:	1c0e      	adds	r6, r1, #0
    1f5a:	1c29      	adds	r1, r5, #0
    1f5c:	3174      	adds	r1, #116	; 0x74
    1f5e:	f000 f947 	bl	21f0 <_malloc_r>
    1f62:	1e04      	subs	r4, r0, #0
    1f64:	d008      	beq.n	1f78 <__sfmoreglue+0x28>
    1f66:	2100      	movs	r1, #0
    1f68:	1c2a      	adds	r2, r5, #0
    1f6a:	6001      	str	r1, [r0, #0]
    1f6c:	6046      	str	r6, [r0, #4]
    1f6e:	300c      	adds	r0, #12
    1f70:	60a0      	str	r0, [r4, #8]
    1f72:	3268      	adds	r2, #104	; 0x68
    1f74:	f7ff fd91 	bl	1a9a <memset>
    1f78:	1c20      	adds	r0, r4, #0
    1f7a:	bd70      	pop	{r4, r5, r6, pc}

00001f7c <__sinit>:
    1f7c:	6983      	ldr	r3, [r0, #24]
    1f7e:	b513      	push	{r0, r1, r4, lr}
    1f80:	2b00      	cmp	r3, #0
    1f82:	d128      	bne.n	1fd6 <__sinit+0x5a>
    1f84:	6483      	str	r3, [r0, #72]	; 0x48
    1f86:	64c3      	str	r3, [r0, #76]	; 0x4c
    1f88:	6503      	str	r3, [r0, #80]	; 0x50
    1f8a:	4b13      	ldr	r3, [pc, #76]	; (1fd8 <__sinit+0x5c>)
    1f8c:	4a13      	ldr	r2, [pc, #76]	; (1fdc <__sinit+0x60>)
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	6282      	str	r2, [r0, #40]	; 0x28
    1f92:	9301      	str	r3, [sp, #4]
    1f94:	4298      	cmp	r0, r3
    1f96:	d101      	bne.n	1f9c <__sinit+0x20>
    1f98:	2301      	movs	r3, #1
    1f9a:	6183      	str	r3, [r0, #24]
    1f9c:	1c04      	adds	r4, r0, #0
    1f9e:	f000 f81f 	bl	1fe0 <__sfp>
    1fa2:	6060      	str	r0, [r4, #4]
    1fa4:	1c20      	adds	r0, r4, #0
    1fa6:	f000 f81b 	bl	1fe0 <__sfp>
    1faa:	60a0      	str	r0, [r4, #8]
    1fac:	1c20      	adds	r0, r4, #0
    1fae:	f000 f817 	bl	1fe0 <__sfp>
    1fb2:	2104      	movs	r1, #4
    1fb4:	60e0      	str	r0, [r4, #12]
    1fb6:	2200      	movs	r2, #0
    1fb8:	6860      	ldr	r0, [r4, #4]
    1fba:	f7ff ffa5 	bl	1f08 <std.isra.0>
    1fbe:	68a0      	ldr	r0, [r4, #8]
    1fc0:	2109      	movs	r1, #9
    1fc2:	2201      	movs	r2, #1
    1fc4:	f7ff ffa0 	bl	1f08 <std.isra.0>
    1fc8:	68e0      	ldr	r0, [r4, #12]
    1fca:	2112      	movs	r1, #18
    1fcc:	2202      	movs	r2, #2
    1fce:	f7ff ff9b 	bl	1f08 <std.isra.0>
    1fd2:	2301      	movs	r3, #1
    1fd4:	61a3      	str	r3, [r4, #24]
    1fd6:	bd13      	pop	{r0, r1, r4, pc}
    1fd8:	00002524 	.word	0x00002524
    1fdc:	00001ef9 	.word	0x00001ef9

00001fe0 <__sfp>:
    1fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fe2:	4b1d      	ldr	r3, [pc, #116]	; (2058 <STACK_SIZE+0x58>)
    1fe4:	1c06      	adds	r6, r0, #0
    1fe6:	681d      	ldr	r5, [r3, #0]
    1fe8:	69ab      	ldr	r3, [r5, #24]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d102      	bne.n	1ff4 <__sfp+0x14>
    1fee:	1c28      	adds	r0, r5, #0
    1ff0:	f7ff ffc4 	bl	1f7c <__sinit>
    1ff4:	3548      	adds	r5, #72	; 0x48
    1ff6:	68ac      	ldr	r4, [r5, #8]
    1ff8:	686b      	ldr	r3, [r5, #4]
    1ffa:	3b01      	subs	r3, #1
    1ffc:	d405      	bmi.n	200a <STACK_SIZE+0xa>
    1ffe:	220c      	movs	r2, #12
    2000:	5ea7      	ldrsh	r7, [r4, r2]
    2002:	2f00      	cmp	r7, #0
    2004:	d010      	beq.n	2028 <STACK_SIZE+0x28>
    2006:	3468      	adds	r4, #104	; 0x68
    2008:	e7f7      	b.n	1ffa <__sfp+0x1a>
    200a:	682b      	ldr	r3, [r5, #0]
    200c:	2b00      	cmp	r3, #0
    200e:	d106      	bne.n	201e <STACK_SIZE+0x1e>
    2010:	1c30      	adds	r0, r6, #0
    2012:	2104      	movs	r1, #4
    2014:	f7ff ff9c 	bl	1f50 <__sfmoreglue>
    2018:	6028      	str	r0, [r5, #0]
    201a:	2800      	cmp	r0, #0
    201c:	d001      	beq.n	2022 <STACK_SIZE+0x22>
    201e:	682d      	ldr	r5, [r5, #0]
    2020:	e7e9      	b.n	1ff6 <__sfp+0x16>
    2022:	230c      	movs	r3, #12
    2024:	6033      	str	r3, [r6, #0]
    2026:	e016      	b.n	2056 <STACK_SIZE+0x56>
    2028:	2301      	movs	r3, #1
    202a:	1c20      	adds	r0, r4, #0
    202c:	425b      	negs	r3, r3
    202e:	81e3      	strh	r3, [r4, #14]
    2030:	3302      	adds	r3, #2
    2032:	81a3      	strh	r3, [r4, #12]
    2034:	6667      	str	r7, [r4, #100]	; 0x64
    2036:	6027      	str	r7, [r4, #0]
    2038:	60a7      	str	r7, [r4, #8]
    203a:	6067      	str	r7, [r4, #4]
    203c:	6127      	str	r7, [r4, #16]
    203e:	6167      	str	r7, [r4, #20]
    2040:	61a7      	str	r7, [r4, #24]
    2042:	305c      	adds	r0, #92	; 0x5c
    2044:	1c39      	adds	r1, r7, #0
    2046:	2208      	movs	r2, #8
    2048:	f7ff fd27 	bl	1a9a <memset>
    204c:	1c20      	adds	r0, r4, #0
    204e:	6367      	str	r7, [r4, #52]	; 0x34
    2050:	63a7      	str	r7, [r4, #56]	; 0x38
    2052:	64a7      	str	r7, [r4, #72]	; 0x48
    2054:	64e7      	str	r7, [r4, #76]	; 0x4c
    2056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2058:	00002524 	.word	0x00002524

0000205c <_fwalk_reent>:
    205c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    205e:	1c04      	adds	r4, r0, #0
    2060:	1c07      	adds	r7, r0, #0
    2062:	2600      	movs	r6, #0
    2064:	9101      	str	r1, [sp, #4]
    2066:	3448      	adds	r4, #72	; 0x48
    2068:	2c00      	cmp	r4, #0
    206a:	d016      	beq.n	209a <_fwalk_reent+0x3e>
    206c:	6863      	ldr	r3, [r4, #4]
    206e:	68a5      	ldr	r5, [r4, #8]
    2070:	9300      	str	r3, [sp, #0]
    2072:	9b00      	ldr	r3, [sp, #0]
    2074:	3b01      	subs	r3, #1
    2076:	9300      	str	r3, [sp, #0]
    2078:	d40d      	bmi.n	2096 <_fwalk_reent+0x3a>
    207a:	89ab      	ldrh	r3, [r5, #12]
    207c:	2b01      	cmp	r3, #1
    207e:	d908      	bls.n	2092 <_fwalk_reent+0x36>
    2080:	220e      	movs	r2, #14
    2082:	5eab      	ldrsh	r3, [r5, r2]
    2084:	3301      	adds	r3, #1
    2086:	d004      	beq.n	2092 <_fwalk_reent+0x36>
    2088:	1c38      	adds	r0, r7, #0
    208a:	1c29      	adds	r1, r5, #0
    208c:	9b01      	ldr	r3, [sp, #4]
    208e:	4798      	blx	r3
    2090:	4306      	orrs	r6, r0
    2092:	3568      	adds	r5, #104	; 0x68
    2094:	e7ed      	b.n	2072 <_fwalk_reent+0x16>
    2096:	6824      	ldr	r4, [r4, #0]
    2098:	e7e6      	b.n	2068 <_fwalk_reent+0xc>
    209a:	1c30      	adds	r0, r6, #0
    209c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000020a0 <__smakebuf_r>:
    20a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a2:	898b      	ldrh	r3, [r1, #12]
    20a4:	b091      	sub	sp, #68	; 0x44
    20a6:	079b      	lsls	r3, r3, #30
    20a8:	d506      	bpl.n	20b8 <__smakebuf_r+0x18>
    20aa:	1c0b      	adds	r3, r1, #0
    20ac:	3347      	adds	r3, #71	; 0x47
    20ae:	600b      	str	r3, [r1, #0]
    20b0:	610b      	str	r3, [r1, #16]
    20b2:	2301      	movs	r3, #1
    20b4:	614b      	str	r3, [r1, #20]
    20b6:	e045      	b.n	2144 <__smakebuf_r+0xa4>
    20b8:	1c0c      	adds	r4, r1, #0
    20ba:	230e      	movs	r3, #14
    20bc:	5ec9      	ldrsh	r1, [r1, r3]
    20be:	1c06      	adds	r6, r0, #0
    20c0:	2900      	cmp	r1, #0
    20c2:	da04      	bge.n	20ce <__smakebuf_r+0x2e>
    20c4:	2380      	movs	r3, #128	; 0x80
    20c6:	89a5      	ldrh	r5, [r4, #12]
    20c8:	401d      	ands	r5, r3
    20ca:	d110      	bne.n	20ee <__smakebuf_r+0x4e>
    20cc:	e00c      	b.n	20e8 <__smakebuf_r+0x48>
    20ce:	aa01      	add	r2, sp, #4
    20d0:	f000 f9a6 	bl	2420 <_fstat_r>
    20d4:	2800      	cmp	r0, #0
    20d6:	dbf5      	blt.n	20c4 <__smakebuf_r+0x24>
    20d8:	23f0      	movs	r3, #240	; 0xf0
    20da:	9d02      	ldr	r5, [sp, #8]
    20dc:	021b      	lsls	r3, r3, #8
    20de:	401d      	ands	r5, r3
    20e0:	4b19      	ldr	r3, [pc, #100]	; (2148 <__smakebuf_r+0xa8>)
    20e2:	18ed      	adds	r5, r5, r3
    20e4:	426b      	negs	r3, r5
    20e6:	415d      	adcs	r5, r3
    20e8:	2780      	movs	r7, #128	; 0x80
    20ea:	00ff      	lsls	r7, r7, #3
    20ec:	e001      	b.n	20f2 <__smakebuf_r+0x52>
    20ee:	2500      	movs	r5, #0
    20f0:	2740      	movs	r7, #64	; 0x40
    20f2:	1c30      	adds	r0, r6, #0
    20f4:	1c39      	adds	r1, r7, #0
    20f6:	f000 f87b 	bl	21f0 <_malloc_r>
    20fa:	2800      	cmp	r0, #0
    20fc:	d10c      	bne.n	2118 <__smakebuf_r+0x78>
    20fe:	89a3      	ldrh	r3, [r4, #12]
    2100:	059a      	lsls	r2, r3, #22
    2102:	d41f      	bmi.n	2144 <__smakebuf_r+0xa4>
    2104:	2202      	movs	r2, #2
    2106:	4313      	orrs	r3, r2
    2108:	81a3      	strh	r3, [r4, #12]
    210a:	1c23      	adds	r3, r4, #0
    210c:	3347      	adds	r3, #71	; 0x47
    210e:	6023      	str	r3, [r4, #0]
    2110:	6123      	str	r3, [r4, #16]
    2112:	2301      	movs	r3, #1
    2114:	6163      	str	r3, [r4, #20]
    2116:	e015      	b.n	2144 <__smakebuf_r+0xa4>
    2118:	2280      	movs	r2, #128	; 0x80
    211a:	4b0c      	ldr	r3, [pc, #48]	; (214c <__smakebuf_r+0xac>)
    211c:	62b3      	str	r3, [r6, #40]	; 0x28
    211e:	89a3      	ldrh	r3, [r4, #12]
    2120:	6020      	str	r0, [r4, #0]
    2122:	4313      	orrs	r3, r2
    2124:	81a3      	strh	r3, [r4, #12]
    2126:	6120      	str	r0, [r4, #16]
    2128:	6167      	str	r7, [r4, #20]
    212a:	2d00      	cmp	r5, #0
    212c:	d00a      	beq.n	2144 <__smakebuf_r+0xa4>
    212e:	230e      	movs	r3, #14
    2130:	5ee1      	ldrsh	r1, [r4, r3]
    2132:	1c30      	adds	r0, r6, #0
    2134:	f000 f986 	bl	2444 <_isatty_r>
    2138:	2800      	cmp	r0, #0
    213a:	d003      	beq.n	2144 <__smakebuf_r+0xa4>
    213c:	2201      	movs	r2, #1
    213e:	89a3      	ldrh	r3, [r4, #12]
    2140:	4313      	orrs	r3, r2
    2142:	81a3      	strh	r3, [r4, #12]
    2144:	b011      	add	sp, #68	; 0x44
    2146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2148:	ffffe000 	.word	0xffffe000
    214c:	00001ef9 	.word	0x00001ef9

00002150 <malloc>:
    2150:	b508      	push	{r3, lr}
    2152:	4b03      	ldr	r3, [pc, #12]	; (2160 <malloc+0x10>)
    2154:	1c01      	adds	r1, r0, #0
    2156:	6818      	ldr	r0, [r3, #0]
    2158:	f000 f84a 	bl	21f0 <_malloc_r>
    215c:	bd08      	pop	{r3, pc}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	20000064 	.word	0x20000064

00002164 <_free_r>:
    2164:	b530      	push	{r4, r5, lr}
    2166:	2900      	cmp	r1, #0
    2168:	d03e      	beq.n	21e8 <_free_r+0x84>
    216a:	3904      	subs	r1, #4
    216c:	680b      	ldr	r3, [r1, #0]
    216e:	2b00      	cmp	r3, #0
    2170:	da00      	bge.n	2174 <_free_r+0x10>
    2172:	18c9      	adds	r1, r1, r3
    2174:	4a1d      	ldr	r2, [pc, #116]	; (21ec <_free_r+0x88>)
    2176:	6813      	ldr	r3, [r2, #0]
    2178:	1c14      	adds	r4, r2, #0
    217a:	2b00      	cmp	r3, #0
    217c:	d102      	bne.n	2184 <_free_r+0x20>
    217e:	604b      	str	r3, [r1, #4]
    2180:	6011      	str	r1, [r2, #0]
    2182:	e031      	b.n	21e8 <_free_r+0x84>
    2184:	4299      	cmp	r1, r3
    2186:	d20d      	bcs.n	21a4 <_free_r+0x40>
    2188:	6808      	ldr	r0, [r1, #0]
    218a:	180a      	adds	r2, r1, r0
    218c:	429a      	cmp	r2, r3
    218e:	d103      	bne.n	2198 <_free_r+0x34>
    2190:	6813      	ldr	r3, [r2, #0]
    2192:	18c3      	adds	r3, r0, r3
    2194:	600b      	str	r3, [r1, #0]
    2196:	6853      	ldr	r3, [r2, #4]
    2198:	604b      	str	r3, [r1, #4]
    219a:	6021      	str	r1, [r4, #0]
    219c:	e024      	b.n	21e8 <_free_r+0x84>
    219e:	428a      	cmp	r2, r1
    21a0:	d803      	bhi.n	21aa <_free_r+0x46>
    21a2:	1c13      	adds	r3, r2, #0
    21a4:	685a      	ldr	r2, [r3, #4]
    21a6:	2a00      	cmp	r2, #0
    21a8:	d1f9      	bne.n	219e <_free_r+0x3a>
    21aa:	681d      	ldr	r5, [r3, #0]
    21ac:	195c      	adds	r4, r3, r5
    21ae:	428c      	cmp	r4, r1
    21b0:	d10b      	bne.n	21ca <_free_r+0x66>
    21b2:	6809      	ldr	r1, [r1, #0]
    21b4:	1869      	adds	r1, r5, r1
    21b6:	1858      	adds	r0, r3, r1
    21b8:	6019      	str	r1, [r3, #0]
    21ba:	4290      	cmp	r0, r2
    21bc:	d114      	bne.n	21e8 <_free_r+0x84>
    21be:	6810      	ldr	r0, [r2, #0]
    21c0:	6852      	ldr	r2, [r2, #4]
    21c2:	1809      	adds	r1, r1, r0
    21c4:	6019      	str	r1, [r3, #0]
    21c6:	605a      	str	r2, [r3, #4]
    21c8:	e00e      	b.n	21e8 <_free_r+0x84>
    21ca:	428c      	cmp	r4, r1
    21cc:	d902      	bls.n	21d4 <_free_r+0x70>
    21ce:	230c      	movs	r3, #12
    21d0:	6003      	str	r3, [r0, #0]
    21d2:	e009      	b.n	21e8 <_free_r+0x84>
    21d4:	6808      	ldr	r0, [r1, #0]
    21d6:	180c      	adds	r4, r1, r0
    21d8:	4294      	cmp	r4, r2
    21da:	d103      	bne.n	21e4 <_free_r+0x80>
    21dc:	6814      	ldr	r4, [r2, #0]
    21de:	6852      	ldr	r2, [r2, #4]
    21e0:	1900      	adds	r0, r0, r4
    21e2:	6008      	str	r0, [r1, #0]
    21e4:	604a      	str	r2, [r1, #4]
    21e6:	6059      	str	r1, [r3, #4]
    21e8:	bd30      	pop	{r4, r5, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	20000104 	.word	0x20000104

000021f0 <_malloc_r>:
    21f0:	2303      	movs	r3, #3
    21f2:	b570      	push	{r4, r5, r6, lr}
    21f4:	1ccc      	adds	r4, r1, #3
    21f6:	439c      	bics	r4, r3
    21f8:	3408      	adds	r4, #8
    21fa:	1c05      	adds	r5, r0, #0
    21fc:	2c0c      	cmp	r4, #12
    21fe:	d201      	bcs.n	2204 <_malloc_r+0x14>
    2200:	240c      	movs	r4, #12
    2202:	e005      	b.n	2210 <_malloc_r+0x20>
    2204:	2c00      	cmp	r4, #0
    2206:	da03      	bge.n	2210 <_malloc_r+0x20>
    2208:	230c      	movs	r3, #12
    220a:	2000      	movs	r0, #0
    220c:	602b      	str	r3, [r5, #0]
    220e:	e042      	b.n	2296 <_malloc_r+0xa6>
    2210:	428c      	cmp	r4, r1
    2212:	d3f9      	bcc.n	2208 <_malloc_r+0x18>
    2214:	4a20      	ldr	r2, [pc, #128]	; (2298 <_malloc_r+0xa8>)
    2216:	6813      	ldr	r3, [r2, #0]
    2218:	1c10      	adds	r0, r2, #0
    221a:	1c19      	adds	r1, r3, #0
    221c:	2900      	cmp	r1, #0
    221e:	d013      	beq.n	2248 <_malloc_r+0x58>
    2220:	680a      	ldr	r2, [r1, #0]
    2222:	1b12      	subs	r2, r2, r4
    2224:	d40d      	bmi.n	2242 <_malloc_r+0x52>
    2226:	2a0b      	cmp	r2, #11
    2228:	d902      	bls.n	2230 <_malloc_r+0x40>
    222a:	600a      	str	r2, [r1, #0]
    222c:	188b      	adds	r3, r1, r2
    222e:	e01f      	b.n	2270 <_malloc_r+0x80>
    2230:	428b      	cmp	r3, r1
    2232:	d102      	bne.n	223a <_malloc_r+0x4a>
    2234:	685a      	ldr	r2, [r3, #4]
    2236:	6002      	str	r2, [r0, #0]
    2238:	e01b      	b.n	2272 <_malloc_r+0x82>
    223a:	684a      	ldr	r2, [r1, #4]
    223c:	605a      	str	r2, [r3, #4]
    223e:	1c0b      	adds	r3, r1, #0
    2240:	e017      	b.n	2272 <_malloc_r+0x82>
    2242:	1c0b      	adds	r3, r1, #0
    2244:	6849      	ldr	r1, [r1, #4]
    2246:	e7e9      	b.n	221c <_malloc_r+0x2c>
    2248:	4e14      	ldr	r6, [pc, #80]	; (229c <_malloc_r+0xac>)
    224a:	6833      	ldr	r3, [r6, #0]
    224c:	2b00      	cmp	r3, #0
    224e:	d103      	bne.n	2258 <_malloc_r+0x68>
    2250:	1c28      	adds	r0, r5, #0
    2252:	f000 f861 	bl	2318 <_sbrk_r>
    2256:	6030      	str	r0, [r6, #0]
    2258:	1c28      	adds	r0, r5, #0
    225a:	1c21      	adds	r1, r4, #0
    225c:	f000 f85c 	bl	2318 <_sbrk_r>
    2260:	1c03      	adds	r3, r0, #0
    2262:	1c42      	adds	r2, r0, #1
    2264:	d0d0      	beq.n	2208 <_malloc_r+0x18>
    2266:	2203      	movs	r2, #3
    2268:	1cc6      	adds	r6, r0, #3
    226a:	4396      	bics	r6, r2
    226c:	4286      	cmp	r6, r0
    226e:	d10a      	bne.n	2286 <_malloc_r+0x96>
    2270:	601c      	str	r4, [r3, #0]
    2272:	1c18      	adds	r0, r3, #0
    2274:	2107      	movs	r1, #7
    2276:	300b      	adds	r0, #11
    2278:	1d1a      	adds	r2, r3, #4
    227a:	4388      	bics	r0, r1
    227c:	1a82      	subs	r2, r0, r2
    227e:	d00a      	beq.n	2296 <_malloc_r+0xa6>
    2280:	4251      	negs	r1, r2
    2282:	5099      	str	r1, [r3, r2]
    2284:	e007      	b.n	2296 <_malloc_r+0xa6>
    2286:	1a31      	subs	r1, r6, r0
    2288:	1c28      	adds	r0, r5, #0
    228a:	f000 f845 	bl	2318 <_sbrk_r>
    228e:	1c43      	adds	r3, r0, #1
    2290:	d0ba      	beq.n	2208 <_malloc_r+0x18>
    2292:	1c33      	adds	r3, r6, #0
    2294:	e7ec      	b.n	2270 <_malloc_r+0x80>
    2296:	bd70      	pop	{r4, r5, r6, pc}
    2298:	20000104 	.word	0x20000104
    229c:	20000100 	.word	0x20000100

000022a0 <_putc_r>:
    22a0:	b570      	push	{r4, r5, r6, lr}
    22a2:	1c05      	adds	r5, r0, #0
    22a4:	1c0e      	adds	r6, r1, #0
    22a6:	1c14      	adds	r4, r2, #0
    22a8:	2800      	cmp	r0, #0
    22aa:	d004      	beq.n	22b6 <_putc_r+0x16>
    22ac:	6983      	ldr	r3, [r0, #24]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d101      	bne.n	22b6 <_putc_r+0x16>
    22b2:	f7ff fe63 	bl	1f7c <__sinit>
    22b6:	4b15      	ldr	r3, [pc, #84]	; (230c <_putc_r+0x6c>)
    22b8:	429c      	cmp	r4, r3
    22ba:	d101      	bne.n	22c0 <_putc_r+0x20>
    22bc:	686c      	ldr	r4, [r5, #4]
    22be:	e008      	b.n	22d2 <_putc_r+0x32>
    22c0:	4b13      	ldr	r3, [pc, #76]	; (2310 <_putc_r+0x70>)
    22c2:	429c      	cmp	r4, r3
    22c4:	d101      	bne.n	22ca <_putc_r+0x2a>
    22c6:	68ac      	ldr	r4, [r5, #8]
    22c8:	e003      	b.n	22d2 <_putc_r+0x32>
    22ca:	4b12      	ldr	r3, [pc, #72]	; (2314 <_putc_r+0x74>)
    22cc:	429c      	cmp	r4, r3
    22ce:	d100      	bne.n	22d2 <_putc_r+0x32>
    22d0:	68ec      	ldr	r4, [r5, #12]
    22d2:	68a3      	ldr	r3, [r4, #8]
    22d4:	3b01      	subs	r3, #1
    22d6:	60a3      	str	r3, [r4, #8]
    22d8:	2b00      	cmp	r3, #0
    22da:	da10      	bge.n	22fe <_putc_r+0x5e>
    22dc:	69a2      	ldr	r2, [r4, #24]
    22de:	4293      	cmp	r3, r2
    22e0:	db07      	blt.n	22f2 <_putc_r+0x52>
    22e2:	6823      	ldr	r3, [r4, #0]
    22e4:	701e      	strb	r6, [r3, #0]
    22e6:	6823      	ldr	r3, [r4, #0]
    22e8:	7819      	ldrb	r1, [r3, #0]
    22ea:	290a      	cmp	r1, #10
    22ec:	d10a      	bne.n	2304 <_putc_r+0x64>
    22ee:	1c28      	adds	r0, r5, #0
    22f0:	e001      	b.n	22f6 <_putc_r+0x56>
    22f2:	1c28      	adds	r0, r5, #0
    22f4:	1c31      	adds	r1, r6, #0
    22f6:	1c22      	adds	r2, r4, #0
    22f8:	f7ff fc7c 	bl	1bf4 <__swbuf_r>
    22fc:	e005      	b.n	230a <_putc_r+0x6a>
    22fe:	6823      	ldr	r3, [r4, #0]
    2300:	701e      	strb	r6, [r3, #0]
    2302:	6823      	ldr	r3, [r4, #0]
    2304:	1c5a      	adds	r2, r3, #1
    2306:	6022      	str	r2, [r4, #0]
    2308:	7818      	ldrb	r0, [r3, #0]
    230a:	bd70      	pop	{r4, r5, r6, pc}
    230c:	00002528 	.word	0x00002528
    2310:	00002548 	.word	0x00002548
    2314:	00002568 	.word	0x00002568

00002318 <_sbrk_r>:
    2318:	b538      	push	{r3, r4, r5, lr}
    231a:	2300      	movs	r3, #0
    231c:	4c06      	ldr	r4, [pc, #24]	; (2338 <_sbrk_r+0x20>)
    231e:	1c05      	adds	r5, r0, #0
    2320:	1c08      	adds	r0, r1, #0
    2322:	6023      	str	r3, [r4, #0]
    2324:	f7ff fa3c 	bl	17a0 <_sbrk>
    2328:	1c43      	adds	r3, r0, #1
    232a:	d103      	bne.n	2334 <_sbrk_r+0x1c>
    232c:	6823      	ldr	r3, [r4, #0]
    232e:	2b00      	cmp	r3, #0
    2330:	d000      	beq.n	2334 <_sbrk_r+0x1c>
    2332:	602b      	str	r3, [r5, #0]
    2334:	bd38      	pop	{r3, r4, r5, pc}
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	20000d30 	.word	0x20000d30

0000233c <__sread>:
    233c:	b538      	push	{r3, r4, r5, lr}
    233e:	1c0c      	adds	r4, r1, #0
    2340:	250e      	movs	r5, #14
    2342:	5f49      	ldrsh	r1, [r1, r5]
    2344:	f000 f8a4 	bl	2490 <_read_r>
    2348:	2800      	cmp	r0, #0
    234a:	db03      	blt.n	2354 <__sread+0x18>
    234c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    234e:	181b      	adds	r3, r3, r0
    2350:	6563      	str	r3, [r4, #84]	; 0x54
    2352:	e003      	b.n	235c <__sread+0x20>
    2354:	89a2      	ldrh	r2, [r4, #12]
    2356:	4b02      	ldr	r3, [pc, #8]	; (2360 <__sread+0x24>)
    2358:	4013      	ands	r3, r2
    235a:	81a3      	strh	r3, [r4, #12]
    235c:	bd38      	pop	{r3, r4, r5, pc}
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	ffffefff 	.word	0xffffefff

00002364 <__swrite>:
    2364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2366:	1c1e      	adds	r6, r3, #0
    2368:	898b      	ldrh	r3, [r1, #12]
    236a:	1c05      	adds	r5, r0, #0
    236c:	1c0c      	adds	r4, r1, #0
    236e:	1c17      	adds	r7, r2, #0
    2370:	05db      	lsls	r3, r3, #23
    2372:	d505      	bpl.n	2380 <__swrite+0x1c>
    2374:	230e      	movs	r3, #14
    2376:	5ec9      	ldrsh	r1, [r1, r3]
    2378:	2200      	movs	r2, #0
    237a:	2302      	movs	r3, #2
    237c:	f000 f874 	bl	2468 <_lseek_r>
    2380:	89a2      	ldrh	r2, [r4, #12]
    2382:	4b05      	ldr	r3, [pc, #20]	; (2398 <__swrite+0x34>)
    2384:	1c28      	adds	r0, r5, #0
    2386:	4013      	ands	r3, r2
    2388:	81a3      	strh	r3, [r4, #12]
    238a:	1c3a      	adds	r2, r7, #0
    238c:	230e      	movs	r3, #14
    238e:	5ee1      	ldrsh	r1, [r4, r3]
    2390:	1c33      	adds	r3, r6, #0
    2392:	f000 f81f 	bl	23d4 <_write_r>
    2396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2398:	ffffefff 	.word	0xffffefff

0000239c <__sseek>:
    239c:	b538      	push	{r3, r4, r5, lr}
    239e:	1c0c      	adds	r4, r1, #0
    23a0:	250e      	movs	r5, #14
    23a2:	5f49      	ldrsh	r1, [r1, r5]
    23a4:	f000 f860 	bl	2468 <_lseek_r>
    23a8:	89a3      	ldrh	r3, [r4, #12]
    23aa:	1c42      	adds	r2, r0, #1
    23ac:	d103      	bne.n	23b6 <__sseek+0x1a>
    23ae:	4a05      	ldr	r2, [pc, #20]	; (23c4 <__sseek+0x28>)
    23b0:	4013      	ands	r3, r2
    23b2:	81a3      	strh	r3, [r4, #12]
    23b4:	e004      	b.n	23c0 <__sseek+0x24>
    23b6:	2280      	movs	r2, #128	; 0x80
    23b8:	0152      	lsls	r2, r2, #5
    23ba:	4313      	orrs	r3, r2
    23bc:	81a3      	strh	r3, [r4, #12]
    23be:	6560      	str	r0, [r4, #84]	; 0x54
    23c0:	bd38      	pop	{r3, r4, r5, pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	ffffefff 	.word	0xffffefff

000023c8 <__sclose>:
    23c8:	b508      	push	{r3, lr}
    23ca:	230e      	movs	r3, #14
    23cc:	5ec9      	ldrsh	r1, [r1, r3]
    23ce:	f000 f815 	bl	23fc <_close_r>
    23d2:	bd08      	pop	{r3, pc}

000023d4 <_write_r>:
    23d4:	b538      	push	{r3, r4, r5, lr}
    23d6:	1c05      	adds	r5, r0, #0
    23d8:	2000      	movs	r0, #0
    23da:	4c07      	ldr	r4, [pc, #28]	; (23f8 <_write_r+0x24>)
    23dc:	6020      	str	r0, [r4, #0]
    23de:	1c08      	adds	r0, r1, #0
    23e0:	1c11      	adds	r1, r2, #0
    23e2:	1c1a      	adds	r2, r3, #0
    23e4:	f7fd ff1e 	bl	224 <_write>
    23e8:	1c43      	adds	r3, r0, #1
    23ea:	d103      	bne.n	23f4 <_write_r+0x20>
    23ec:	6823      	ldr	r3, [r4, #0]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d000      	beq.n	23f4 <_write_r+0x20>
    23f2:	602b      	str	r3, [r5, #0]
    23f4:	bd38      	pop	{r3, r4, r5, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	20000d30 	.word	0x20000d30

000023fc <_close_r>:
    23fc:	b538      	push	{r3, r4, r5, lr}
    23fe:	2300      	movs	r3, #0
    2400:	4c06      	ldr	r4, [pc, #24]	; (241c <_close_r+0x20>)
    2402:	1c05      	adds	r5, r0, #0
    2404:	1c08      	adds	r0, r1, #0
    2406:	6023      	str	r3, [r4, #0]
    2408:	f7ff f9dc 	bl	17c4 <_close>
    240c:	1c43      	adds	r3, r0, #1
    240e:	d103      	bne.n	2418 <_close_r+0x1c>
    2410:	6823      	ldr	r3, [r4, #0]
    2412:	2b00      	cmp	r3, #0
    2414:	d000      	beq.n	2418 <_close_r+0x1c>
    2416:	602b      	str	r3, [r5, #0]
    2418:	bd38      	pop	{r3, r4, r5, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	20000d30 	.word	0x20000d30

00002420 <_fstat_r>:
    2420:	b538      	push	{r3, r4, r5, lr}
    2422:	2300      	movs	r3, #0
    2424:	4c06      	ldr	r4, [pc, #24]	; (2440 <_fstat_r+0x20>)
    2426:	1c05      	adds	r5, r0, #0
    2428:	1c08      	adds	r0, r1, #0
    242a:	1c11      	adds	r1, r2, #0
    242c:	6023      	str	r3, [r4, #0]
    242e:	f7ff f9cd 	bl	17cc <_fstat>
    2432:	1c43      	adds	r3, r0, #1
    2434:	d103      	bne.n	243e <_fstat_r+0x1e>
    2436:	6823      	ldr	r3, [r4, #0]
    2438:	2b00      	cmp	r3, #0
    243a:	d000      	beq.n	243e <_fstat_r+0x1e>
    243c:	602b      	str	r3, [r5, #0]
    243e:	bd38      	pop	{r3, r4, r5, pc}
    2440:	20000d30 	.word	0x20000d30

00002444 <_isatty_r>:
    2444:	b538      	push	{r3, r4, r5, lr}
    2446:	2300      	movs	r3, #0
    2448:	4c06      	ldr	r4, [pc, #24]	; (2464 <_isatty_r+0x20>)
    244a:	1c05      	adds	r5, r0, #0
    244c:	1c08      	adds	r0, r1, #0
    244e:	6023      	str	r3, [r4, #0]
    2450:	f7ff f9c2 	bl	17d8 <_isatty>
    2454:	1c43      	adds	r3, r0, #1
    2456:	d103      	bne.n	2460 <_isatty_r+0x1c>
    2458:	6823      	ldr	r3, [r4, #0]
    245a:	2b00      	cmp	r3, #0
    245c:	d000      	beq.n	2460 <_isatty_r+0x1c>
    245e:	602b      	str	r3, [r5, #0]
    2460:	bd38      	pop	{r3, r4, r5, pc}
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	20000d30 	.word	0x20000d30

00002468 <_lseek_r>:
    2468:	b538      	push	{r3, r4, r5, lr}
    246a:	1c05      	adds	r5, r0, #0
    246c:	2000      	movs	r0, #0
    246e:	4c07      	ldr	r4, [pc, #28]	; (248c <_lseek_r+0x24>)
    2470:	6020      	str	r0, [r4, #0]
    2472:	1c08      	adds	r0, r1, #0
    2474:	1c11      	adds	r1, r2, #0
    2476:	1c1a      	adds	r2, r3, #0
    2478:	f7ff f9b0 	bl	17dc <_lseek>
    247c:	1c43      	adds	r3, r0, #1
    247e:	d103      	bne.n	2488 <_lseek_r+0x20>
    2480:	6823      	ldr	r3, [r4, #0]
    2482:	2b00      	cmp	r3, #0
    2484:	d000      	beq.n	2488 <_lseek_r+0x20>
    2486:	602b      	str	r3, [r5, #0]
    2488:	bd38      	pop	{r3, r4, r5, pc}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	20000d30 	.word	0x20000d30

00002490 <_read_r>:
    2490:	b538      	push	{r3, r4, r5, lr}
    2492:	1c05      	adds	r5, r0, #0
    2494:	2000      	movs	r0, #0
    2496:	4c07      	ldr	r4, [pc, #28]	; (24b4 <_read_r+0x24>)
    2498:	6020      	str	r0, [r4, #0]
    249a:	1c08      	adds	r0, r1, #0
    249c:	1c11      	adds	r1, r2, #0
    249e:	1c1a      	adds	r2, r3, #0
    24a0:	f7fd fe9e 	bl	1e0 <_read>
    24a4:	1c43      	adds	r3, r0, #1
    24a6:	d103      	bne.n	24b0 <_read_r+0x20>
    24a8:	6823      	ldr	r3, [r4, #0]
    24aa:	2b00      	cmp	r3, #0
    24ac:	d000      	beq.n	24b0 <_read_r+0x20>
    24ae:	602b      	str	r3, [r5, #0]
    24b0:	bd38      	pop	{r3, r4, r5, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	20000d30 	.word	0x20000d30
    24b8:	0c0b0a09 	.word	0x0c0b0a09
    24bc:	00000e0d 	.word	0x00000e0d
    24c0:	42000800 	.word	0x42000800
    24c4:	42000c00 	.word	0x42000c00
    24c8:	42001000 	.word	0x42001000
    24cc:	42001400 	.word	0x42001400
    24d0:	42001800 	.word	0x42001800
    24d4:	42001c00 	.word	0x42001c00
    24d8:	0000111a 	.word	0x0000111a
    24dc:	00001116 	.word	0x00001116
    24e0:	00001116 	.word	0x00001116
    24e4:	00001176 	.word	0x00001176
    24e8:	00001176 	.word	0x00001176
    24ec:	00001130 	.word	0x00001130
    24f0:	00001120 	.word	0x00001120
    24f4:	00001136 	.word	0x00001136
    24f8:	00001164 	.word	0x00001164
    24fc:	00001200 	.word	0x00001200
    2500:	000011e0 	.word	0x000011e0
    2504:	000011e0 	.word	0x000011e0
    2508:	0000126c 	.word	0x0000126c
    250c:	000011f2 	.word	0x000011f2
    2510:	0000120e 	.word	0x0000120e
    2514:	000011e4 	.word	0x000011e4
    2518:	0000121c 	.word	0x0000121c
    251c:	0000125c 	.word	0x0000125c
    2520:	00000043 	.word	0x00000043

00002524 <_global_impure_ptr>:
    2524:	20000004                                ... 

00002528 <__sf_fake_stdin>:
	...

00002548 <__sf_fake_stdout>:
	...

00002568 <__sf_fake_stderr>:
	...

00002588 <_init>:
    2588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    258e:	bc08      	pop	{r3}
    2590:	469e      	mov	lr, r3
    2592:	4770      	bx	lr

00002594 <__init_array_start>:
    2594:	000000dd 	.word	0x000000dd

00002598 <_fini>:
    2598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    259e:	bc08      	pop	{r3}
    25a0:	469e      	mov	lr, r3
    25a2:	4770      	bx	lr

000025a4 <__fini_array_start>:
    25a4:	000000b5 	.word	0x000000b5
